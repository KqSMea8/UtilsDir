// Created by Microsoft (R) C/C++ Compiler Version 12.00.31101.0 (c6a84390).
//
// d:\projects\zetgis\zetgis\mapwingis.tlh
//
// C++ source equivalent of Win32 type library c:\\ZetLab\\MapWinGIS\\MapWinGIS.ocx
// compiler-generated file created 03/19/15 at 19:32:54 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace MapWinGIS {

//
// Forward references and typedefs
//

struct __declspec(uuid("c368d713-cc5f-40ed-9f53-f84fe197b96a"))
/* LIBID */ __MapWinGIS;
struct __declspec(uuid("1d077739-e866-46a0-b256-8aecc04f2312"))
/* dispinterface */ _DMap;
enum tkCursorMode;
enum tkCursor;
enum tkLockMode;
enum tkShapeDrawingMethod;
enum tkUnitsOfMeasure;
struct __declspec(uuid("a5692259-035e-487a-8d89-509dd6dd0f64"))
/* dual interface */ IExtents;
enum tkHJustification;
enum tkDrawReferenceList;
enum tkLineStipple;
enum tkFillStipple;
enum tkPointType;
enum tkResizeBehavior;
struct __declspec(uuid("a73af37e-3a6a-4532-b48f-fa53309fa117"))
/* dual interface */ ILabels;
struct __declspec(uuid("90e6bbf7-a956-49be-a5cd-a4640c263ab6"))
/* dual interface */ ICallback;
enum tkVerticalPosition;
struct __declspec(uuid("4bb3d2b2-a72d-4538-a092-9e1e69ed6001"))
/* dual interface */ ILabelCategory;
enum tkLabelAlignment;
enum tkLineLabelOrientation;
enum tkLinearGradientMode;
enum tkLabelFrameType;
enum tkDashStyle;
enum SelectMode;
struct __declspec(uuid("4b341a36-cfa6-4421-9d08-fd5b06097307"))
/* dual interface */ ILabel;
enum tkClassificationType;
enum tkColorSchemeType;
struct __declspec(uuid("d2334b3c-0779-4f5f-8771-2f857f0d601e"))
/* dual interface */ IColorScheme;
enum tkMapColor;
enum PredefinedColorScheme;
enum tkLabelElements;
enum tkLabelPositioning;
enum tkSavingMode;
enum tkTextRenderingHint;
struct __declspec(uuid("74f07889-1380-43ee-837a-bbb268311005"))
/* dual interface */ IPoint;
struct __declspec(uuid("5dc72405-c39c-4755-8cfc-9876a89225bc"))
/* dual interface */ IShapefile;
enum ShpfileType;
struct __declspec(uuid("5fa550e3-2044-4034-baaa-b4cce90a0c41"))
/* dual interface */ IShape;
enum tkSpatialRelation;
enum tkClipOperation;
struct __declspec(uuid("3f3751a5-4cf8-4ac3-afc2-60de8b90fc7b"))
/* dual interface */ IField;
enum FieldType;
struct __declspec(uuid("7399b752-61d9-4a23-973f-1033431dd009"))
/* dual interface */ IShapeDrawingOptions;
enum tkVectorDrawingMode;
enum tkGDIPlusHatchStyle;
enum tkPointShapeType;
struct __declspec(uuid("79c5f83e-fb53-4189-9ec4-4ac25440d825"))
/* dual interface */ IImage;
enum ImageType;
struct __declspec(uuid("1c43b56d-2065-4953-9138-31afe8470ff5"))
/* dual interface */ IGridColorScheme;
struct __declspec(uuid("1c6ecf5d-04fa-43c4-97b1-22d5ffb55fbd"))
/* dual interface */ IGridColorBreak;
enum ColoringType;
enum GradientModel;
struct __declspec(uuid("c60625ab-ad4c-405e-8ca2-62e36e4b3f73"))
/* dual interface */ IVector;
enum tkGDALResamplingMethod;
enum tkInterpolationMode;
enum tkImageSourceType;
enum tkFillType;
enum tkGradientType;
enum tkPointSymbolType;
enum tkGradientBounds;
enum tkVertexType;
struct __declspec(uuid("54eb7dd1-cec2-4165-8dba-13115b079df1"))
/* dual interface */ ILinePattern;
struct __declspec(uuid("56a5439f-f550-434e-b6c5-0508a6461f47"))
/* dual interface */ ILineSegment;
enum tkLineType;
enum tkDefaultPointSymbol;
struct __declspec(uuid("ec594cb1-fa55-469c-b662-192f7a464c23"))
/* dual interface */ IShapefileCategories;
struct __declspec(uuid("688eb3ff-cf7a-490c-9bc7-be47ceb32c59"))
/* dual interface */ IShapefileCategory;
enum tkShapeElements;
struct __declspec(uuid("d98bb982-8d47-47bc-81ca-0efa15d1b4f6"))
/* dual interface */ ICharts;
enum tkChartType;
struct __declspec(uuid("34613d99-ddab-48ca-ab5d-cad805e7986c"))
/* dual interface */ IChart;
struct __declspec(uuid("a9c1afeb-8cc6-4a36-8e41-e643c1302e6f"))
/* dual interface */ IChartField;
enum tkChartValuesStyle;
struct __declspec(uuid("4365a8a1-2e46-4223-b2dc-65764262d88b"))
/* dual interface */ ITable;
enum tkValueType;
enum tkShapefileSourceType;
enum tkGeometryEngine;
enum tkSelectionAppearance;
enum tkCollisionMode;
struct __declspec(uuid("52a29829-bb46-4d76-8082-55551e538bda"))
/* dual interface */ IStopExecution;
struct __declspec(uuid("aed5318e-9e3d-4276-be03-71edfedc0f1f"))
/* dual interface */ IGeoProjection;
enum tkCoordinateSystem;
enum tkProjectionParameter;
enum tkGeogCSParameter;
enum tkWgs84Projection;
enum tkNad83Projection;
struct __declspec(uuid("94ec8df4-6614-463a-b622-f65913bf98de"))
/* dispinterface */ _ITableEvents;
struct __declspec(uuid("abea1545-08ab-4d5c-a594-d3017211ea95"))
/* dispinterface */ _DMapEvents;
struct __declspec(uuid("fae1b21a-10c5-4c33-8dc2-931edc9fbf82"))
/* dual interface */ IShapefileColorScheme;
struct __declspec(uuid("e6d4eb7a-3e8f-45b2-a514-90ef7b2f5c0a"))
/* dual interface */ IShapefileColorBreak;
struct /* coclass */ Map;
struct /* coclass */ ShapefileColorScheme;
struct /* coclass */ ShapefileColorBreak;
struct /* coclass */ Grid;
struct __declspec(uuid("18dfb64a-9e72-4cbe-afd6-a5b7421dd0cb"))
/* dual interface */ IGrid;
struct __declspec(uuid("e42814d1-6269-41b1-93c2-aa848f00e459"))
/* dual interface */ IGridHeader;
enum GridDataType;
enum GridFileType;
struct /* coclass */ GridHeader;
struct /* coclass */ ESRIGridManager;
struct __declspec(uuid("55b3f2da-eb09-4fa9-b74b-9a1b3e457318"))
/* dual interface */ IESRIGridManager;
struct /* coclass */ Image;
struct /* coclass */ Shapefile;
struct /* coclass */ Shape;
struct /* coclass */ Extents;
struct /* coclass */ Point;
struct /* coclass */ Table;
struct /* coclass */ Field;
struct /* coclass */ ShapeNetwork;
struct __declspec(uuid("2d4968f2-40d9-4f25-8be6-b51b959cc1b0"))
/* dual interface */ IShapeNetwork;
enum AmbiguityResolution;
struct /* coclass */ Utils;
struct __declspec(uuid("360bec33-7703-4693-b6ca-90fea22cf1b7"))
/* dual interface */ IUtils;
enum PolygonOperation;
struct __declspec(uuid("55dd824e-332e-41ca-b40c-c8dc81ee209c"))
/* dual interface */ ITin;
enum SplitMethod;
struct /* coclass */ Vector;
struct /* coclass */ GridColorScheme;
struct /* coclass */ GridColorBreak;
struct /* coclass */ Tin;
struct /* coclass */ ShapeDrawingOptions;
struct /* coclass */ Labels;
struct /* coclass */ LabelCategory;
struct /* coclass */ Label;
struct /* coclass */ ShapefileCategories;
struct /* coclass */ ShapefileCategory;
struct /* coclass */ Charts;
struct /* coclass */ Chart;
struct /* coclass */ ColorScheme;
struct /* coclass */ ChartField;
struct /* coclass */ LinePattern;
struct /* coclass */ LineSegment;
struct /* coclass */ GeoProjection;
struct /* coclass */ GlobalSettings;
struct __declspec(uuid("97a80176-ee9a-461e-b494-f4f168f16eca"))
/* dual interface */ IGlobalSettings;
enum tkGdalError;
enum tkGdalErrorType;
enum tkSmoothingMode;
enum tkCompositingQuality;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(_DMap, __uuidof(_DMap));
_COM_SMARTPTR_TYPEDEF(IExtents, __uuidof(IExtents));
_COM_SMARTPTR_TYPEDEF(ICallback, __uuidof(ICallback));
_COM_SMARTPTR_TYPEDEF(ILabelCategory, __uuidof(ILabelCategory));
_COM_SMARTPTR_TYPEDEF(ILabel, __uuidof(ILabel));
_COM_SMARTPTR_TYPEDEF(IColorScheme, __uuidof(IColorScheme));
_COM_SMARTPTR_TYPEDEF(ILabels, __uuidof(ILabels));
_COM_SMARTPTR_TYPEDEF(IPoint, __uuidof(IPoint));
_COM_SMARTPTR_TYPEDEF(IShape, __uuidof(IShape));
_COM_SMARTPTR_TYPEDEF(IField, __uuidof(IField));
_COM_SMARTPTR_TYPEDEF(IGridColorBreak, __uuidof(IGridColorBreak));
_COM_SMARTPTR_TYPEDEF(IVector, __uuidof(IVector));
_COM_SMARTPTR_TYPEDEF(IGridColorScheme, __uuidof(IGridColorScheme));
_COM_SMARTPTR_TYPEDEF(IImage, __uuidof(IImage));
_COM_SMARTPTR_TYPEDEF(ILineSegment, __uuidof(ILineSegment));
_COM_SMARTPTR_TYPEDEF(ILinePattern, __uuidof(ILinePattern));
_COM_SMARTPTR_TYPEDEF(IShapeDrawingOptions, __uuidof(IShapeDrawingOptions));
_COM_SMARTPTR_TYPEDEF(IShapefileCategory, __uuidof(IShapefileCategory));
_COM_SMARTPTR_TYPEDEF(IChart, __uuidof(IChart));
_COM_SMARTPTR_TYPEDEF(IChartField, __uuidof(IChartField));
_COM_SMARTPTR_TYPEDEF(ICharts, __uuidof(ICharts));
_COM_SMARTPTR_TYPEDEF(ITable, __uuidof(ITable));
_COM_SMARTPTR_TYPEDEF(IStopExecution, __uuidof(IStopExecution));
_COM_SMARTPTR_TYPEDEF(IGeoProjection, __uuidof(IGeoProjection));
_COM_SMARTPTR_TYPEDEF(_ITableEvents, __uuidof(_ITableEvents));
_COM_SMARTPTR_TYPEDEF(_DMapEvents, __uuidof(_DMapEvents));
_COM_SMARTPTR_TYPEDEF(IShapefileColorBreak, __uuidof(IShapefileColorBreak));
_COM_SMARTPTR_TYPEDEF(IShapefileColorScheme, __uuidof(IShapefileColorScheme));
_COM_SMARTPTR_TYPEDEF(IGridHeader, __uuidof(IGridHeader));
_COM_SMARTPTR_TYPEDEF(IGrid, __uuidof(IGrid));
_COM_SMARTPTR_TYPEDEF(IESRIGridManager, __uuidof(IESRIGridManager));
_COM_SMARTPTR_TYPEDEF(ITin, __uuidof(ITin));
_COM_SMARTPTR_TYPEDEF(IGlobalSettings, __uuidof(IGlobalSettings));
_COM_SMARTPTR_TYPEDEF(IShapefile, __uuidof(IShapefile));
_COM_SMARTPTR_TYPEDEF(IShapefileCategories, __uuidof(IShapefileCategories));
_COM_SMARTPTR_TYPEDEF(IShapeNetwork, __uuidof(IShapeNetwork));
_COM_SMARTPTR_TYPEDEF(IUtils, __uuidof(IUtils));

//
// Type library items
//

struct __declspec(uuid("1d077739-e866-46a0-b256-8aecc04f2312"))
_DMap : IDispatch
{};

enum __declspec(uuid("9106cf0f-8a9a-4040-a4b0-d60b72b46504"))
tkCursorMode
{
    cmZoomIn = 0,
    cmZoomOut = 1,
    cmPan = 2,
    cmSelection = 3,
    cmNone = 4
};

enum __declspec(uuid("fd17ff91-8b93-47a2-a517-b4039579b549"))
tkCursor
{
    crsrMapDefault = 0,
    crsrAppStarting = 1,
    crsrArrow = 2,
    crsrCross = 3,
    crsrHelp = 4,
    crsrIBeam = 5,
    crsrNo = 6,
    crsrSizeAll = 7,
    crsrSizeNESW = 8,
    crsrSizeNS = 9,
    crsrSizeNWSE = 10,
    crsrSizeWE = 11,
    crsrUpArrow = 12,
    crsrWait = 13,
    crsrUserDefined = 14
};

enum __declspec(uuid("5c462daa-5cc2-4b5c-9d5a-8ba1ec1774b7"))
tkLockMode
{
    lmUnlock = 0,
    lmLock = 1
};

enum __declspec(uuid("f3f936dd-eb4a-4ec4-a30c-4ec91a83c99b"))
tkShapeDrawingMethod
{
    dmStandard = 0,
    dmNewWithSelection = 1,
    dmNewWithLabels = 2,
    dmNewSymbology = 3
};

enum __declspec(uuid("57d081f9-12f3-47b6-9336-a42dbfdfa847"))
tkUnitsOfMeasure
{
    umDecimalDegrees = 0,
    umMiliMeters = 1,
    umCentimeters = 2,
    umInches = 3,
    umFeets = 4,
    umYards = 5,
    umMeters = 6,
    umMiles = 7,
    umKilometers = 8
};

struct __declspec(uuid("a5692259-035e-487a-8d89-509dd6dd0f64"))
IExtents : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall SetBounds (
        /*[in]*/ double xMin,
        /*[in]*/ double yMin,
        /*[in]*/ double zMin,
        /*[in]*/ double xMax,
        /*[in]*/ double yMax,
        /*[in]*/ double zMax ) = 0;
      virtual HRESULT __stdcall GetBounds (
        /*[out]*/ double * xMin,
        /*[out]*/ double * yMin,
        /*[out]*/ double * zMin,
        /*[out]*/ double * xMax,
        /*[out]*/ double * yMax,
        /*[out]*/ double * zMax ) = 0;
      virtual HRESULT __stdcall get_xMin (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_xMax (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_yMin (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_yMax (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_zMin (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_zMax (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_mMin (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_mMax (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall GetMeasureBounds (
        /*[out]*/ double * mMin,
        /*[out]*/ double * mMax ) = 0;
      virtual HRESULT __stdcall SetMeasureBounds (
        /*[in]*/ double mMin,
        /*[in]*/ double mMax ) = 0;
};

enum __declspec(uuid("6ee497fb-b03b-4bba-914f-c05199be0f0d"))
tkHJustification
{
    hjLeft = 0,
    hjCenter = 1,
    hjRight = 2,
    hjNone = 3,
    hjRaw = 4
};

enum __declspec(uuid("320ac432-2396-4e9f-9bcb-ec87de8449be"))
tkDrawReferenceList
{
    dlScreenReferencedList = 0,
    dlSpatiallyReferencedList = 1
};

enum __declspec(uuid("f4fb70ae-68f3-45d4-945f-78ee26a28f1d"))
tkLineStipple
{
    lsNone = 0,
    lsDotted = 1,
    lsDashed = 2,
    lsDashDotDash = 3,
    lsDoubleSolid = 4,
    lsDoubleSolidPlusDash = 5,
    lsTrainTracks = 6,
    lsCustom = 7,
    lsDashDotDot = 8
};

enum __declspec(uuid("546ff8cf-249a-48e6-ad00-7015854d77b1"))
tkFillStipple
{
    fsNone = 0,
    fsVerticalBars = 1,
    fsHorizontalBars = 2,
    fsDiagonalDownRight = 3,
    fsDiagonalDownLeft = 4,
    fsPolkaDot = 5,
    fsCustom = 6,
    fsCross = 7,
    fsRaster = 8
};

enum __declspec(uuid("c2095580-06b9-41f5-b06e-908b6fc0c8a3"))
tkPointType
{
    ptSquare = 0,
    ptCircle = 1,
    ptDiamond = 2,
    ptTriangleUp = 3,
    ptTriangleDown = 4,
    ptTriangleLeft = 5,
    ptTriangleRight = 6,
    ptUserDefined = 7,
    ptImageList = 8,
    ptFontChar = 9
};

enum __declspec(uuid("bcdbd4e0-8b7c-11da-a72b-0800200c9a66"))
tkResizeBehavior
{
    rbClassic = 0,
    rbModern = 1,
    rbIntuitive = 2,
    rbWarp = 3,
    rbKeepScale = 4
};

struct __declspec(uuid("90e6bbf7-a956-49be-a5cd-a4640c263ab6"))
ICallback : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall Progress (
        /*[in]*/ BSTR KeyOfSender,
        /*[in]*/ long Percent,
        /*[in]*/ BSTR Message ) = 0;
      virtual HRESULT __stdcall Error (
        /*[in]*/ BSTR KeyOfSender,
        /*[in]*/ BSTR ErrorMsg ) = 0;
};

enum __declspec(uuid("0b972d4b-3d6f-4f92-bcf8-ecd424310e26"))
tkVerticalPosition
{
    vpAboveParentLayer = 0,
    vpAboveAllLayers = 1
};

enum __declspec(uuid("54594ede-bab4-43d8-ad06-462900348496"))
tkLabelAlignment
{
    laTopLeft = 0,
    laTopCenter = 1,
    laTopRight = 2,
    laCenterLeft = 3,
    laCenter = 4,
    laCenterRight = 5,
    laBottomLeft = 6,
    laBottomCenter = 7,
    laBottomRight = 8
};

enum __declspec(uuid("83ffe275-e602-4832-b44e-241eba27917d"))
tkLineLabelOrientation
{
    lorHorizontal = 0,
    lorParallel = 1,
    lorPerpindicular = 2
};

enum __declspec(uuid("d54e7336-4aec-4ff1-8681-566c61b04dd8"))
tkLinearGradientMode
{
    gmHorizontal = 0,
    gmVertical = 1,
    gmForwardDiagonal = 2,
    gmBackwardDiagonal = 3,
    gmNone = 4
};

enum __declspec(uuid("c1a63978-a342-4d37-8e5f-93b3d1f2f582"))
tkLabelFrameType
{
    lfRectangle = 0,
    lfRoundedRectangle = 1,
    lfPointedRectangle = 2
};

enum __declspec(uuid("79f928d4-6e5a-4312-a519-f6ab83691086"))
tkDashStyle
{
    dsSolid = 0,
    dsDash = 1,
    dsDot = 2,
    dsDashDot = 3,
    dsDashDotDot = 4,
    dsCustom = 5
};

struct __declspec(uuid("4bb3d2b2-a72d-4538-a092-9e1e69ed6001"))
ILabelCategory : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Priority (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall put_Priority (
        /*[in]*/ long retval ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR retval ) = 0;
      virtual HRESULT __stdcall get_Expression (
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall put_Expression (
        /*[in]*/ BSTR retval ) = 0;
      virtual HRESULT __stdcall get_MinValue (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_MinValue (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_MaxValue (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxValue (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_OffsetX (
        /*[out,retval]*/ double * retval ) = 0;
      virtual HRESULT __stdcall put_OffsetX (
        /*[in]*/ double retval ) = 0;
      virtual HRESULT __stdcall get_OffsetY (
        /*[out,retval]*/ double * retval ) = 0;
      virtual HRESULT __stdcall put_OffsetY (
        /*[in]*/ double retval ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ enum tkLabelAlignment * retval ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ enum tkLabelAlignment retval ) = 0;
      virtual HRESULT __stdcall get_LineOrientation (
        /*[out,retval]*/ enum tkLineLabelOrientation * retval ) = 0;
      virtual HRESULT __stdcall put_LineOrientation (
        /*[in]*/ enum tkLineLabelOrientation retval ) = 0;
      virtual HRESULT __stdcall get_FontName (
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall put_FontName (
        /*[in]*/ BSTR retval ) = 0;
      virtual HRESULT __stdcall get_FontSize (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall put_FontSize (
        /*[in]*/ long retval ) = 0;
      virtual HRESULT __stdcall get_FontItalic (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_FontItalic (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_FontBold (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_FontBold (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_FontUnderline (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_FontUnderline (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_FontStrikeOut (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_FontStrikeOut (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_FontColor (
        /*[out,retval]*/ OLE_COLOR * retval ) = 0;
      virtual HRESULT __stdcall put_FontColor (
        /*[in]*/ OLE_COLOR retval ) = 0;
      virtual HRESULT __stdcall get_FontColor2 (
        /*[out,retval]*/ OLE_COLOR * retval ) = 0;
      virtual HRESULT __stdcall put_FontColor2 (
        /*[in]*/ OLE_COLOR retval ) = 0;
      virtual HRESULT __stdcall get_FontGradientMode (
        /*[out,retval]*/ enum tkLinearGradientMode * retval ) = 0;
      virtual HRESULT __stdcall put_FontGradientMode (
        /*[in]*/ enum tkLinearGradientMode retval ) = 0;
      virtual HRESULT __stdcall get_FontTransparency (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall put_FontTransparency (
        /*[in]*/ long retval ) = 0;
      virtual HRESULT __stdcall get_FontOutlineVisible (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_FontOutlineVisible (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_ShadowVisible (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_ShadowVisible (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_HaloVisible (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_HaloVisible (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_FontOutlineColor (
        /*[out,retval]*/ OLE_COLOR * retval ) = 0;
      virtual HRESULT __stdcall put_FontOutlineColor (
        /*[in]*/ OLE_COLOR retval ) = 0;
      virtual HRESULT __stdcall get_ShadowColor (
        /*[out,retval]*/ OLE_COLOR * retval ) = 0;
      virtual HRESULT __stdcall put_ShadowColor (
        /*[in]*/ OLE_COLOR retval ) = 0;
      virtual HRESULT __stdcall get_HaloColor (
        /*[out,retval]*/ OLE_COLOR * retval ) = 0;
      virtual HRESULT __stdcall put_HaloColor (
        /*[in]*/ OLE_COLOR retval ) = 0;
      virtual HRESULT __stdcall get_FontOutlineWidth (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall put_FontOutlineWidth (
        /*[in]*/ long retval ) = 0;
      virtual HRESULT __stdcall get_ShadowOffsetX (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall put_ShadowOffsetX (
        /*[in]*/ long retval ) = 0;
      virtual HRESULT __stdcall get_ShadowOffsetY (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall put_ShadowOffsetY (
        /*[in]*/ long retval ) = 0;
      virtual HRESULT __stdcall get_HaloSize (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall put_HaloSize (
        /*[in]*/ long retval ) = 0;
      virtual HRESULT __stdcall get_FrameType (
        /*[out,retval]*/ enum tkLabelFrameType * retval ) = 0;
      virtual HRESULT __stdcall put_FrameType (
        /*[in]*/ enum tkLabelFrameType retval ) = 0;
      virtual HRESULT __stdcall get_FrameOutlineColor (
        /*[out,retval]*/ OLE_COLOR * retval ) = 0;
      virtual HRESULT __stdcall put_FrameOutlineColor (
        /*[in]*/ OLE_COLOR retval ) = 0;
      virtual HRESULT __stdcall get_FrameBackColor (
        /*[out,retval]*/ OLE_COLOR * retval ) = 0;
      virtual HRESULT __stdcall put_FrameBackColor (
        /*[in]*/ OLE_COLOR retval ) = 0;
      virtual HRESULT __stdcall get_FrameBackColor2 (
        /*[out,retval]*/ OLE_COLOR * retval ) = 0;
      virtual HRESULT __stdcall put_FrameBackColor2 (
        /*[in]*/ OLE_COLOR retval ) = 0;
      virtual HRESULT __stdcall get_FrameGradientMode (
        /*[out,retval]*/ enum tkLinearGradientMode * retval ) = 0;
      virtual HRESULT __stdcall put_FrameGradientMode (
        /*[in]*/ enum tkLinearGradientMode retval ) = 0;
      virtual HRESULT __stdcall get_FrameOutlineStyle (
        /*[out,retval]*/ enum tkDashStyle * retval ) = 0;
      virtual HRESULT __stdcall put_FrameOutlineStyle (
        /*[in]*/ enum tkDashStyle retval ) = 0;
      virtual HRESULT __stdcall get_FrameOutlineWidth (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall put_FrameOutlineWidth (
        /*[in]*/ long retval ) = 0;
      virtual HRESULT __stdcall get_FramePaddingX (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall put_FramePaddingX (
        /*[in]*/ long retval ) = 0;
      virtual HRESULT __stdcall get_FramePaddingY (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall put_FramePaddingY (
        /*[in]*/ long retval ) = 0;
      virtual HRESULT __stdcall get_FrameTransparency (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall put_FrameTransparency (
        /*[in]*/ long retval ) = 0;
      virtual HRESULT __stdcall get_InboxAlignment (
        /*[out,retval]*/ enum tkLabelAlignment * retval ) = 0;
      virtual HRESULT __stdcall put_InboxAlignment (
        /*[in]*/ enum tkLabelAlignment retval ) = 0;
      virtual HRESULT __stdcall get_FrameVisible (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_FrameVisible (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall Serialize (
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall Deserialize (
        /*[in]*/ BSTR newVal ) = 0;
};

enum __declspec(uuid("44e55993-60b9-4f67-9500-073a3fca2249"))
SelectMode
{
    INTERSECTION = 0,
    INCLUSION = 1
};

struct __declspec(uuid("4b341a36-cfa6-4421-9d08-fd5b06097307"))
ILabel : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ double * retval ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ double retval ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR retval ) = 0;
      virtual HRESULT __stdcall get_x (
        /*[out,retval]*/ double * retval ) = 0;
      virtual HRESULT __stdcall put_x (
        /*[in]*/ double retval ) = 0;
      virtual HRESULT __stdcall get_y (
        /*[out,retval]*/ double * retval ) = 0;
      virtual HRESULT __stdcall put_y (
        /*[in]*/ double retval ) = 0;
      virtual HRESULT __stdcall get_IsDrawn (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ long retval ) = 0;
      virtual HRESULT __stdcall get_ScreenExtents (
        /*[out,retval]*/ struct IExtents * * retval ) = 0;
};

enum __declspec(uuid("343cae84-d677-4bc6-a7f4-4c7e5096d776"))
tkClassificationType
{
    ctNaturalBreaks = 0,
    ctUniqueValues = 1,
    ctEqualIntervals = 2,
    ctEqualCount = 3,
    ctStandardDeviation = 4,
    ctEqualSumOfValues = 5
};

enum __declspec(uuid("8ed72532-e5f9-4424-aa90-bf0904086689"))
tkColorSchemeType
{
    ctSchemeRandom = 0,
    ctSchemeGraduated = 1
};

enum __declspec(uuid("db604729-d315-4af3-ad35-9277ee06d1c1"))
tkMapColor
{
    AliceBlue = -984833,
    AntiqueWhite = -332841,
    Aqua = -16711681,
    Aquamarine = -8388652,
    Azure = -983041,
    Beige = -657956,
    Bisque = -6972,
    Black = -16777216,
    BlanchedAlmond = -5171,
    Blue = -16776961,
    BlueViolet = -7722014,
    Brown = -5952982,
    BurlyWood = -2180985,
    CadetBlue = -10510688,
    Chartreuse = -8388864,
    Chocolate = -2987746,
    Coral = -32944,
    CornflowerBlue = -10185235,
    Cornsilk = -1828,
    Crimson = -2354116,
    Cyan = -16711681,
    DarkBlue = -16777077,
    DarkCyan = -16741493,
    DarkGoldenrod = -4684277,
    DarkGray = -5658199,
    DarkGreen = -16751616,
    DarkKhaki = -4343957,
    DarkMagenta = -7667573,
    DarkOliveGreen = -11179217,
    DarkOrange = -29696,
    DarkOrchid = -6737204,
    DarkRed = -7667712,
    DarkSalmon = -1468806,
    DarkSeaGreen = -7357301,
    DarkSlateBlue = -12042869,
    DarkSlateGray = -13676721,
    DarkTurquoise = -16724271,
    DarkViolet = -7077677,
    DeepPink = -60269,
    DeepSkyBlue = -16728065,
    DimGray = -9868951,
    DodgerBlue = -14774017,
    Firebrick = -5103070,
    FloralWhite = -1296,
    ForestGreen = -14513374,
    Fuchsia = -65281,
    Gainsboro = -2302756,
    GhostWhite = -460545,
    Gold = -10496,
    Goldenrod = -2448096,
    Gray = -8355712,
    Green = -16744448,
    GreenYellow = -5374161,
    Honeydew = -983056,
    HotPink = -38476,
    IndianRed = -3318692,
    Indigo = -11861886,
    Ivory = -16,
    Khaki = -989556,
    Lavender = -1644806,
    LavenderBlush = -3851,
    LawnGreen = -8586240,
    LemonChiffon = -1331,
    LightBlue = -5383962,
    LightCoral = -1015680,
    LightCyan = -2031617,
    LightGoldenrodYellow = -329006,
    LightGray = -2894893,
    LightGreen = -7278960,
    LightPink = -18751,
    LightSalmon = -24454,
    LightSeaGreen = -14634326,
    LightSkyBlue = -7876870,
    LightSlateGray = -8943463,
    LightSteelBlue = -5192482,
    LightYellow = -32,
    Lime = -16711936,
    LimeGreen = -13447886,
    Linen = -331546,
    Magenta = -65281,
    Maroon = -8388608,
    MediumAquamarine = -10039894,
    MediumBlue = -16777011,
    MediumOrchid = -4565549,
    MediumPurple = -7114533,
    MediumSeaGreen = -12799119,
    MediumSlateBlue = -8689426,
    MediumSpringGreen = -16713062,
    MediumTurquoise = -12004916,
    MediumVioletRed = -3730043,
    MidnightBlue = -15132304,
    MintCream = -655366,
    MistyRose = -6943,
    Moccasin = -6987,
    NavajoWhite = -8531,
    Navy = -16777088,
    OldLace = -133658,
    Olive = -8355840,
    OliveDrab = -9728477,
    Orange = -23296,
    OrangeRed = -47872,
    Orchid = -2461482,
    PaleGoldenrod = -1120086,
    PaleGreen = -6751336,
    PaleTurquoise = -5247250,
    PaleVioletRed = -2396013,
    PapayaWhip = -4139,
    PeachPuff = -9543,
    Peru = -3308225,
    Pink = -16181,
    Plum = -2252579,
    PowderBlue = -5185306,
    Purple = -8388480,
    Red = -65536,
    RosyBrown = -4419697,
    RoyalBlue = -12490271,
    SaddleBrown = -7650029,
    Salmon = -360334,
    SandyBrown = -744352,
    SeaGreen = -13726889,
    SeaShell = -2578,
    Sienna = -6270419,
    Silver = -4144960,
    SkyBlue = -7876885,
    SlateBlue = -9807155,
    SlateGray = -9404272,
    Snow = -1286,
    SpringGreen = -16711809,
    SteelBlue = -12156236,
    Tan = -2968436,
    Teal = -16744320,
    Thistle = -2572328,
    Tomato = -40121,
    Transparent = 16777215,
    Turquoise = -12525360,
    Violet = -1146130,
    Wheat = -663885,
    White = -1,
    WhiteSmoke = -657931,
    Yellow = -256,
    YellowGreen = -6632142
};

enum __declspec(uuid("db5bd81d-8dc0-401b-a78b-8738f53f4810"))
PredefinedColorScheme
{
    FallLeaves = 0,
    SummerMountains = 1,
    Desert = 2,
    Glaciers = 3,
    Meadow = 4,
    ValleyFires = 5,
    DeadSea = 6,
    Highway1 = 7
};

struct __declspec(uuid("d2334b3c-0779-4f5f-8771-2f857f0d601e"))
IColorScheme : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall SetColors (
        /*[in]*/ OLE_COLOR Color1,
        /*[in]*/ OLE_COLOR Color2 ) = 0;
      virtual HRESULT __stdcall SetColors2 (
        /*[in]*/ enum tkMapColor Color1,
        /*[in]*/ enum tkMapColor Color2 ) = 0;
      virtual HRESULT __stdcall SetColors3 (
        /*[in]*/ short MinRed,
        /*[in]*/ short MinGreen,
        /*[in]*/ short MinBlue,
        /*[in]*/ short MaxRed,
        /*[in]*/ short MaxGreen,
        /*[in]*/ short MaxBlue ) = 0;
      virtual HRESULT __stdcall SetColors4 (
        /*[in]*/ enum PredefinedColorScheme Scheme ) = 0;
      virtual HRESULT __stdcall AddBreak (
        /*[in]*/ double Value,
        /*[in]*/ OLE_COLOR Color ) = 0;
      virtual HRESULT __stdcall Remove (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall Clear ( ) = 0;
      virtual HRESULT __stdcall get_NumBreaks (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall get_RandomColor (
        /*[in]*/ double Value,
        /*[out,retval]*/ OLE_COLOR * retval ) = 0;
      virtual HRESULT __stdcall get_GraduatedColor (
        /*[in]*/ double Value,
        /*[out,retval]*/ OLE_COLOR * retval ) = 0;
      virtual HRESULT __stdcall get_BreakColor (
        /*[in]*/ long Index,
        /*[out,retval]*/ OLE_COLOR * retval ) = 0;
      virtual HRESULT __stdcall put_BreakColor (
        /*[in]*/ long Index,
        /*[in]*/ OLE_COLOR retval ) = 0;
      virtual HRESULT __stdcall get_BreakValue (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * retval ) = 0;
      virtual HRESULT __stdcall get_LastErrorCode (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ErrorMsg (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_GlobalCallback (
        /*[out,retval]*/ struct ICallback * * pVal ) = 0;
      virtual HRESULT __stdcall put_GlobalCallback (
        /*[in]*/ struct ICallback * pVal ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Key (
        /*[in]*/ BSTR pVal ) = 0;
};

enum __declspec(uuid("15e8581c-003e-4f7a-80e4-89be29bd91a8"))
tkLabelElements
{
    leFont = 0,
    leFontOutline = 1,
    leShadow = 2,
    leHalo = 3,
    leFrameBackground = 4,
    leFrameOutline = 5,
    leDefault = 6
};

enum __declspec(uuid("7a778f18-9cd1-45ae-abfc-92b8e6c1579a"))
tkLabelPositioning
{
    lpCenter = 0,
    lpCentroid = 1,
    lpInteriorPoint = 2,
    lpFirstSegment = 3,
    lpLastSegment = 4,
    lpMiddleSegment = 5,
    lpLongestSegement = 6,
    lpNone = 7
};

enum __declspec(uuid("e214cc65-00dc-4511-8e9e-c262433c1aad"))
tkSavingMode
{
    modeNone = 0,
    modeStandard = 1,
    modeXML = 2,
    modeDBF = 3,
    modeXMLOverwrite = 4
};

enum __declspec(uuid("cd43915d-38bb-410e-a24f-3c1967617151"))
tkTextRenderingHint
{
    SystemDefault = 0,
    SingleBitPerPixelGridFit = 1,
    SingleBitPerPixel = 2,
    AntiAliasGridFit = 3,
    HintAntiAlias = 4,
    ClearTypeGridFit = 5
};

struct __declspec(uuid("a73af37e-3a6a-4532-b48f-fa53309fa117"))
ILabels : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LastErrorCode (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ErrorMsg (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_GlobalCallback (
        /*[out,retval]*/ struct ICallback * * pVal ) = 0;
      virtual HRESULT __stdcall put_GlobalCallback (
        /*[in]*/ struct ICallback * pVal ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Key (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_VerticalPosition (
        /*[out,retval]*/ enum tkVerticalPosition * retval ) = 0;
      virtual HRESULT __stdcall put_VerticalPosition (
        /*[in]*/ enum tkVerticalPosition retval ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ILabelCategory * * pVal ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ long Index,
        /*[in]*/ struct ILabelCategory * pVal ) = 0;
      virtual HRESULT __stdcall AddLabel (
        /*[in]*/ BSTR Text,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double Rotation,
        /*[in]*/ long Category ) = 0;
      virtual HRESULT __stdcall InsertLabel (
        /*[in]*/ long Index,
        /*[in]*/ BSTR Text,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double Rotation,
        /*[in]*/ long Category,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall RemoveLabel (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall AddPart (
        /*[in]*/ long Index,
        /*[in]*/ BSTR Text,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double Rotation,
        /*[in]*/ long Category ) = 0;
      virtual HRESULT __stdcall InsertPart (
        /*[in]*/ long Index,
        /*[in]*/ long Part,
        /*[in]*/ BSTR Text,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double Rotation,
        /*[in]*/ long Category,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall RemovePart (
        /*[in]*/ long Index,
        /*[in]*/ long Part,
        /*[out,retval]*/ VARIANT_BOOL * vbretval ) = 0;
      virtual HRESULT __stdcall AddCategory (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct ILabelCategory * * retval ) = 0;
      virtual HRESULT __stdcall InsertCategory (
        /*[in]*/ long Index,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct ILabelCategory * * retval ) = 0;
      virtual HRESULT __stdcall RemoveCategory (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * vbretval ) = 0;
      virtual HRESULT __stdcall Clear ( ) = 0;
      virtual HRESULT __stdcall ClearCategories ( ) = 0;
      virtual HRESULT __stdcall Select (
        /*[in]*/ struct IExtents * BoundingBox,
        /*[in]*/ long Tolerance,
        /*[in]*/ enum SelectMode SelectMode,
        /*[in,out]*/ VARIANT * LabelIndices,
        /*[in,out]*/ VARIANT * PartIndices,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_NumParts (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_NumCategories (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Label (
        /*[in]*/ long Index,
        /*[in]*/ long Part,
        /*[out,retval]*/ struct ILabel * * pVal ) = 0;
      virtual HRESULT __stdcall get_Synchronized (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_Synchronized (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_ScaleLabels (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_ScaleLabels (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_BasicScale (
        /*[out,retval]*/ double * retval ) = 0;
      virtual HRESULT __stdcall put_BasicScale (
        /*[in]*/ double retval ) = 0;
      virtual HRESULT __stdcall get_MaxVisibleScale (
        /*[out,retval]*/ double * retval ) = 0;
      virtual HRESULT __stdcall put_MaxVisibleScale (
        /*[in]*/ double retval ) = 0;
      virtual HRESULT __stdcall get_MinVisibleScale (
        /*[out,retval]*/ double * retval ) = 0;
      virtual HRESULT __stdcall put_MinVisibleScale (
        /*[in]*/ double retval ) = 0;
      virtual HRESULT __stdcall get_DynamicVisibility (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_DynamicVisibility (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_AvoidCollisions (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_AvoidCollisions (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_CollisionBuffer (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall put_CollisionBuffer (
        /*[in]*/ long retval ) = 0;
      virtual HRESULT __stdcall get_UseWidthLimits (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_UseWidthLimits (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_RemoveDuplicates (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_RemoveDuplicates (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_UseGdiPlus (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_UseGdiPlus (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_OffsetX (
        /*[out,retval]*/ double * retval ) = 0;
      virtual HRESULT __stdcall put_OffsetX (
        /*[in]*/ double retval ) = 0;
      virtual HRESULT __stdcall get_OffsetY (
        /*[out,retval]*/ double * retval ) = 0;
      virtual HRESULT __stdcall put_OffsetY (
        /*[in]*/ double retval ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ enum tkLabelAlignment * retval ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ enum tkLabelAlignment retval ) = 0;
      virtual HRESULT __stdcall get_LineOrientation (
        /*[out,retval]*/ enum tkLineLabelOrientation * retval ) = 0;
      virtual HRESULT __stdcall put_LineOrientation (
        /*[in]*/ enum tkLineLabelOrientation retval ) = 0;
      virtual HRESULT __stdcall get_FontName (
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall put_FontName (
        /*[in]*/ BSTR retval ) = 0;
      virtual HRESULT __stdcall get_FontSize (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall put_FontSize (
        /*[in]*/ long retval ) = 0;
      virtual HRESULT __stdcall get_FontItalic (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_FontItalic (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_FontBold (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_FontBold (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_FontUnderline (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_FontUnderline (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_FontStrikeOut (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_FontStrikeOut (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_FontColor (
        /*[out,retval]*/ OLE_COLOR * retval ) = 0;
      virtual HRESULT __stdcall put_FontColor (
        /*[in]*/ OLE_COLOR retval ) = 0;
      virtual HRESULT __stdcall get_FontColor2 (
        /*[out,retval]*/ OLE_COLOR * retval ) = 0;
      virtual HRESULT __stdcall put_FontColor2 (
        /*[in]*/ OLE_COLOR retval ) = 0;
      virtual HRESULT __stdcall get_FontGradientMode (
        /*[out,retval]*/ enum tkLinearGradientMode * retval ) = 0;
      virtual HRESULT __stdcall put_FontGradientMode (
        /*[in]*/ enum tkLinearGradientMode retval ) = 0;
      virtual HRESULT __stdcall get_FontTransparency (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall put_FontTransparency (
        /*[in]*/ long retval ) = 0;
      virtual HRESULT __stdcall get_FontOutlineVisible (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_FontOutlineVisible (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_ShadowVisible (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_ShadowVisible (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_HaloVisible (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_HaloVisible (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_FontOutlineColor (
        /*[out,retval]*/ OLE_COLOR * retval ) = 0;
      virtual HRESULT __stdcall put_FontOutlineColor (
        /*[in]*/ OLE_COLOR retval ) = 0;
      virtual HRESULT __stdcall get_ShadowColor (
        /*[out,retval]*/ OLE_COLOR * retval ) = 0;
      virtual HRESULT __stdcall put_ShadowColor (
        /*[in]*/ OLE_COLOR retval ) = 0;
      virtual HRESULT __stdcall get_HaloColor (
        /*[out,retval]*/ OLE_COLOR * retval ) = 0;
      virtual HRESULT __stdcall put_HaloColor (
        /*[in]*/ OLE_COLOR retval ) = 0;
      virtual HRESULT __stdcall get_FontOutlineWidth (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall put_FontOutlineWidth (
        /*[in]*/ long retval ) = 0;
      virtual HRESULT __stdcall get_ShadowOffsetX (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall put_ShadowOffsetX (
        /*[in]*/ long retval ) = 0;
      virtual HRESULT __stdcall get_ShadowOffsetY (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall put_ShadowOffsetY (
        /*[in]*/ long retval ) = 0;
      virtual HRESULT __stdcall get_HaloSize (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall put_HaloSize (
        /*[in]*/ long retval ) = 0;
      virtual HRESULT __stdcall get_FrameType (
        /*[out,retval]*/ enum tkLabelFrameType * retval ) = 0;
      virtual HRESULT __stdcall put_FrameType (
        /*[in]*/ enum tkLabelFrameType retval ) = 0;
      virtual HRESULT __stdcall get_FrameOutlineColor (
        /*[out,retval]*/ OLE_COLOR * retval ) = 0;
      virtual HRESULT __stdcall put_FrameOutlineColor (
        /*[in]*/ OLE_COLOR retval ) = 0;
      virtual HRESULT __stdcall get_FrameBackColor (
        /*[out,retval]*/ OLE_COLOR * retval ) = 0;
      virtual HRESULT __stdcall put_FrameBackColor (
        /*[in]*/ OLE_COLOR retval ) = 0;
      virtual HRESULT __stdcall get_FrameBackColor2 (
        /*[out,retval]*/ OLE_COLOR * retval ) = 0;
      virtual HRESULT __stdcall put_FrameBackColor2 (
        /*[in]*/ OLE_COLOR retval ) = 0;
      virtual HRESULT __stdcall get_FrameGradientMode (
        /*[out,retval]*/ enum tkLinearGradientMode * retval ) = 0;
      virtual HRESULT __stdcall put_FrameGradientMode (
        /*[in]*/ enum tkLinearGradientMode retval ) = 0;
      virtual HRESULT __stdcall get_FrameOutlineStyle (
        /*[out,retval]*/ enum tkDashStyle * retval ) = 0;
      virtual HRESULT __stdcall put_FrameOutlineStyle (
        /*[in]*/ enum tkDashStyle retval ) = 0;
      virtual HRESULT __stdcall get_FrameOutlineWidth (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall put_FrameOutlineWidth (
        /*[in]*/ long retval ) = 0;
      virtual HRESULT __stdcall get_FramePaddingX (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall put_FramePaddingX (
        /*[in]*/ long retval ) = 0;
      virtual HRESULT __stdcall get_FramePaddingY (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall put_FramePaddingY (
        /*[in]*/ long retval ) = 0;
      virtual HRESULT __stdcall get_FrameTransparency (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall put_FrameTransparency (
        /*[in]*/ long retval ) = 0;
      virtual HRESULT __stdcall get_InboxAlignment (
        /*[out,retval]*/ enum tkLabelAlignment * retval ) = 0;
      virtual HRESULT __stdcall put_InboxAlignment (
        /*[in]*/ enum tkLabelAlignment retval ) = 0;
      virtual HRESULT __stdcall get_ClassificationField (
        /*[out,retval]*/ long * FieldIndex ) = 0;
      virtual HRESULT __stdcall put_ClassificationField (
        /*[in]*/ long FieldIndex ) = 0;
      virtual HRESULT __stdcall GenerateCategories (
        /*[in]*/ long FieldIndex,
        /*[in]*/ enum tkClassificationType ClassificationType,
        /*[in]*/ long numClasses,
        /*[out,retval]*/ VARIANT_BOOL * vbretval ) = 0;
      virtual HRESULT __stdcall ApplyCategories ( ) = 0;
      virtual HRESULT __stdcall get_Options (
        /*[out,retval]*/ struct ILabelCategory * * retval ) = 0;
      virtual HRESULT __stdcall put_Options (
        /*[in]*/ struct ILabelCategory * retval ) = 0;
      virtual HRESULT __stdcall ApplyColorScheme (
        /*[in]*/ enum tkColorSchemeType Type,
        /*[in]*/ struct IColorScheme * ColorScheme ) = 0;
      virtual HRESULT __stdcall ApplyColorScheme2 (
        /*[in]*/ enum tkColorSchemeType Type,
        /*[in]*/ struct IColorScheme * ColorScheme,
        /*[in]*/ enum tkLabelElements Element ) = 0;
      virtual HRESULT __stdcall ApplyColorScheme3 (
        /*[in]*/ enum tkColorSchemeType Type,
        /*[in]*/ struct IColorScheme * ColorScheme,
        /*[in]*/ enum tkLabelElements Element,
        /*[in]*/ long CategoryStartIndex,
        /*[in]*/ long CategoryEndIndex ) = 0;
      virtual HRESULT __stdcall get_FrameVisible (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_FrameVisible (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_VisibilityExpression (
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall put_VisibilityExpression (
        /*[in]*/ BSTR retval ) = 0;
      virtual HRESULT __stdcall get_MinDrawingSize (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall put_MinDrawingSize (
        /*[in]*/ long retval ) = 0;
      virtual HRESULT __stdcall MoveCategoryUp (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall MoveCategoryDown (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_AutoOffset (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_AutoOffset (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall Serialize (
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall Deserialize (
        /*[in]*/ BSTR newVal ) = 0;
      virtual HRESULT __stdcall get_Expression (
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall put_Expression (
        /*[in]*/ BSTR retval ) = 0;
      virtual HRESULT __stdcall SaveToXML (
        /*[in]*/ BSTR Filename,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall LoadFromXML (
        /*[in]*/ BSTR Filename,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall SaveToDbf (
        /*[in]*/ VARIANT_BOOL saveText,
        /*[in]*/ VARIANT_BOOL saveCategory,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall SaveToDbf2 (
        /*[in]*/ BSTR xField,
        /*[in]*/ BSTR yField,
        /*[in]*/ BSTR angleField,
        /*[in]*/ BSTR textField,
        /*[in]*/ BSTR categoryField,
        /*[in]*/ VARIANT_BOOL saveText,
        /*[in]*/ VARIANT_BOOL saveCategory,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall LoadFromDbf (
        /*[in]*/ VARIANT_BOOL loadText,
        /*[in]*/ VARIANT_BOOL loadCategory,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall LoadFromDbf2 (
        /*[in]*/ BSTR xField,
        /*[in]*/ BSTR yField,
        /*[in]*/ BSTR angleField,
        /*[in]*/ BSTR textField,
        /*[in]*/ BSTR categoryField,
        /*[in]*/ VARIANT_BOOL loadText,
        /*[in]*/ VARIANT_BOOL loadCategory,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall Generate (
        /*[in]*/ BSTR Expression,
        /*[in]*/ enum tkLabelPositioning Method,
        /*[in]*/ VARIANT_BOOL LargestPartOnly,
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_SavingMode (
        /*[out,retval]*/ enum tkSavingMode * retval ) = 0;
      virtual HRESULT __stdcall put_SavingMode (
        /*[in]*/ enum tkSavingMode retval ) = 0;
      virtual HRESULT __stdcall get_Positioning (
        /*[out,retval]*/ enum tkLabelPositioning * pVal ) = 0;
      virtual HRESULT __stdcall put_Positioning (
        /*[in]*/ enum tkLabelPositioning pVal ) = 0;
      virtual HRESULT __stdcall get_TextRenderingHint (
        /*[out,retval]*/ enum tkTextRenderingHint * pVal ) = 0;
      virtual HRESULT __stdcall put_TextRenderingHint (
        /*[in]*/ enum tkTextRenderingHint pVal ) = 0;
};

struct __declspec(uuid("74f07889-1380-43ee-837a-bbb268311005"))
IPoint : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_x (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_x (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_y (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_y (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Z (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LastErrorCode (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ErrorMsg (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_GlobalCallback (
        /*[out,retval]*/ struct ICallback * * pVal ) = 0;
      virtual HRESULT __stdcall put_GlobalCallback (
        /*[in]*/ struct ICallback * pVal ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Key (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_M (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_M (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall Clone (
        /*[out,retval]*/ struct IPoint * * retval ) = 0;
};

enum __declspec(uuid("cdf57781-4fe1-46ed-ac51-59cd3c89b4c8"))
ShpfileType
{
    SHP_NULLSHAPE = 0,
    SHP_POINT = 1,
    SHP_POLYLINE = 3,
    SHP_POLYGON = 5,
    SHP_MULTIPOINT = 8,
    SHP_POINTZ = 11,
    SHP_POLYLINEZ = 13,
    SHP_POLYGONZ = 15,
    SHP_MULTIPOINTZ = 18,
    SHP_POINTM = 21,
    SHP_POLYLINEM = 23,
    SHP_POLYGONM = 25,
    SHP_MULTIPOINTM = 28,
    SHP_MULTIPATCH = 31
};

enum __declspec(uuid("3e52c14e-3f39-4286-b630-af8988a8bdd2"))
tkSpatialRelation
{
    srContains = 0,
    srCrosses = 1,
    srDisjoint = 2,
    srEquals = 3,
    srIntersects = 4,
    srOverlaps = 5,
    srTouches = 6,
    srWithin = 7
};

enum __declspec(uuid("85c1f392-6405-4b9a-82f4-43d4d54e4264"))
tkClipOperation
{
    clDifference = 0,
    clIntersection = 1,
    clSymDifference = 2,
    clUnion = 3,
    clClip = 4
};

struct __declspec(uuid("5fa550e3-2044-4034-baaa-b4cce90a0c41"))
IShape : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_numPoints (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_NumParts (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ShapeType (
        /*[out,retval]*/ enum ShpfileType * pVal ) = 0;
      virtual HRESULT __stdcall put_ShapeType (
        /*[in]*/ enum ShpfileType pVal ) = 0;
      virtual HRESULT __stdcall get_Point (
        /*[in]*/ long PointIndex,
        /*[out,retval]*/ struct IPoint * * pVal ) = 0;
      virtual HRESULT __stdcall put_Point (
        /*[in]*/ long PointIndex,
        /*[in]*/ struct IPoint * pVal ) = 0;
      virtual HRESULT __stdcall get_Part (
        /*[in]*/ long PartIndex,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Part (
        /*[in]*/ long PartIndex,
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_LastErrorCode (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ErrorMsg (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_GlobalCallback (
        /*[out,retval]*/ struct ICallback * * pVal ) = 0;
      virtual HRESULT __stdcall put_GlobalCallback (
        /*[in]*/ struct ICallback * pVal ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Key (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall Create (
        /*[in]*/ enum ShpfileType ShpType,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall InsertPoint (
        /*[in]*/ struct IPoint * NewPoint,
        /*[in,out]*/ long * PointIndex,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall DeletePoint (
        /*[in]*/ long PointIndex,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall InsertPart (
        /*[in]*/ long PointIndex,
        /*[in,out]*/ long * PartIndex,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall DeletePart (
        /*[in]*/ long PartIndex,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_Extents (
        /*[out,retval]*/ struct IExtents * * pVal ) = 0;
      virtual HRESULT __stdcall SerializeToString (
        /*[out,retval]*/ BSTR * Serialized ) = 0;
      virtual HRESULT __stdcall CreateFromString (
        /*[in]*/ BSTR Serialized,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall PointInThisPoly (
        /*[in]*/ struct IPoint * pt,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_Centroid (
        /*[out,retval]*/ struct IPoint * * pVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Perimeter (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Area (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall Relates (
        /*[in]*/ struct IShape * Shape,
        /*[in]*/ enum tkSpatialRelation Relation,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall Distance (
        /*[in]*/ struct IShape * Shape,
        /*[out,retval]*/ double * retval ) = 0;
      virtual HRESULT __stdcall Buffer (
        /*[in]*/ double Distance,
        /*[in]*/ long nQuadSegments,
        /*[out,retval]*/ struct IShape * * retval ) = 0;
      virtual HRESULT __stdcall Clip (
        /*[in]*/ struct IShape * Shape,
        /*[in]*/ enum tkClipOperation Operation,
        /*[out,retval]*/ struct IShape * * retval ) = 0;
      virtual HRESULT __stdcall Contains (
        /*[in]*/ struct IShape * Shape,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall Crosses (
        /*[in]*/ struct IShape * Shape,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall Disjoint (
        /*[in]*/ struct IShape * Shape,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall Equals (
        /*[in]*/ struct IShape * Shape,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall Intersects (
        /*[in]*/ struct IShape * Shape,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall Overlaps (
        /*[in]*/ struct IShape * Shape,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall Touches (
        /*[in]*/ struct IShape * Shape,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall Within (
        /*[in]*/ struct IShape * Shape,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall Boundry (
        /*[out,retval]*/ struct IShape * * retval ) = 0;
      virtual HRESULT __stdcall ConvexHull (
        /*[out,retval]*/ struct IShape * * retval ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_XY (
        /*[in]*/ long PointIndex,
        /*[in,out]*/ double * x,
        /*[in,out]*/ double * y,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_PartIsClockWise (
        /*[in]*/ long PartIndex,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall ReversePointsOrder (
        /*[in]*/ long PartIndex,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall GetIntersection (
        /*[in]*/ struct IShape * Shape,
        /*[out]*/ VARIANT * Results,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_Center (
        /*[out,retval]*/ struct IPoint * * pVal ) = 0;
      virtual HRESULT __stdcall get_EndOfPart (
        /*[in]*/ long PartIndex,
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall get_PartAsShape (
        /*[in]*/ long PartIndex,
        /*[out,retval]*/ struct IShape * * retval ) = 0;
      virtual HRESULT __stdcall get_IsValidReason (
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall get_InteriorPoint (
        /*[out,retval]*/ struct IPoint * * retval ) = 0;
      virtual HRESULT __stdcall Clone (
        /*[out,retval]*/ struct IShape * * retval ) = 0;
      virtual HRESULT __stdcall Explode (
        /*[in,out]*/ VARIANT * Results,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_XY (
        /*[in]*/ long PointIndex,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall ExportToBinary (
        /*[in,out]*/ VARIANT * bytesArray,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall ImportFromBinary (
        /*[in]*/ VARIANT bytesArray,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall FixUp (
        /*[out]*/ struct IShape * * retval ) = 0;
      virtual HRESULT __stdcall AddPoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[out,retval]*/ long * PointIndex ) = 0;
};

enum __declspec(uuid("5ad363ad-e860-4789-87e8-f3100af3707d"))
FieldType
{
    STRING_FIELD = 0,
    INTEGER_FIELD = 1,
    DOUBLE_FIELD = 2
};

struct __declspec(uuid("3f3751a5-4cf8-4ac3-afc2-60de8b90fc7b"))
IField : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Precision (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Precision (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum FieldType * pVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum FieldType pVal ) = 0;
      virtual HRESULT __stdcall get_LastErrorCode (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ErrorMsg (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_GlobalCallback (
        /*[out,retval]*/ struct ICallback * * pVal ) = 0;
      virtual HRESULT __stdcall put_GlobalCallback (
        /*[in]*/ struct ICallback * pVal ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Key (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall Clone (
        /*[out,retval]*/ struct IField * * retval ) = 0;
};

enum __declspec(uuid("edd7ea9b-eabb-4efb-a621-bf2c9265f1c6"))
tkVectorDrawingMode
{
    vdmGDI = 0,
    vdmGDIMixed = 1,
    vdmGDIPlus = 2
};

enum __declspec(uuid("be7ea6b6-8667-4e87-ba91-8131314762b1"))
tkGDIPlusHatchStyle
{
    hsNone = -1,
    hsHorizontal = 0,
    hsVertical = 1,
    hsForwardDiagonal = 2,
    hsBackwardDiagonal = 3,
    hsCross = 4,
    hsDiagonalCross = 5,
    hsPercent05 = 6,
    hsPercent10 = 7,
    hsPercent20 = 8,
    hsPercent25 = 9,
    hsPercent30 = 10,
    hsPercent40 = 11,
    hsPercent50 = 12,
    hsPercent60 = 13,
    hsPercent70 = 14,
    hsPercent75 = 15,
    hsPercent80 = 16,
    hsPercent90 = 17,
    hsLightDownwardDiagonal = 18,
    hsLightUpwardDiagonal = 19,
    hsDarkDownwardDiagonal = 20,
    hsDarkUpwardDiagonal = 21,
    hsWideDownwardDiagonal = 22,
    hsWideUpwardDiagonal = 23,
    hsLightVertical = 24,
    hsLightHorizontal = 25,
    hsNarrowVertical = 26,
    hsNarrowHorizontal = 27,
    hsDarkVertical = 28,
    hsDarkHorizontal = 29,
    hsDashedDownwardDiagonal = 30,
    hsDashedUpwardDiagonal = 31,
    hsDashedHorizontal = 32,
    hsDashedVertical = 33,
    hsSmallConfetti = 34,
    hsLargeConfetti = 35,
    hsZigZag = 36,
    hsWave = 37,
    hsDiagonalBrick = 38,
    hsHorizontalBrick = 39,
    hsWeave = 40,
    hsPlaid = 41,
    hsDivot = 42,
    hsDottedGrid = 43,
    hsDottedDiamond = 44,
    hsShingle = 45,
    hsTrellis = 46,
    hsSphere = 47,
    hsSmallGrid = 48,
    hsSmallCheckerBoard = 49,
    hsLargeCheckerBoard = 50,
    hsOutlinedDiamond = 51,
    hsSolidDiamond = 52
};

enum __declspec(uuid("15ccfd69-b193-493e-ac04-8d676d8b4ecf"))
tkPointShapeType
{
    ptShapeRegular = 0,
    ptShapeCross = 1,
    ptShapeStar = 2,
    ptShapeCircle = 3,
    ptShapeArrow = 4,
    ptShapeFlag = 5
};

enum __declspec(uuid("485eebc8-5f16-48bc-bd18-dbbda0ca6e4a"))
ImageType
{
    BITMAP_FILE = 0,
    GIF_FILE = 1,
    USE_FILE_EXTENSION = 2,
    TIFF_FILE = 3,
    JPEG_FILE = 4,
    PNG_FILE = 5,
    PPM_FILE = 7,
    ECW_FILE = 8,
    JPEG2000_FILE = 9,
    SID_FILE = 10,
    PNM_FILE = 11,
    PGM_FILE = 12,
    BIL_FILE = 13,
    ADF_FILE = 14,
    GRD_FILE = 15,
    IMG_FILE = 16,
    ASC_FILE = 17,
    BT_FILE = 18,
    MAP_FILE = 19,
    LF2_FILE = 20,
    KAP_FILE = 21,
    DEM_FILE = 22
};

enum __declspec(uuid("5fdeb35e-865a-445a-a499-0bed8218a521"))
ColoringType
{
    Hillshade = 0,
    Gradient = 1,
    Random = 2
};

enum __declspec(uuid("35e7af86-3942-4f7c-8164-d11942522ac3"))
GradientModel
{
    Logorithmic = 0,
    Linear = 1,
    Exponential = 2
};

struct __declspec(uuid("1c6ecf5d-04fa-43c4-97b1-22d5ffb55fbd"))
IGridColorBreak : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_HighColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_HighColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LowColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_LowColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_HighValue (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_HighValue (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LowValue (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LowValue (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ColoringType (
        /*[out,retval]*/ enum ColoringType * pVal ) = 0;
      virtual HRESULT __stdcall put_ColoringType (
        /*[in]*/ enum ColoringType pVal ) = 0;
      virtual HRESULT __stdcall get_GradientModel (
        /*[out,retval]*/ enum GradientModel * pVal ) = 0;
      virtual HRESULT __stdcall put_GradientModel (
        /*[in]*/ enum GradientModel pVal ) = 0;
      virtual HRESULT __stdcall get_LastErrorCode (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ErrorMsg (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_GlobalCallback (
        /*[out,retval]*/ struct ICallback * * pVal ) = 0;
      virtual HRESULT __stdcall put_GlobalCallback (
        /*[in]*/ struct ICallback * pVal ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Key (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("c60625ab-ad4c-405e-8ca2-62e36e4b3f73"))
IVector : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_i (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_i (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_j (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_j (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_k (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_k (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall Normalize ( ) = 0;
      virtual HRESULT __stdcall Dot (
        /*[in]*/ struct IVector * V,
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall CrossProduct (
        /*[in]*/ struct IVector * V,
        /*[out,retval]*/ struct IVector * * Result ) = 0;
      virtual HRESULT __stdcall get_LastErrorCode (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ErrorMsg (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_GlobalCallback (
        /*[out,retval]*/ struct ICallback * * pVal ) = 0;
      virtual HRESULT __stdcall put_GlobalCallback (
        /*[in]*/ struct ICallback * pVal ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Key (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("1c43b56d-2065-4953-9138-31afe8470ff5"))
IGridColorScheme : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumBreaks (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_AmbientIntensity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AmbientIntensity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LightSourceIntensity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LightSourceIntensity (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LightSourceAzimuth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_LightSourceElevation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall SetLightSource (
        /*[in]*/ double Azimuth,
        /*[in]*/ double Elevation ) = 0;
      virtual HRESULT __stdcall InsertBreak (
        /*[in]*/ struct IGridColorBreak * BrkInfo ) = 0;
      virtual HRESULT __stdcall get_Break (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IGridColorBreak * * pVal ) = 0;
      virtual HRESULT __stdcall DeleteBreak (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall Clear ( ) = 0;
      virtual HRESULT __stdcall get_NoDataColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_NoDataColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall UsePredefined (
        /*[in]*/ double LowValue,
        /*[in]*/ double HighValue,
        /*[in]*/ enum PredefinedColorScheme Preset ) = 0;
      virtual HRESULT __stdcall GetLightSource (
        /*[out,retval]*/ struct IVector * * Result ) = 0;
      virtual HRESULT __stdcall get_LastErrorCode (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ErrorMsg (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_GlobalCallback (
        /*[out,retval]*/ struct ICallback * * pVal ) = 0;
      virtual HRESULT __stdcall put_GlobalCallback (
        /*[in]*/ struct ICallback * pVal ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Key (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall InsertAt (
        /*[in]*/ int Position,
        /*[in]*/ struct IGridColorBreak * Break ) = 0;
      virtual HRESULT __stdcall Serialize (
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall Deserialize (
        /*[in]*/ BSTR newVal ) = 0;
};

enum __declspec(uuid("3bdea45d-f8d9-4dca-a58b-9bb7f689263a"))
tkGDALResamplingMethod
{
    grmNone = 0,
    grmNearest = 1,
    grmGauss = 2,
    grmBicubic = 3,
    grmAverage = 4
};

enum __declspec(uuid("5dc0755f-eda3-40cb-ae03-1ab5d3197623"))
tkInterpolationMode
{
    imBilinear = 3,
    imBicubic = 4,
    imNone = 5,
    imHighQualityBilinear = 6,
    imHighQualityBicubic = 7
};

enum __declspec(uuid("2ea95843-840a-457d-8d9a-cffd731b89d0"))
tkImageSourceType
{
    istUninitialized = 0,
    istDiskBased = 1,
    istInMemory = 2,
    istGDALBased = 3,
    istGDIPlus = 4
};

struct __declspec(uuid("79c5f83e-fb53-4189-9ec4-4ac25440d825"))
IImage : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall Open (
        /*[in]*/ BSTR ImageFileName,
        /*[in]*/ enum ImageType fileType,
        /*[in]*/ VARIANT_BOOL InRam,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall Save (
        /*[in]*/ BSTR ImageFileName,
        /*[in]*/ VARIANT_BOOL WriteWorldFile,
        /*[in]*/ enum ImageType fileType,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall CreateNew (
        /*[in]*/ long NewWidth,
        /*[in]*/ long NewHeight,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall Close (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall Clear (
        /*[in]*/ OLE_COLOR CanvasColor,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall GetRow (
        /*[in]*/ long Row,
        /*[in,out]*/ long * Vals,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_YllCenter (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_YllCenter (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_XllCenter (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_XllCenter (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_dY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_dY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_dX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_dX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[in]*/ long Row,
        /*[in]*/ long col,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long Row,
        /*[in]*/ long col,
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_IsInRam (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_TransparencyColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_TransparencyColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_UseTransparencyColor (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseTransparencyColor (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LastErrorCode (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ErrorMsg (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_CdlgFilter (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_GlobalCallback (
        /*[out,retval]*/ struct ICallback * * pVal ) = 0;
      virtual HRESULT __stdcall put_GlobalCallback (
        /*[in]*/ struct ICallback * pVal ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Key (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FileHandle (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ImageType (
        /*[out,retval]*/ enum ImageType * pVal ) = 0;
      virtual HRESULT __stdcall get_Picture (
        /*[out,retval]*/ IPictureDisp * * pVal ) = 0;
      virtual HRESULT __stdcall putref_Picture (
        /*[in]*/ IPictureDisp * pVal ) = 0;
      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall GetImageBitsDC (
        /*[in]*/ long hdc,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall SetImageBitsDC (
        /*[in]*/ long hdc,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall SetVisibleExtents (
        /*[in]*/ double newMinX,
        /*[in]*/ double newMinY,
        /*[in]*/ double newMaxX,
        /*[in]*/ double newMaxY,
        /*[in]*/ long newPixelsInView,
        /*[in]*/ float transPercent ) = 0;
      virtual HRESULT __stdcall SetProjection (
        /*[in]*/ BSTR Proj4,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall GetProjection (
        /*[out,retval]*/ BSTR * Proj4 ) = 0;
      virtual HRESULT __stdcall get_OriginalWidth (
        /*[out,retval]*/ long * OriginalWidth ) = 0;
      virtual HRESULT __stdcall get_OriginalHeight (
        /*[out,retval]*/ long * OriginalHeight ) = 0;
      virtual HRESULT __stdcall Resource (
        /*[in]*/ BSTR newImgPath,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall _pushSchemetkRaster (
        /*[in]*/ struct IGridColorScheme * cScheme,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall GetOriginalXllCenter (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall GetOriginalYllCenter (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall GetOriginal_dX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall GetOriginal_dY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall GetOriginalHeight (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall GetOriginalWidth (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_AllowHillshade (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AllowHillshade (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SetToGrey (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SetToGrey (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UseHistogram (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseHistogram (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_HasColorTable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_PaletteInterpretation (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_BufferSize (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall put_BufferSize (
        /*[in]*/ int pVal ) = 0;
      virtual HRESULT __stdcall get_NoBands (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall get_ImageColorScheme (
        /*[out,retval]*/ enum PredefinedColorScheme * pVal ) = 0;
      virtual HRESULT __stdcall put_ImageColorScheme (
        /*[in]*/ enum PredefinedColorScheme pVal ) = 0;
      virtual HRESULT __stdcall get_DrawingMethod (
        /*[out,retval]*/ int * retval ) = 0;
      virtual HRESULT __stdcall put_DrawingMethod (
        /*[in]*/ int retval ) = 0;
      virtual HRESULT __stdcall BuildOverviews (
        /*[in]*/ enum tkGDALResamplingMethod ResamplingMethod,
        /*[in]*/ int NumOverviews,
        /*[in]*/ SAFEARRAY * OverviewList,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_ClearGDALCache (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_ClearGDALCache (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_TransparencyPercent (
        /*[out,retval]*/ double * retval ) = 0;
      virtual HRESULT __stdcall put_TransparencyPercent (
        /*[in]*/ double retval ) = 0;
      virtual HRESULT __stdcall get_TransparencyColor2 (
        /*[out,retval]*/ OLE_COLOR * retval ) = 0;
      virtual HRESULT __stdcall put_TransparencyColor2 (
        /*[in]*/ OLE_COLOR retval ) = 0;
      virtual HRESULT __stdcall get_DownsamplingMode (
        /*[out,retval]*/ enum tkInterpolationMode * retval ) = 0;
      virtual HRESULT __stdcall put_DownsamplingMode (
        /*[in]*/ enum tkInterpolationMode retval ) = 0;
      virtual HRESULT __stdcall get_UpsamplingMode (
        /*[out,retval]*/ enum tkInterpolationMode * retval ) = 0;
      virtual HRESULT __stdcall put_UpsamplingMode (
        /*[in]*/ enum tkInterpolationMode retval ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct ILabels * * pVal ) = 0;
      virtual HRESULT __stdcall put_Labels (
        /*[in]*/ struct ILabels * pVal ) = 0;
      virtual HRESULT __stdcall get_Extents (
        /*[out,retval]*/ struct IExtents * * pVal ) = 0;
      virtual HRESULT __stdcall ProjectionToImage (
        /*[in]*/ double projX,
        /*[in]*/ double projY,
        /*[out]*/ long * ImageX,
        /*[out]*/ long * ImageY ) = 0;
      virtual HRESULT __stdcall ImageToProjection (
        /*[in]*/ long ImageX,
        /*[in]*/ long ImageY,
        /*[out]*/ double * projX,
        /*[out]*/ double * projY ) = 0;
      virtual HRESULT __stdcall ProjectionToBuffer (
        /*[in]*/ double projX,
        /*[in]*/ double projY,
        /*[out]*/ long * BufferX,
        /*[out]*/ long * BufferY ) = 0;
      virtual HRESULT __stdcall BufferToProjection (
        /*[in]*/ long BufferX,
        /*[in]*/ long BufferY,
        /*[out]*/ double * projX,
        /*[out]*/ double * projY ) = 0;
      virtual HRESULT __stdcall get_CanUseGrouping (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CanUseGrouping (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_OriginalXllCenter (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OriginalXllCenter (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OriginalYllCenter (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OriginalYllCenter (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OriginalDX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OriginalDX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OriginalDY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OriginalDY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall GetUniqueColors (
        /*[in]*/ double MaxBufferSizeMB,
        /*[out]*/ VARIANT * Colors,
        /*[out]*/ VARIANT * Frequencies,
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall SetNoDataValue (
        double Value,
        VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_NumOverviews (
        /*[out,retval]*/ int * retval ) = 0;
      virtual HRESULT __stdcall LoadBuffer (
        /*[in]*/ double maxBufferSize,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_SourceType (
        /*[out,retval]*/ enum tkImageSourceType * pVal ) = 0;
      virtual HRESULT __stdcall Serialize (
        /*[in]*/ VARIANT_BOOL SerializePixels,
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall Deserialize (
        /*[in]*/ BSTR newVal ) = 0;
};

enum __declspec(uuid("d7bbad28-38ee-45d1-b4e8-bf4c292ef522"))
tkFillType
{
    ftStandard = 0,
    ftHatch = 1,
    ftGradient = 2,
    ftPicture = 3
};

enum __declspec(uuid("85e2f305-667d-4868-9b2d-a5e9ad35c6d8"))
tkGradientType
{
    gtLinear = 0,
    gtRectangular = 1,
    gtCircle = 2
};

enum __declspec(uuid("84e461df-53d1-4c36-af85-d70f2214424f"))
tkPointSymbolType
{
    ptSymbolStandard = 0,
    ptSymbolFontCharacter = 1,
    ptSymbolPicture = 2
};

enum __declspec(uuid("fb3763c2-1d27-419f-a7cf-5a7b350e00e1"))
tkGradientBounds
{
    gbWholeLayer = 0,
    gbPerShape = 1
};

enum __declspec(uuid("119b042b-9ec9-45e4-8b83-526079198279"))
tkVertexType
{
    vtSquare = 0,
    vtCircle = 1
};

enum __declspec(uuid("f4b17059-5214-477a-99ed-7d30c9722941"))
tkLineType
{
    lltSimple = 0,
    lltMarker = 1
};

enum __declspec(uuid("64fa8c3e-f0de-4674-87d5-614c14b310f9"))
tkDefaultPointSymbol
{
    dpsSquare = 0,
    dpsCircle = 1,
    dpsDiamond = 2,
    dpsTriangleUp = 3,
    dpsTriangleDown = 4,
    dpsTriangleLeft = 5,
    dpsTriangleRight = 6,
    dpsCross = 7,
    dpsXCross = 8,
    dpsStar = 9,
    dpsPentagon = 10,
    dpsArrowUp = 11,
    dpsArrowDown = 12,
    dpsArrowLeft = 13,
    dpsArrowRight = 14,
    dpsAsterisk = 15,
    dpsFlag = 16
};

struct __declspec(uuid("56a5439f-f550-434e-b6c5-0508a6461f47"))
ILineSegment : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * retval ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR retval ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ float * retval ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ float retval ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ enum tkDashStyle * retval ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ enum tkDashStyle retval ) = 0;
      virtual HRESULT __stdcall get_LineType (
        /*[out,retval]*/ enum tkLineType * retval ) = 0;
      virtual HRESULT __stdcall put_LineType (
        /*[in]*/ enum tkLineType retval ) = 0;
      virtual HRESULT __stdcall get_Marker (
        /*[out,retval]*/ enum tkDefaultPointSymbol * retval ) = 0;
      virtual HRESULT __stdcall put_Marker (
        /*[in]*/ enum tkDefaultPointSymbol retval ) = 0;
      virtual HRESULT __stdcall get_MarkerSize (
        /*[out,retval]*/ float * retval ) = 0;
      virtual HRESULT __stdcall put_MarkerSize (
        /*[in]*/ float retval ) = 0;
      virtual HRESULT __stdcall get_MarkerInterval (
        /*[out,retval]*/ float * retval ) = 0;
      virtual HRESULT __stdcall put_MarkerInterval (
        /*[in]*/ float retval ) = 0;
      virtual HRESULT __stdcall get_MarkerOrientation (
        /*[out,retval]*/ enum tkLineLabelOrientation * retval ) = 0;
      virtual HRESULT __stdcall put_MarkerOrientation (
        /*[in]*/ enum tkLineLabelOrientation retval ) = 0;
      virtual HRESULT __stdcall get_MarkerFlipFirst (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_MarkerFlipFirst (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_MarkerOffset (
        /*[out,retval]*/ float * retval ) = 0;
      virtual HRESULT __stdcall put_MarkerOffset (
        /*[in]*/ float retval ) = 0;
      virtual HRESULT __stdcall Draw (
        /*[in]*/ int * * hdc,
        /*[in]*/ float x,
        /*[in]*/ float y,
        /*[in]*/ int clipWidth,
        /*[in]*/ int clipHeight,
        /*[in]*/ OLE_COLOR BackColor,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_MarkerOutlineColor (
        /*[out,retval]*/ OLE_COLOR * retval ) = 0;
      virtual HRESULT __stdcall put_MarkerOutlineColor (
        /*[in]*/ OLE_COLOR retval ) = 0;
      virtual HRESULT __stdcall DrawVB (
        /*[in]*/ int hdc,
        /*[in]*/ float x,
        /*[in]*/ float y,
        /*[in]*/ int clipWidth,
        /*[in]*/ int clipHeight,
        /*[in]*/ OLE_COLOR BackColor,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
};

struct __declspec(uuid("54eb7dd1-cec2-4165-8dba-13115b079df1"))
ILinePattern : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall put_Key (
        /*[in]*/ BSTR retval ) = 0;
      virtual HRESULT __stdcall get_GlobalCallback (
        /*[out,retval]*/ struct ICallback * * retval ) = 0;
      virtual HRESULT __stdcall put_GlobalCallback (
        /*[in]*/ struct ICallback * retval ) = 0;
      virtual HRESULT __stdcall get_ErrorMsg (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_LastErrorCode (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Line (
        /*[in]*/ int Index,
        /*[out,retval]*/ struct ILineSegment * * retval ) = 0;
      virtual HRESULT __stdcall put_Line (
        /*[in]*/ int Index,
        /*[in]*/ struct ILineSegment * retval ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * retval ) = 0;
      virtual HRESULT __stdcall AddLine (
        /*[in]*/ OLE_COLOR Color,
        /*[in]*/ float Width,
        /*[in]*/ enum tkDashStyle style ) = 0;
      virtual HRESULT __stdcall InsertLine (
        int Index,
        /*[in]*/ OLE_COLOR Color,
        /*[in]*/ float Width,
        /*[in]*/ enum tkDashStyle style,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall AddMarker (
        /*[in]*/ enum tkDefaultPointSymbol Marker,
        /*[out,retval]*/ struct ILineSegment * * retval ) = 0;
      virtual HRESULT __stdcall InsertMarker (
        /*[in]*/ int Index,
        /*[in]*/ enum tkDefaultPointSymbol Marker,
        /*[out,retval]*/ struct ILineSegment * * retval ) = 0;
      virtual HRESULT __stdcall RemoveItem (
        /*[in]*/ int Index,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall Clear ( ) = 0;
      virtual HRESULT __stdcall Draw (
        /*[in]*/ int * * hdc,
        /*[in]*/ float x,
        /*[in]*/ float y,
        /*[in]*/ int clipWidth,
        /*[in]*/ int clipHeight,
        /*[in]*/ OLE_COLOR BackColor,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ unsigned char * retval ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ unsigned char retval ) = 0;
      virtual HRESULT __stdcall Serialize (
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall Deserialize (
        /*[in]*/ BSTR newVal ) = 0;
      virtual HRESULT __stdcall DrawVB (
        /*[in]*/ int hdc,
        /*[in]*/ float x,
        /*[in]*/ float y,
        /*[in]*/ int clipWidth,
        /*[in]*/ int clipHeight,
        /*[in]*/ OLE_COLOR BackColor,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
};

struct __declspec(uuid("7399b752-61d9-4a23-973f-1033431dd009"))
IShapeDrawingOptions : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FillVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FillVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LineVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LineVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LineTransparency (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_LineTransparency (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_FillColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_FillColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_LineColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_LineColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_DrawingMode (
        /*[out,retval]*/ enum tkVectorDrawingMode * pVal ) = 0;
      virtual HRESULT __stdcall put_DrawingMode (
        /*[in]*/ enum tkVectorDrawingMode pVal ) = 0;
      virtual HRESULT __stdcall get_FillHatchStyle (
        /*[out,retval]*/ enum tkGDIPlusHatchStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_FillHatchStyle (
        /*[in]*/ enum tkGDIPlusHatchStyle pVal ) = 0;
      virtual HRESULT __stdcall get_LineStipple (
        /*[out,retval]*/ enum tkDashStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_LineStipple (
        /*[in]*/ enum tkDashStyle pVal ) = 0;
      virtual HRESULT __stdcall get_PointShape (
        /*[out,retval]*/ enum tkPointShapeType * pVal ) = 0;
      virtual HRESULT __stdcall put_PointShape (
        /*[in]*/ enum tkPointShapeType pVal ) = 0;
      virtual HRESULT __stdcall get_FillTransparency (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_FillTransparency (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_PointSize (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_PointSize (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_FillBgTransparent (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FillBgTransparent (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FillBgColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_FillBgColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Picture (
        /*[out,retval]*/ struct IImage * * pVal ) = 0;
      virtual HRESULT __stdcall put_Picture (
        /*[in]*/ struct IImage * pVal ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FillType (
        /*[out,retval]*/ enum tkFillType * pVal ) = 0;
      virtual HRESULT __stdcall put_FillType (
        /*[in]*/ enum tkFillType pVal ) = 0;
      virtual HRESULT __stdcall get_FillGradientType (
        /*[out,retval]*/ enum tkGradientType * pVal ) = 0;
      virtual HRESULT __stdcall put_FillGradientType (
        /*[in]*/ enum tkGradientType pVal ) = 0;
      virtual HRESULT __stdcall get_PointType (
        /*[out,retval]*/ enum tkPointSymbolType * pVal ) = 0;
      virtual HRESULT __stdcall put_PointType (
        /*[in]*/ enum tkPointSymbolType pVal ) = 0;
      virtual HRESULT __stdcall get_FillColor2 (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_FillColor2 (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_PointRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PointRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PointSidesCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PointSidesCount (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PointSidesRatio (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_PointSidesRatio (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_FillRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FillRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FillGradientBounds (
        /*[out,retval]*/ enum tkGradientBounds * pVal ) = 0;
      virtual HRESULT __stdcall put_FillGradientBounds (
        /*[in]*/ enum tkGradientBounds pVal ) = 0;
      virtual HRESULT __stdcall get_PictureScaleX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PictureScaleX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PictureScaleY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PictureScaleY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall DrawShape (
        /*[in]*/ int * * hdc,
        /*[in]*/ float x,
        /*[in]*/ float y,
        /*[in]*/ struct IShape * Shape,
        /*[in]*/ VARIANT_BOOL drawVertices,
        /*[in]*/ int clipWidth,
        /*[in]*/ int clipHeight,
        /*[in]*/ OLE_COLOR BackColor,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_PointCharacter (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_PointCharacter (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_FontName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FontName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall Clone (
        /*[out,retval]*/ struct IShapeDrawingOptions * * retval ) = 0;
      virtual HRESULT __stdcall get_LastErrorCode (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ErrorMsg (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall DrawRectangle (
        /*[in]*/ int * * hdc,
        /*[in]*/ float x,
        /*[in]*/ float y,
        /*[in]*/ int Width,
        /*[in]*/ int Height,
        /*[in]*/ VARIANT_BOOL drawVertices,
        /*[in]*/ int clipWidth,
        /*[in]*/ int clipHeight,
        /*[in]*/ OLE_COLOR BackColor,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall DrawPoint (
        /*[in]*/ int * * hdc,
        /*[in]*/ float x,
        /*[in]*/ float y,
        /*[in]*/ int clipWidth,
        /*[in]*/ int clipHeight,
        /*[in]*/ OLE_COLOR BackColor,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_VerticesVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_VerticesVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_VerticesType (
        /*[out,retval]*/ enum tkVertexType * pVal ) = 0;
      virtual HRESULT __stdcall put_VerticesType (
        /*[in]*/ enum tkVertexType pVal ) = 0;
      virtual HRESULT __stdcall get_VerticesColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_VerticesColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_VerticesSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_VerticesSize (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_VerticesFillVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_VerticesFillVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall DrawLine (
        /*[in]*/ int * * hdc,
        /*[in]*/ float x,
        /*[in]*/ float y,
        /*[in]*/ int Width,
        /*[in]*/ int Height,
        /*[in]*/ VARIANT_BOOL drawVertices,
        /*[in]*/ int clipWidth,
        /*[in]*/ int clipHeight,
        /*[in]*/ OLE_COLOR BackColor,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_LinePattern (
        /*[out,retval]*/ struct ILinePattern * * pVal ) = 0;
      virtual HRESULT __stdcall put_LinePattern (
        /*[in]*/ struct ILinePattern * pVal ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ BSTR retval ) = 0;
      virtual HRESULT __stdcall SetGradientFill (
        /*[in]*/ OLE_COLOR Color,
        /*[in]*/ short range ) = 0;
      virtual HRESULT __stdcall SetDefaultPointSymbol (
        /*[in]*/ enum tkDefaultPointSymbol symbol ) = 0;
      virtual HRESULT __stdcall get_UseLinePattern (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_UseLinePattern (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall Serialize (
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall Deserialize (
        /*[in]*/ BSTR newVal ) = 0;
      virtual HRESULT __stdcall DrawPointVB (
        /*[in]*/ int hdc,
        /*[in]*/ float x,
        /*[in]*/ float y,
        /*[in]*/ int clipWidth,
        /*[in]*/ int clipHeight,
        /*[in]*/ OLE_COLOR BackColor,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall DrawLineVB (
        /*[in]*/ int hdc,
        /*[in]*/ float x,
        /*[in]*/ float y,
        /*[in]*/ int Width,
        /*[in]*/ int Height,
        /*[in]*/ VARIANT_BOOL drawVertices,
        /*[in]*/ int clipWidth,
        /*[in]*/ int clipHeight,
        /*[in]*/ OLE_COLOR BackColor,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall DrawRectangleVB (
        /*[in]*/ int hdc,
        /*[in]*/ float x,
        /*[in]*/ float y,
        /*[in]*/ int Width,
        /*[in]*/ int Height,
        /*[in]*/ VARIANT_BOOL drawVertices,
        /*[in]*/ int clipWidth,
        /*[in]*/ int clipHeight,
        /*[in]*/ OLE_COLOR BackColor,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall DrawShapeVB (
        /*[in]*/ int hdc,
        /*[in]*/ float x,
        /*[in]*/ float y,
        /*[in]*/ struct IShape * Shape,
        /*[in]*/ VARIANT_BOOL drawVertices,
        /*[in]*/ int clipWidth,
        /*[in]*/ int clipHeight,
        /*[in]*/ OLE_COLOR BackColor,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
};

struct __declspec(uuid("688eb3ff-cf7a-490c-9bc7-be47ceb32c59"))
IShapefileCategory : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR retval ) = 0;
      virtual HRESULT __stdcall get_Expression (
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall put_Expression (
        /*[in]*/ BSTR retval ) = 0;
      virtual HRESULT __stdcall get_DrawingOptions (
        /*[out,retval]*/ struct IShapeDrawingOptions * * retval ) = 0;
      virtual HRESULT __stdcall put_DrawingOptions (
        /*[in]*/ struct IShapeDrawingOptions * retval ) = 0;
};

enum __declspec(uuid("c914c27a-a74e-4831-af78-6db9e7696111"))
tkShapeElements
{
    shElementDefault = 0,
    shElementFill = 1,
    shElementFill2 = 2,
    shElementLines = 3,
    shElementFillBackground = 4
};

enum __declspec(uuid("ebbc71f6-d747-485f-aea0-51bf87432f15"))
tkChartType
{
    chtBarChart = 0,
    chtPieChart = 1
};

struct __declspec(uuid("34613d99-ddab-48ca-ab5d-cad805e7986c"))
IChart : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PositionX (
        /*[out,retval]*/ double * retval ) = 0;
      virtual HRESULT __stdcall put_PositionX (
        /*[in]*/ double retval ) = 0;
      virtual HRESULT __stdcall get_PositionY (
        /*[out,retval]*/ double * retval ) = 0;
      virtual HRESULT __stdcall put_PositionY (
        /*[in]*/ double retval ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_IsDrawn (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_IsDrawn (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_ScreenExtents (
        /*[out,retval]*/ struct IExtents * * retval ) = 0;
};

struct __declspec(uuid("a9c1afeb-8cc6-4a36-8e41-e643c1302e6f"))
IChartField : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall put_Index (
        /*[in]*/ long retval ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ OLE_COLOR * retval ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ OLE_COLOR retval ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR retval ) = 0;
};

enum __declspec(uuid("c5c7a7bf-17d4-4953-9cbc-4068b0fc59e6"))
tkChartValuesStyle
{
    vsHorizontal = 0,
    vsVertical = 1
};

struct __declspec(uuid("d98bb982-8d47-47bc-81ca-0efa15d1b4f6"))
ICharts : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Key (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AvoidCollisions (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AvoidCollisions (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ChartType (
        /*[out,retval]*/ enum tkChartType * pVal ) = 0;
      virtual HRESULT __stdcall put_ChartType (
        /*[in]*/ enum tkChartType pVal ) = 0;
      virtual HRESULT __stdcall get_BarWidth (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_BarWidth (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_BarHeight (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_BarHeight (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PieRadius (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PieRadius (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PieRotation (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PieRotation (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_NumFields (
        /*[out,retval]*/ long * newVal ) = 0;
      virtual HRESULT __stdcall AddField2 (
        /*[in]*/ long FieldIndex,
        /*[in]*/ OLE_COLOR Color ) = 0;
      virtual HRESULT __stdcall InsertField2 (
        /*[in]*/ long Index,
        /*[in]*/ long FieldIndex,
        /*[in]*/ OLE_COLOR Color,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall RemoveField (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * vbretval ) = 0;
      virtual HRESULT __stdcall ClearFields ( ) = 0;
      virtual HRESULT __stdcall MoveField (
        /*[in]*/ long OldIndex,
        /*[in]*/ long NewIndex,
        /*[out,retval]*/ VARIANT_BOOL * vbretval ) = 0;
      virtual HRESULT __stdcall Generate (
        /*[in]*/ enum tkLabelPositioning Type,
        /*[out,retval]*/ VARIANT_BOOL * vbretval ) = 0;
      virtual HRESULT __stdcall Clear ( ) = 0;
      virtual HRESULT __stdcall DrawChart (
        /*[in]*/ int * * hdc,
        /*[in]*/ float x,
        /*[in]*/ float y,
        /*[in]*/ VARIANT_BOOL hideLabels,
        /*[in]*/ OLE_COLOR BackColor,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_Tilt (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Tilt (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Thickness (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Thickness (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PieRadius2 (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PieRadius2 (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SizeField (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SizeField (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_NormalizationField (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NormalizationField (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_UseVariableRadius (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseVariableRadius (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Use3DMode (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Use3DMode (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_LineColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_LineColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_VerticalPosition (
        /*[out,retval]*/ enum tkVerticalPosition * pVal ) = 0;
      virtual HRESULT __stdcall put_VerticalPosition (
        /*[in]*/ enum tkVerticalPosition pVal ) = 0;
      virtual HRESULT __stdcall get_Chart (
        /*[in]*/ long Chart,
        /*[out,retval]*/ struct IChart * * retval ) = 0;
      virtual HRESULT __stdcall get_Field (
        /*[in]*/ long FieldIndex,
        /*[out,retval]*/ struct IChartField * * retval ) = 0;
      virtual HRESULT __stdcall AddField (
        /*[in]*/ struct IChartField * Field,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall InsertField (
        /*[in]*/ long Index,
        /*[in]*/ struct IChartField * Field,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_LastErrorCode (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ErrorMsg (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_GlobalCallback (
        /*[out,retval]*/ struct ICallback * * pVal ) = 0;
      virtual HRESULT __stdcall put_GlobalCallback (
        /*[in]*/ struct ICallback * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall get_MaxVisibleScale (
        /*[out,retval]*/ double * retval ) = 0;
      virtual HRESULT __stdcall put_MaxVisibleScale (
        /*[in]*/ double retval ) = 0;
      virtual HRESULT __stdcall get_MinVisibleScale (
        /*[out,retval]*/ double * retval ) = 0;
      virtual HRESULT __stdcall put_MinVisibleScale (
        /*[in]*/ double retval ) = 0;
      virtual HRESULT __stdcall get_DynamicVisibility (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_DynamicVisibility (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_IconWidth (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall get_IconHeight (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR retval ) = 0;
      virtual HRESULT __stdcall get_ValuesFontName (
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall put_ValuesFontName (
        /*[in]*/ BSTR retval ) = 0;
      virtual HRESULT __stdcall get_ValuesFontSize (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall put_ValuesFontSize (
        /*[in]*/ long retval ) = 0;
      virtual HRESULT __stdcall get_ValuesFontItalic (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_ValuesFontItalic (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_ValuesFontBold (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_ValuesFontBold (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_ValuesFontColor (
        /*[out,retval]*/ OLE_COLOR * retval ) = 0;
      virtual HRESULT __stdcall put_ValuesFontColor (
        /*[in]*/ OLE_COLOR retval ) = 0;
      virtual HRESULT __stdcall get_ValuesFrameVisible (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_ValuesFrameVisible (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_ValuesFrameColor (
        /*[out,retval]*/ OLE_COLOR * retval ) = 0;
      virtual HRESULT __stdcall put_ValuesFrameColor (
        /*[in]*/ OLE_COLOR retval ) = 0;
      virtual HRESULT __stdcall get_ValuesVisible (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_ValuesVisible (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_ValuesStyle (
        /*[out,retval]*/ enum tkChartValuesStyle * retval ) = 0;
      virtual HRESULT __stdcall put_ValuesStyle (
        /*[in]*/ enum tkChartValuesStyle retval ) = 0;
      virtual HRESULT __stdcall Select (
        /*[in]*/ struct IExtents * BoundingBox,
        /*[in]*/ long Tolerance,
        /*[in]*/ enum SelectMode SelectMode,
        /*[in,out]*/ VARIANT * Indices,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_VisibilityExpression (
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall put_VisibilityExpression (
        /*[in]*/ BSTR retval ) = 0;
      virtual HRESULT __stdcall get_CollisionBuffer (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall put_CollisionBuffer (
        /*[in]*/ long retval ) = 0;
      virtual HRESULT __stdcall get_OffsetX (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall put_OffsetX (
        /*[in]*/ long retval ) = 0;
      virtual HRESULT __stdcall get_OffsetY (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall put_OffsetY (
        /*[in]*/ long retval ) = 0;
      virtual HRESULT __stdcall Serialize (
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall Deserialize (
        /*[in]*/ BSTR newVal ) = 0;
      virtual HRESULT __stdcall SaveToXML (
        /*[in]*/ BSTR Filename,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall LoadFromXML (
        /*[in]*/ BSTR Filename,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_SavingMode (
        /*[out,retval]*/ enum tkSavingMode * retval ) = 0;
      virtual HRESULT __stdcall put_SavingMode (
        /*[in]*/ enum tkSavingMode retval ) = 0;
};

enum __declspec(uuid("6dc3f142-cfcb-40d6-99d0-ee197334360c"))
tkValueType
{
    vtDouble = 0,
    vtString = 1,
    vtBoolean = 2
};

struct __declspec(uuid("4365a8a1-2e46-4223-b2dc-65764262d88b"))
ITable : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumRows (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_NumFields (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Field (
        /*[in]*/ long FieldIndex,
        /*[out,retval]*/ struct IField * * pVal ) = 0;
      virtual HRESULT __stdcall get_CellValue (
        /*[in]*/ long FieldIndex,
        /*[in]*/ long RowIndex,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_EditingTable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_LastErrorCode (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ErrorMsg (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_CdlgFilter (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_GlobalCallback (
        /*[out,retval]*/ struct ICallback * * pVal ) = 0;
      virtual HRESULT __stdcall put_GlobalCallback (
        /*[in]*/ struct ICallback * pVal ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Key (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall Open (
        /*[in]*/ BSTR dbfFilename,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall CreateNew (
        /*[in]*/ BSTR dbfFilename,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall SaveAs (
        /*[in]*/ BSTR dbfFilename,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall Close (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall EditClear (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall EditInsertField (
        /*[in]*/ struct IField * Field,
        /*[in,out]*/ long * FieldIndex,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall EditReplaceField (
        /*[in]*/ long FieldIndex,
        /*[in]*/ struct IField * NewField,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall EditDeleteField (
        /*[in]*/ long FieldIndex,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall EditInsertRow (
        /*[in,out]*/ long * RowIndex,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall EditCellValue (
        /*[in]*/ long FieldIndex,
        /*[in]*/ long RowIndex,
        /*[in]*/ VARIANT newVal,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall StartEditingTable (
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall StopEditingTable (
        /*[in]*/ VARIANT_BOOL ApplyChanges,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall EditDeleteRow (
        /*[in]*/ long RowIndex,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall Save (
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_MinValue (
        /*[in]*/ long FieldIndex,
        /*[out,retval]*/ VARIANT * retval ) = 0;
      virtual HRESULT __stdcall get_MaxValue (
        /*[in]*/ long FieldIndex,
        /*[out,retval]*/ VARIANT * retval ) = 0;
      virtual HRESULT __stdcall get_MeanValue (
        /*[in]*/ long FieldIndex,
        /*[out,retval]*/ double * retval ) = 0;
      virtual HRESULT __stdcall get_StandardDeviation (
        /*[in]*/ long FieldIndex,
        /*[out,retval]*/ double * retval ) = 0;
      virtual HRESULT __stdcall ParseExpression (
        /*[in]*/ BSTR Expression,
        /*[in,out]*/ BSTR * ErrorString,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall Query (
        /*[in]*/ BSTR Expression,
        /*[in,out]*/ VARIANT * Result,
        /*[in,out]*/ BSTR * ErrorString,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_FieldIndexByName (
        /*[in]*/ BSTR Fieldname,
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall TestExpression (
        /*[in]*/ BSTR Expression,
        /*[in]*/ enum tkValueType ReturnType,
        /*[in,out]*/ BSTR * ErrorString,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall Calculate (
        /*[in]*/ BSTR Expression,
        /*[in]*/ long RowIndex,
        /*[out]*/ VARIANT * Result,
        /*[out]*/ BSTR * ErrorString,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall EditAddField (
        /*[in]*/ BSTR Name,
        /*[in]*/ enum FieldType Type,
        /*[in]*/ int Precision,
        /*[in]*/ int Width,
        /*[out,retval]*/ long * FieldIndex ) = 0;
      virtual HRESULT __stdcall Join (
        /*[in]*/ struct ITable * table2,
        /*[in]*/ BSTR field1,
        /*[in]*/ BSTR field2,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall Join2 (
        /*[in]*/ struct ITable * table2,
        /*[in]*/ BSTR field1,
        /*[in]*/ BSTR field2,
        /*[in]*/ BSTR filenameToReopen,
        /*[in]*/ BSTR joinOptions,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall StopJoin (
        /*[in]*/ int joinIndex,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall StopAllJoins ( ) = 0;
      virtual HRESULT __stdcall get_IsJoined (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_JoinCount (
        /*[out,retval]*/ int * retval ) = 0;
      virtual HRESULT __stdcall get_JoinFilename (
        /*[in]*/ int joinIndex,
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall get_JoinFromField (
        /*[in]*/ int joinIndex,
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall get_JoinToField (
        /*[in]*/ int joinIndex,
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall get_FieldIsJoined (
        /*[in]*/ int FieldIndex,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_FieldJoinIndex (
        /*[in]*/ int FieldIndex,
        /*[out,retval]*/ int * retval ) = 0;
      virtual HRESULT __stdcall Serialize (
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall Deserialize (
        /*[in]*/ BSTR newVal ) = 0;
      virtual HRESULT __stdcall TryJoin (
        /*[in]*/ struct ITable * table2,
        /*[in]*/ BSTR fieldTo,
        /*[in]*/ BSTR fieldFrom,
        /*[out]*/ int * rowCount,
        /*[out]*/ int * joinRowCount,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall Join3 (
        /*[in]*/ struct ITable * table2,
        /*[in]*/ BSTR field1,
        /*[in]*/ BSTR field2,
        /*[in]*/ BSTR filenameToReopen,
        /*[in]*/ BSTR joinOptions,
        /*[in]*/ SAFEARRAY * fieldList,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
};

enum __declspec(uuid("0536e234-cbd1-4975-9b2b-2ec1cd37f84a"))
tkShapefileSourceType
{
    sstUninitialized = 0,
    sstDiskBased = 1,
    sstInMemory = 2
};

enum __declspec(uuid("1c045cde-4913-47db-9001-81af2eb35910"))
tkGeometryEngine
{
    engineGeos = 0,
    engineClipper = 1
};

enum __declspec(uuid("9e717d9c-aef5-4124-8339-af9b46d5370a"))
tkSelectionAppearance
{
    saSelectionColor = 0,
    saDrawingOptions = 1
};

enum __declspec(uuid("ef5afcda-91d5-4b81-a13c-0d3eb24e4e97"))
tkCollisionMode
{
    AllowCollisions = 0,
    LocalList = 1,
    GlobalList = 2
};

struct __declspec(uuid("52a29829-bb46-4d76-8082-55551e538bda"))
IStopExecution : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall StopFunction (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
};

enum __declspec(uuid("76bcef79-8841-440c-ba0b-b8c8b236935e"))
tkCoordinateSystem
{
    csAbidjan_1987 = 4143,
    csAccra = 4168,
    csAdindan = 4201,
    csAfgooye = 4205,
    csAgadez = 4206,
    csAGD66 = 4202,
    csAGD84 = 4203,
    csAin_el_Abd = 4204,
    csAlbanian_1987 = 4191,
    csAmerican_Samoa_1962 = 4169,
    csAmersfoort = 4289,
    csAmmassalik_1958 = 4196,
    csAnguilla_1957 = 4600,
    csAntigua_1943 = 4601,
    csAratu = 4208,
    csArc_1950 = 4209,
    csArc_1960 = 4210,
    csAscension_Island_1958 = 4712,
    csATF_Paris = 4901,
    csATS77 = 4122,
    csAustralian_Antarctic = 4176,
    csAyabelle_Lighthouse = 4713,
    csAzores_Central_1948 = 4183,
    csAzores_Central_1995 = 4665,
    csAzores_Occidental_1939 = 4182,
    csAzores_Oriental_1940 = 4184,
    csAzores_Oriental_1995 = 4664,
    csBarbados_1938 = 4212,
    csBatavia = 4211,
    csBatavia_Jakarta = 4813,
    csBDA2000 = 4762,
    csBeduaram = 4213,
    csBeijing_1954 = 4214,
    csBelge_1950 = 4215,
    csBelge_1950_Brussels = 4809,
    csBelge_1972 = 4313,
    csBellevue = 4714,
    csBermuda_1957 = 4216,
    csBern_1898_Bern = 4801,
    csBern_1938 = 4306,
    csBissau = 4165,
    csBogota_1975 = 4218,
    csBogota_1975_Bogota = 4802,
    csBukit_Rimpah = 4219,
    csCadastre_1997 = 4475,
    csCamacupa = 4220,
    csCamp_Area_Astro = 4715,
    csCampo_Inchauspe = 4221,
    csCape = 4222,
    csCape_Canaveral = 4717,
    csCarthage = 4223,
    csCarthage_Paris = 4816,
    csCH1903 = 4149,
    csCH1903_plus = 4150,
    csChatham_Islands_1971 = 4672,
    csChatham_Islands_1979 = 4673,
    csChina_Geodetic_Coordinate_System_2000 = 4490,
    csChos_Malal_1914 = 4160,
    csCHTRF95 = 4151,
    csChua = 4224,
    csCocos_Islands_1965 = 4708,
    csCombani_1950 = 4632,
    csConakry_1905 = 4315,
    csCorrego_Alegre = 4225,
    csCSG67 = 4623,
    csDabola_1981 = 4155,
    csDatum_73 = 4274,
    csDealul_Piscului_1930 = 4316,
    csDeception_Island = 4736,
    csDeir_ez_Zor = 4227,
    csDGN95 = 4755,
    csDHDN = 4314,
    csDiego_Garcia_1969 = 4724,
    csDominica_1945 = 4602,
    csDouala_1948 = 4192,
    csDRUKREF_03 = 5264,
    csEaster_Island_1967 = 4719,
    csED50 = 4230,
    csED50_ED77 = 4154,
    csED79 = 4668,
    csED87 = 4231,
    csEgypt_1907 = 4229,
    csEgypt_1930 = 4199,
    csEgypt_Gulf_of_Suez_S_650_TL = 4706,
    csELD79 = 4159,
    csEST92 = 4133,
    csEST97 = 4180,
    csETRS89 = 4258,
    csFahud = 4232,
    csFatu_Iva_72 = 4688,
    csFD54 = 4741,
    csFD58 = 4132,
    csFiji_1956 = 4721,
    csFiji_1986 = 4720,
    csfk89 = 4753,
    csFort_Marigot = 4621,
    csGan_1970 = 4684,
    csGaroua = 4197,
    csGDA94 = 4283,
    csGDBD2009 = 5246,
    csGDM2000 = 4742,
    csGGRS87 = 4121,
    csGR96 = 4747,
    csGrand_Cayman_1959 = 4723,
    csGrand_Comoros = 4646,
    csGreek = 4120,
    csGreek_Athens = 4815,
    csGrenada_1953 = 4603,
    csGuadeloupe_1948 = 4622,
    csGuam_1963 = 4675,
    csGulshan_303 = 4682,
    csHanoi_1972 = 4147,
    csHartebeesthoek94 = 4148,
    csHD1909 = 3819,
    csHD72 = 4237,
    csHelle_1954 = 4660,
    csHerat_North = 4255,
    csHito_XVIII_1963 = 4254,
    csHjorsey_1955 = 4658,
    csHong_Kong_1963 = 4738,
    csHong_Kong_1963_67 = 4739,
    csHong_Kong_1980 = 4611,
    csHTRS96 = 4761,
    csHu_Tzu_Shan_1950 = 4236,
    csID74 = 4238,
    csIGC_1962_6th_Parallel_South = 4697,
    csIGCB_1955 = 4701,
    csIGM95 = 4670,
    csIGN_1962_Kerguelen = 4698,
    csIGN_Astro_1960 = 4700,
    csIGN53_Mare = 4641,
    csIGN56_Lifou = 4633,
    csIGN63_Hiva_Oa = 4689,
    csIGN72_Grande_Terre = 4662,
    csIGN72_Nuku_Hiva = 4630,
    csIGRS = 3889,
    csIKBD_92 = 4667,
    csIndian_1954 = 4239,
    csIndian_1960 = 4131,
    csIndian_1975 = 4240,
    csIRENET95 = 4173,
    csISN93 = 4659,
    csIsrael = 4141,
    csIwo_Jima_1945 = 4709,
    csJAD2001 = 4758,
    csJAD69 = 4242,
    csJamaica_1875 = 4241,
    csJGD2000 = 4612,
    csJohnston_Island_1961 = 4725,
    csJouik_1961 = 4679,
    csKalianpur_1880 = 4243,
    csKalianpur_1937 = 4144,
    csKalianpur_1962 = 4145,
    csKalianpur_1975 = 4146,
    csKandawala = 4244,
    csKarbala_1979 = 4743,
    csKasai_1953 = 4696,
    csKatanga_1955 = 4695,
    csKertau_RSO = 4751,
    csKertau_1968 = 4245,
    csKKJ = 4123,
    csKOC = 4246,
    csKorea_2000 = 4737,
    csKorean_1985 = 4162,
    csKorean_1995 = 4166,
    csKousseri = 4198,
    csKUDAMS = 4319,
    csKusaie_1951 = 4735,
    csLa_Canoa = 4247,
    csLake = 4249,
    csLao_1993 = 4677,
    csLao_1997 = 4678,
    csLe_Pouce_1934 = 4699,
    csLeigon = 4250,
    csLGD2006 = 4754,
    csLiberia_1964 = 4251,
    csLisbon = 4207,
    csLisbon_Lisbon = 4803,
    csLisbon_1890 = 4666,
    csLisbon_1890_Lisbon = 4904,
    csLittle_Cayman_1961 = 4726,
    csLKS92 = 4661,
    csLKS94 = 4669,
    csLocodjo_1965 = 4142,
    csLoma_Quintana = 4288,
    csLome = 4252,
    csLuxembourg_1930 = 4181,
    csLuzon_1911 = 4253,
    csMadrid_1870_Madrid = 4903,
    csMadzansua = 4128,
    csMAGNA_SIRGAS = 4686,
    csMahe_1971 = 4256,
    csMakassar = 4257,
    csMakassar_Jakarta = 4804,
    csMalongo_1987 = 4259,
    csManoca_1962 = 4193,
    csMarcus_Island_1952 = 4711,
    csMarshall_Islands_1960 = 4732,
    csMartinique_1938 = 4625,
    csMassawa = 4262,
    csMaupiti_83 = 4692,
    csMauritania_1999 = 4702,
    csMerchich = 4261,
    csMexican_Datum_of_1993 = 4483,
    csMGI = 4312,
    csMGI_Ferro = 4805,
    csMGI_1901 = 3906,
    csMhast_offshore = 4705,
    csMhast_onshore = 4704,
    csMhast_1951 = 4703,
    csMidway_1961 = 4727,
    csMinna = 4263,
    csMOLDREF99 = 4023,
    csMonte_Mario = 4265,
    csMonte_Mario_Rome = 4806,
    csMontserrat_1958 = 4604,
    csMoorea_87 = 4691,
    csMOP78 = 4639,
    csMount_Dillon = 4157,
    csMoznet = 4130,
    csMporaloko = 4266,
    csNAD27 = 4267,
    csNAD27_Michigan = 4268,
    csNAD27_76 = 4608,
    csNAD27_CGQ77 = 4609,
    csNAD83 = 4269,
    csNAD83_CSRS = 4617,
    csNAD83_HARN = 4152,
    csNAD83_NSRS2007 = 4759,
    csNahrwan_1934 = 4744,
    csNahrwan_1967 = 4270,
    csNakhl_e_Ghanem = 4693,
    csNaparima_1955 = 4158,
    csNaparima_1972 = 4271,
    csNEA74_Noumea = 4644,
    csNew_Beijing = 4555,
    csNGN = 4318,
    csNGO_1948 = 4273,
    csNGO_1948_Oslo = 4817,
    csNord_Sahara_1959 = 4307,
    csNouakchott_1965 = 4680,
    csNSWC_9Z_2 = 4276,
    csNTF = 4275,
    csNTF_Paris = 4807,
    csNZGD2000 = 4167,
    csNZGD49 = 4272,
    csObservatario = 4129,
    csOld_Hawaiian = 4135,
    csOS_SN80 = 4279,
    csOSGB_1936 = 4277,
    csOSGB70 = 4278,
    csOSNI_1952 = 4188,
    csPadang = 4280,
    csPadang_Jakarta = 4808,
    csPalestine_1923 = 4281,
    csPampa_del_Castillo = 4161,
    csPD_83 = 4746,
    csPerroud_1950 = 4637,
    csPetrels_1972 = 4636,
    csPhoenix_Islands_1966 = 4716,
    csPico_de_las_Nieves_1984 = 4728,
    csPitcairn_1967 = 4729,
    csPitcairn_2006 = 4763,
    csPoint_58 = 4620,
    csPointe_Noire = 4282,
    csPorto_Santo = 4615,
    csPorto_Santo_1995 = 4663,
    csPOSGAR_94 = 4694,
    csPOSGAR_98 = 4190,
    csPrincipe = 4824,
    csPRS92 = 4683,
    csPSAD56 = 4248,
    csPSD93 = 4134,
    csPTRA08 = 5013,
    csPuerto_Rico = 4139,
    csPulkovo_1942 = 4284,
    csPulkovo_1942_58 = 4179,
    csPulkovo_1942_83 = 4178,
    csPulkovo_1995 = 4200,
    csPZ_90 = 4740,
    csQatar_1948 = 4286,
    csQatar_1974 = 4285,
    csQND95 = 4614,
    csQornoq_1927 = 4194,
    csRassadiran = 4153,
    csRD_83 = 4745,
    csREGCAN95 = 4081,
    csREGVEN = 4189,
    csReunion_1947 = 4626,
    csReykjavik_1900 = 4657,
    csRGF93 = 4171,
    csRGFG95 = 4624,
    csRGM04 = 4470,
    csRGNC91_93 = 4749,
    csRGPF = 4687,
    csRGR92 = 4627,
    csRGRDC_2005 = 4046,
    csRGSPM06 = 4463,
    csRRAF_1991 = 4558,
    csRSRGD2000 = 4764,
    csRT38 = 4308,
    csRT38_Stockholm = 4814,
    csRT90 = 4124,
    csSAD69 = 4618,
    csSaint_Pierre_et_Miquelon_1950 = 4638,
    csSanto_1965 = 4730,
    csSao_Tome = 4823,
    csSapper_Hill_1943 = 4292,
    csSchwarzeck = 4293,
    csScoresbysund_1952 = 4195,
    csSegara = 4613,
    csSegara_Jakarta = 4820,
    csSelvagem_Grande = 4616,
    csSerindung = 4295,
    csSierra_Leone_1924 = 4174,
    csSierra_Leone_1968 = 4175,
    csSIRGAS_1995 = 4170,
    csSIRGAS_2000 = 4674,
    csS_JTSK = 4156,
    csS_JTSK_Ferro = 4818,
    csS_JTSK_05 = 5228,
    csS_JTSK_05_Ferro = 5229,
    csSLD99 = 5233,
    csSlovenia_1996 = 4765,
    csSolomon_1968 = 4718,
    csSouth_Georgia_1968 = 4722,
    csSouth_Yemen = 4164,
    csSREF98 = 4075,
    csSt_George_Island = 4138,
    csSt_Helena_1971 = 4710,
    csSt_Kitts_1955 = 4605,
    csSt_Lawrence_Island = 4136,
    csSt_Lucia_1955 = 4606,
    csSt_Paul_Island = 4137,
    csSt_Vincent_1945 = 4607,
    csST71_Belep = 4643,
    csST84_Ile_des_Pins = 4642,
    csST87_Ouvea = 4750,
    csSVY21 = 4757,
    csSWEREF99 = 4619,
    csTahaa_54 = 4629,
    csTahiti_52 = 4628,
    csTahiti_79 = 4690,
    csTananarive = 4297,
    csTananarive_Paris = 4810,
    csTC_1948 = 4303,
    csTern_Island_1961 = 4707,
    csTete = 4127,
    csTimbalai_1948 = 4298,
    csTM65 = 4299,
    csTM75 = 4300,
    csTokyo = 4301,
    csTokyo_1892 = 5132,
    csTrinidad_1903 = 4302,
    csTristan_1968 = 4734,
    csTUREF = 5252,
    csTWD67 = 3821,
    csTWD97 = 3824,
    csVanua_Levu_1915 = 4748,
    csVientiane_1982 = 4676,
    csViti_Levu_1912 = 4752,
    csVN_2000 = 4756,
    csVoirol_1875 = 4304,
    csVoirol_1875_Paris = 4811,
    csVoirol_1879 = 4671,
    csVoirol_1879_Paris = 4821,
    csWake_Island_1952 = 4733,
    csWGS_66 = 4760,
    csWGS_72 = 4322,
    csWGS_72BE = 4324,
    csWGS_84 = 4326,
    csXian_1980 = 4610,
    csYacare = 4309,
    csYemen_NGN96 = 4163,
    csYoff = 4310,
    csZanderij = 4311
};

enum __declspec(uuid("6470a5c5-e726-40e3-8c7b-e5c1e11e8a48"))
tkProjectionParameter
{
    LatitudeOfOrigin = 0,
    CentralMeridian = 1,
    ScaleFactor = 2,
    FalseEasting = 3,
    FalseNorthing = 4,
    LongitudeOfOrigin = 5
};

enum __declspec(uuid("f80983aa-f448-418b-a791-5b64795e57d2"))
tkGeogCSParameter
{
    SemiMajor = 0,
    SemiMinor = 1,
    InverseFlattening = 2,
    PrimeMeridian = 3,
    AngularUnit = 4
};

enum __declspec(uuid("71c4afc7-1527-4931-b031-3309c30f3213"))
tkWgs84Projection
{
    Wgs84_World_Mercator = 3395,
    Wgs84_PDC_Mercator = 3832,
    Wgs84_Pseudo_Mercator = 3857,
    Wgs84_Mercator_41 = 3994,
    Wgs84_World_Equidistant_Cylindrical = 4087,
    Wgs84_UPS_North_EN = 5041,
    Wgs84_UPS_South_EN = 5042,
    Wgs84_UTM_grid_system_northern_hemisphere = 32600,
    Wgs84_UTM_zone_1N = 32601,
    Wgs84_UTM_zone_2N = 32602,
    Wgs84_UTM_zone_3N = 32603,
    Wgs84_UTM_zone_4N = 32604,
    Wgs84_UTM_zone_5N = 32605,
    Wgs84_UTM_zone_6N = 32606,
    Wgs84_UTM_zone_7N = 32607,
    Wgs84_UTM_zone_8N = 32608,
    Wgs84_UTM_zone_9N = 32609,
    Wgs84_UTM_zone_10N = 32610,
    Wgs84_UTM_zone_11N = 32611,
    Wgs84_UTM_zone_12N = 32612,
    Wgs84_UTM_zone_13N = 32613,
    Wgs84_UTM_zone_14N = 32614,
    Wgs84_UTM_zone_15N = 32615,
    Wgs84_UTM_zone_16N = 32616,
    Wgs84_UTM_zone_17N = 32617,
    Wgs84_UTM_zone_18N = 32618,
    Wgs84_UTM_zone_19N = 32619,
    Wgs84_UTM_zone_20N = 32620,
    Wgs84_UTM_zone_21N = 32621,
    Wgs84_UTM_zone_22N = 32622,
    Wgs84_UTM_zone_23N = 32623,
    Wgs84_UTM_zone_24N = 32624,
    Wgs84_UTM_zone_25N = 32625,
    Wgs84_UTM_zone_26N = 32626,
    Wgs84_UTM_zone_27N = 32627,
    Wgs84_UTM_zone_28N = 32628,
    Wgs84_UTM_zone_29N = 32629,
    Wgs84_UTM_zone_30N = 32630,
    Wgs84_UTM_zone_31N = 32631,
    Wgs84_UTM_zone_32N = 32632,
    Wgs84_UTM_zone_33N = 32633,
    Wgs84_UTM_zone_34N = 32634,
    Wgs84_UTM_zone_35N = 32635,
    Wgs84_UTM_zone_36N = 32636,
    Wgs84_UTM_zone_37N = 32637,
    Wgs84_UTM_zone_38N = 32638,
    Wgs84_UTM_zone_39N = 32639,
    Wgs84_UTM_zone_40N = 32640,
    Wgs84_UTM_zone_41N = 32641,
    Wgs84_UTM_zone_42N = 32642,
    Wgs84_UTM_zone_43N = 32643,
    Wgs84_UTM_zone_44N = 32644,
    Wgs84_UTM_zone_45N = 32645,
    Wgs84_UTM_zone_46N = 32646,
    Wgs84_UTM_zone_47N = 32647,
    Wgs84_UTM_zone_48N = 32648,
    Wgs84_UTM_zone_49N = 32649,
    Wgs84_UTM_zone_50N = 32650,
    Wgs84_UTM_zone_51N = 32651,
    Wgs84_UTM_zone_52N = 32652,
    Wgs84_UTM_zone_53N = 32653,
    Wgs84_UTM_zone_54N = 32654,
    Wgs84_UTM_zone_55N = 32655,
    Wgs84_UTM_zone_56N = 32656,
    Wgs84_UTM_zone_57N = 32657,
    Wgs84_UTM_zone_58N = 32658,
    Wgs84_UTM_zone_59N = 32659,
    Wgs84_UTM_zone_60N = 32660,
    Wgs84_UPS_North_NE = 32661,
    Wgs84_BLM_14N_ftUS = 32664,
    Wgs84_BLM_15N_ftUS = 32665,
    Wgs84_BLM_16N_ftUS = 32666,
    Wgs84_BLM_17N_ftUS = 32667,
    Wgs84_UTM_grid_system_southern_hemisphere = 32700,
    Wgs84_UTM_zone_1S = 32701,
    Wgs84_UTM_zone_2S = 32702,
    Wgs84_UTM_zone_3S = 32703,
    Wgs84_UTM_zone_4S = 32704,
    Wgs84_UTM_zone_5S = 32705,
    Wgs84_UTM_zone_6S = 32706,
    Wgs84_UTM_zone_7S = 32707,
    Wgs84_UTM_zone_8S = 32708,
    Wgs84_UTM_zone_9S = 32709,
    Wgs84_UTM_zone_10S = 32710,
    Wgs84_UTM_zone_11S = 32711,
    Wgs84_UTM_zone_12S = 32712,
    Wgs84_UTM_zone_13S = 32713,
    Wgs84_UTM_zone_14S = 32714,
    Wgs84_UTM_zone_15S = 32715,
    Wgs84_UTM_zone_16S = 32716,
    Wgs84_UTM_zone_17S = 32717,
    Wgs84_UTM_zone_18S = 32718,
    Wgs84_UTM_zone_19S = 32719,
    Wgs84_UTM_zone_20S = 32720,
    Wgs84_UTM_zone_21S = 32721,
    Wgs84_UTM_zone_22S = 32722,
    Wgs84_UTM_zone_23S = 32723,
    Wgs84_UTM_zone_24S = 32724,
    Wgs84_UTM_zone_25S = 32725,
    Wgs84_UTM_zone_26S = 32726,
    Wgs84_UTM_zone_27S = 32727,
    Wgs84_UTM_zone_28S = 32728,
    Wgs84_UTM_zone_29S = 32729,
    Wgs84_UTM_zone_30S = 32730,
    Wgs84_UTM_zone_31S = 32731,
    Wgs84_UTM_zone_32S = 32732,
    Wgs84_UTM_zone_33S = 32733,
    Wgs84_UTM_zone_34S = 32734,
    Wgs84_UTM_zone_35S = 32735,
    Wgs84_UTM_zone_36S = 32736,
    Wgs84_UTM_zone_37S = 32737,
    Wgs84_UTM_zone_38S = 32738,
    Wgs84_UTM_zone_39S = 32739,
    Wgs84_UTM_zone_40S = 32740,
    Wgs84_UTM_zone_41S = 32741,
    Wgs84_UTM_zone_42S = 32742,
    Wgs84_UTM_zone_43S = 32743,
    Wgs84_UTM_zone_44S = 32744,
    Wgs84_UTM_zone_45S = 32745,
    Wgs84_UTM_zone_46S = 32746,
    Wgs84_UTM_zone_47S = 32747,
    Wgs84_UTM_zone_48S = 32748,
    Wgs84_UTM_zone_49S = 32749,
    Wgs84_UTM_zone_50S = 32750,
    Wgs84_UTM_zone_51S = 32751,
    Wgs84_UTM_zone_52S = 32752,
    Wgs84_UTM_zone_53S = 32753,
    Wgs84_UTM_zone_54S = 32754,
    Wgs84_UTM_zone_55S = 32755,
    Wgs84_UTM_zone_56S = 32756,
    Wgs84_UTM_zone_57S = 32757,
    Wgs84_UTM_zone_58S = 32758,
    Wgs84_UTM_zone_59S = 32759,
    Wgs84_UTM_zone_60S = 32760,
    Wgs84_UPS_South_NE = 32761
};

enum __declspec(uuid("32617f7e-44f7-4ecd-8228-85924a4df5b7"))
tkNad83Projection
{
    Nad83_Kentucky_North = 2205,
    Nad83_Arizona_East_ft = 2222,
    Nad83_Arizona_Central_ft = 2223,
    Nad83_Arizona_West_ft = 2224,
    Nad83_California_zone_1_ftUS = 2225,
    Nad83_California_zone_2_ftUS = 2226,
    Nad83_California_zone_3_ftUS = 2227,
    Nad83_California_zone_4_ftUS = 2228,
    Nad83_California_zone_5_ftUS = 2229,
    Nad83_California_zone_6_ftUS = 2230,
    Nad83_Colorado_North_ftUS = 2231,
    Nad83_Colorado_Central_ftUS = 2232,
    Nad83_Colorado_South_ftUS = 2233,
    Nad83_Connecticut_ftUS = 2234,
    Nad83_Delaware_ftUS = 2235,
    Nad83_Florida_East_ftUS = 2236,
    Nad83_Florida_West_ftUS = 2237,
    Nad83_Florida_North_ftUS = 2238,
    Nad83_Georgia_East_ftUS = 2239,
    Nad83_Georgia_West_ftUS = 2240,
    Nad83_Idaho_East_ftUS = 2241,
    Nad83_Idaho_Central_ftUS = 2242,
    Nad83_Idaho_West_ftUS = 2243,
    Nad83_Kentucky_North_ftUS = 2246,
    Nad83_Kentucky_South_ftUS = 2247,
    Nad83_Maryland_ftUS = 2248,
    Nad83_Massachusetts_Mainland_ftUS = 2249,
    Nad83_Massachusetts_Island_ftUS = 2250,
    Nad83_Michigan_North_ft = 2251,
    Nad83_Michigan_Central_ft = 2252,
    Nad83_Michigan_South_ft = 2253,
    Nad83_Mississippi_East_ftUS = 2254,
    Nad83_Mississippi_West_ftUS = 2255,
    Nad83_Montana_ft = 2256,
    Nad83_New_Mexico_East_ftUS = 2257,
    Nad83_New_Mexico_Central_ftUS = 2258,
    Nad83_New_Mexico_West_ftUS = 2259,
    Nad83_New_York_East_ftUS = 2260,
    Nad83_New_York_Central_ftUS = 2261,
    Nad83_New_York_West_ftUS = 2262,
    Nad83_New_York_Long_Island_ftUS = 2263,
    Nad83_North_Carolina_ftUS = 2264,
    Nad83_North_Dakota_North_ft = 2265,
    Nad83_North_Dakota_South_ft = 2266,
    Nad83_Oklahoma_North_ftUS = 2267,
    Nad83_Oklahoma_South_ftUS = 2268,
    Nad83_Oregon_North_ft = 2269,
    Nad83_Oregon_South_ft = 2270,
    Nad83_Pennsylvania_North_ftUS = 2271,
    Nad83_Pennsylvania_South_ftUS = 2272,
    Nad83_South_Carolina_ft = 2273,
    Nad83_Tennessee_ftUS = 2274,
    Nad83_Texas_North_ftUS = 2275,
    Nad83_Texas_North_Central_ftUS = 2276,
    Nad83_Texas_Central_ftUS = 2277,
    Nad83_Texas_South_Central_ftUS = 2278,
    Nad83_Texas_South_ftUS = 2279,
    Nad83_Utah_North_ft = 2280,
    Nad83_Utah_Central_ft = 2281,
    Nad83_Utah_South_ft = 2282,
    Nad83_Virginia_North_ftUS = 2283,
    Nad83_Virginia_South_ftUS = 2284,
    Nad83_Washington_North_ftUS = 2285,
    Nad83_Washington_South_ftUS = 2286,
    Nad83_Wisconsin_North_ftUS = 2287,
    Nad83_Wisconsin_Central_ftUS = 2288,
    Nad83_Wisconsin_South_ftUS = 2289,
    Nad83_Indiana_East_ftUS = 2965,
    Nad83_Indiana_West_ftUS = 2966,
    Nad83_Oregon_Lambert = 2991,
    Nad83_Oregon_Lambert_ft = 2992,
    Nad83_BC_Albers = 3005,
    Nad83_Wisconsin_Transverse_Mercator = 3070,
    Nad83_Maine_CS2000_East = 3072,
    Nad83_Maine_CS2000_West = 3074,
    Nad83_Michigan_Oblique_Mercator = 3078,
    Nad83_Texas_State_Mapping_System = 3081,
    Nad83_Texas_Centric_Lambert_Conformal = 3082,
    Nad83_Texas_Centric_Albers_Equal_Area = 3083,
    Nad83_Florida_GDL_Albers = 3086,
    Nad83_Kentucky_Single_Zone = 3088,
    Nad83_Kentucky_Single_Zone_ftUS = 3089,
    Nad83_Ontario_MNR_Lambert = 3161,
    Nad83_Great_Lakes_Albers = 3174,
    Nad83_Great_Lakes_and_St_Lawrence_Albers = 3175,
    Nad83_California_Albers = 3310,
    Nad83_Alaska_Albers = 3338,
    Nad83_Statistics_Canada_Lambert = 3347,
    Nad83_Alberta_10_TM_Forest = 3400,
    Nad83_Alberta_10_TM_Resource = 3401,
    Nad83_Iowa_North_ft_US = 3417,
    Nad83_Iowa_South_ft_US = 3418,
    Nad83_Kansas_North_ft_US = 3419,
    Nad83_Kansas_South_ft_US = 3420,
    Nad83_Nevada_East_ft_US = 3421,
    Nad83_Nevada_Central_ft_US = 3422,
    Nad83_Nevada_West_ft_US = 3423,
    Nad83_New_Jersey_ft_US = 3424,
    Nad83_Arkansas_North_ftUS = 3433,
    Nad83_Arkansas_South_ftUS = 3434,
    Nad83_Illinois_East_ftUS = 3435,
    Nad83_Illinois_West_ftUS = 3436,
    Nad83_New_Hampshire_ftUS = 3437,
    Nad83_Rhode_Island_ftUS = 3438,
    Nad83_Louisiana_North_ftUS = 3451,
    Nad83_Louisiana_South_ftUS = 3452,
    Nad83_Louisiana_Offshore_ftUS = 3453,
    Nad83_South_Dakota_South_ftUS = 3455,
    Nad83_Maine_CS2000_Central = 3463,
    Nad83_Utah_North_ftUS = 3560,
    Nad83_Utah_Central_ftUS = 3566,
    Nad83_Utah_South_ftUS = 3567,
    Nad83_Yukon_Albers = 3578,
    Nad83_NWT_Lambert = 3580,
    Nad83_Ohio_North_ftUS = 3734,
    Nad83_Ohio_South_ftUS = 3735,
    Nad83_Wyoming_East_ftUS = 3736,
    Nad83_Wyoming_East_Central_ftUS = 3737,
    Nad83_Wyoming_West_Central_ftUS = 3738,
    Nad83_Wyoming_West_ftUS = 3739,
    Nad83_Hawaii_zone_3_ftUS = 3759,
    Nad83_Alberta_3TM_ref_merid_111_W = 3775,
    Nad83_Alberta_3TM_ref_merid_114_W = 3776,
    Nad83_Alberta_3TM_ref_merid_117_W = 3777,
    Nad83_MTQ_Lambert = 3798,
    Nad83_Alberta_3TM_ref_merid_120_W = 3801,
    Nad83_Mississippi_TM = 3814,
    Nad83_Virginia_Lambert = 3968,
    Nad83_Canada_Atlas_Lambert = 3978,
    Nad83_BLM_59N_ftUS = 4217,
    Nad83_BLM_60N_ftUS = 4420,
    Nad83_BLM_1N_ftUS = 4421,
    Nad83_BLM_2N_ftUS = 4422,
    Nad83_BLM_3N_ftUS = 4423,
    Nad83_BLM_4N_ftUS = 4424,
    Nad83_BLM_5N_ftUS = 4425,
    Nad83_BLM_6N_ftUS = 4426,
    Nad83_BLM_7N_ftUS = 4427,
    Nad83_BLM_8N_ftUS = 4428,
    Nad83_BLM_9N_ftUS = 4429,
    Nad83_BLM_10N_ftUS = 4430,
    Nad83_BLM_11N_ftUS = 4431,
    Nad83_BLM_12N_ftUS = 4432,
    Nad83_BLM_13N_ftUS = 4433,
    Nad83_BLM_18N_ftUS = 4438,
    Nad83_BLM_19N_ftUS = 4439,
    Nad83_South_Dakota_North_ftUS = 4457,
    Nad83_Conus_Albers = 5070,
    Nad83_Teranet_Ontario_Lambert = 5320,
    Nad83_Maine_East_ftUS = 26847,
    Nad83_Maine_West_ftUS = 26848,
    Nad83_Minnesota_North_ftUS = 26849,
    Nad83_Minnesota_Central_ftUS = 26850,
    Nad83_Minnesota_South_ftUS = 26851,
    Nad83_Nebraska_ftUS = 26852,
    Nad83_West_Virginia_North_ftUS = 26853,
    Nad83_West_Virginia_South_ftUS = 26854,
    Nad83_UTM_zone_59N = 3372,
    Nad83_UTM_zone_60N = 3373,
    Nad83_UTM_zone_1N = 26901,
    Nad83_UTM_zone_2N = 26902,
    Nad83_UTM_zone_3N = 26903,
    Nad83_UTM_zone_4N = 26904,
    Nad83_UTM_zone_5N = 26905,
    Nad83_UTM_zone_6N = 26906,
    Nad83_UTM_zone_7N = 26907,
    Nad83_UTM_zone_8N = 26908,
    Nad83_UTM_zone_9N = 26909,
    Nad83_UTM_zone_10N = 26910,
    Nad83_UTM_zone_11N = 26911,
    Nad83_UTM_zone_12N = 26912,
    Nad83_UTM_zone_13N = 26913,
    Nad83_UTM_zone_14N = 26914,
    Nad83_UTM_zone_15N = 26915,
    Nad83_UTM_zone_16N = 26916,
    Nad83_UTM_zone_17N = 26917,
    Nad83_UTM_zone_18N = 26918,
    Nad83_UTM_zone_19N = 26919,
    Nad83_UTM_zone_20N = 26920,
    Nad83_UTM_zone_21N = 26921,
    Nad83_UTM_zone_22N = 26922,
    Nad83_UTM_zone_23N = 26923,
    Nad83_BLM_14N_ftUS = 32164,
    Nad83_BLM_15N_ftUS = 32165,
    Nad83_BLM_16N_ftUS = 32166,
    Nad83_BLM_17N_ftUS = 32167,
    Nad83_Alabama_East = 26929,
    Nad83_Alabama_West = 26930,
    Nad83_Alaska_zone_1 = 26931,
    Nad83_Alaska_zone_2 = 26932,
    Nad83_Alaska_zone_3 = 26933,
    Nad83_Alaska_zone_4 = 26934,
    Nad83_Alaska_zone_5 = 26935,
    Nad83_Alaska_zone_6 = 26936,
    Nad83_Alaska_zone_7 = 26937,
    Nad83_Alaska_zone_8 = 26938,
    Nad83_Alaska_zone_9 = 26939,
    Nad83_Alaska_zone_10 = 26940,
    Nad83_California_zone_1 = 26941,
    Nad83_California_zone_2 = 26942,
    Nad83_California_zone_3 = 26943,
    Nad83_California_zone_4 = 26944,
    Nad83_California_zone_5 = 26945,
    Nad83_California_zone_6 = 26946,
    Nad83_Arizona_East = 26948,
    Nad83_Arizona_Central = 26949,
    Nad83_Arizona_West = 26950,
    Nad83_Arkansas_North = 26951,
    Nad83_Arkansas_South = 26952,
    Nad83_Colorado_North = 26953,
    Nad83_Colorado_Central = 26954,
    Nad83_Colorado_South = 26955,
    Nad83_Connecticut = 26956,
    Nad83_Delaware = 26957,
    Nad83_Florida_East = 26958,
    Nad83_Florida_West = 26959,
    Nad83_Florida_North = 26960,
    Nad83_Hawaii_zone_1 = 26961,
    Nad83_Hawaii_zone_2 = 26962,
    Nad83_Hawaii_zone_3 = 26963,
    Nad83_Hawaii_zone_4 = 26964,
    Nad83_Hawaii_zone_5 = 26965,
    Nad83_Georgia_East = 26966,
    Nad83_Georgia_West = 26967,
    Nad83_Idaho_East = 26968,
    Nad83_Idaho_Central = 26969,
    Nad83_Idaho_West = 26970,
    Nad83_Illinois_East = 26971,
    Nad83_Illinois_West = 26972,
    Nad83_Indiana_East = 26973,
    Nad83_Indiana_West = 26974,
    Nad83_Iowa_North = 26975,
    Nad83_Iowa_South = 26976,
    Nad83_Kansas_North = 26977,
    Nad83_Kansas_South = 26978,
    Nad83_Kentucky_South = 26980,
    Nad83_Louisiana_North = 26981,
    Nad83_Louisiana_South = 26982,
    Nad83_Maine_East = 26983,
    Nad83_Maine_West = 26984,
    Nad83_Maryland = 26985,
    Nad83_Massachusetts_Mainland = 26986,
    Nad83_Massachusetts_Island = 26987,
    Nad83_Michigan_North = 26988,
    Nad83_Michigan_Central = 26989,
    Nad83_Michigan_South = 26990,
    Nad83_Minnesota_North = 26991,
    Nad83_Minnesota_Central = 26992,
    Nad83_Minnesota_South = 26993,
    Nad83_Mississippi_East = 26994,
    Nad83_Mississippi_West = 26995,
    Nad83_Missouri_East = 26996,
    Nad83_Missouri_Central = 26997,
    Nad83_Missouri_West = 26998,
    Nad83_Montana = 32100,
    Nad83_Nebraska = 32104,
    Nad83_Nevada_East = 32107,
    Nad83_Nevada_Central = 32108,
    Nad83_Nevada_West = 32109,
    Nad83_New_Hampshire = 32110,
    Nad83_New_Jersey = 32111,
    Nad83_New_Mexico_East = 32112,
    Nad83_New_Mexico_Central = 32113,
    Nad83_New_Mexico_West = 32114,
    Nad83_New_York_East = 32115,
    Nad83_New_York_Central = 32116,
    Nad83_New_York_West = 32117,
    Nad83_New_York_Long_Island = 32118,
    Nad83_North_Carolina = 32119,
    Nad83_North_Dakota_North = 32120,
    Nad83_North_Dakota_South = 32121,
    Nad83_Ohio_North = 32122,
    Nad83_Ohio_South = 32123,
    Nad83_Oklahoma_North = 32124,
    Nad83_Oklahoma_South = 32125,
    Nad83_Oregon_North = 32126,
    Nad83_Oregon_South = 32127,
    Nad83_Pennsylvania_North = 32128,
    Nad83_Pennsylvania_South = 32129,
    Nad83_Rhode_Island = 32130,
    Nad83_South_Carolina = 32133,
    Nad83_South_Dakota_North = 32134,
    Nad83_South_Dakota_South = 32135,
    Nad83_Tennessee = 32136,
    Nad83_Texas_North = 32137,
    Nad83_Texas_North_Central = 32138,
    Nad83_Texas_Central = 32139,
    Nad83_Texas_South_Central = 32140,
    Nad83_Texas_South = 32141,
    Nad83_Utah_North = 32142,
    Nad83_Utah_Central = 32143,
    Nad83_Utah_South = 32144,
    Nad83_Vermont = 32145,
    Nad83_Virginia_North = 32146,
    Nad83_Virginia_South = 32147,
    Nad83_Washington_North = 32148,
    Nad83_Washington_South = 32149,
    Nad83_West_Virginia_North = 32150,
    Nad83_West_Virginia_South = 32151,
    Nad83_Wisconsin_North = 32152,
    Nad83_Wisconsin_Central = 32153,
    Nad83_Wisconsin_South = 32154,
    Nad83_Wyoming_East = 32155,
    Nad83_Wyoming_East_Central = 32156,
    Nad83_Wyoming_West_Central = 32157,
    Nad83_Wyoming_West = 32158,
    Nad83_Puerto_Rico_and_Virgin_Is = 32161,
    Nad83_SCoPQ_zone_2 = 32180,
    Nad83_MTM_zone_1 = 32181,
    Nad83_MTM_zone_2 = 32182,
    Nad83_MTM_zone_3 = 32183,
    Nad83_MTM_zone_4 = 32184,
    Nad83_MTM_zone_5 = 32185,
    Nad83_MTM_zone_6 = 32186,
    Nad83_MTM_zone_7 = 32187,
    Nad83_MTM_zone_8 = 32188,
    Nad83_MTM_zone_9 = 32189,
    Nad83_MTM_zone_10 = 32190,
    Nad83_MTM_zone_11 = 32191,
    Nad83_MTM_zone_12 = 32192,
    Nad83_MTM_zone_13 = 32193,
    Nad83_MTM_zone_14 = 32194,
    Nad83_MTM_zone_15 = 32195,
    Nad83_MTM_zone_16 = 32196,
    Nad83_MTM_zone_17 = 32197,
    Nad83_Quebec_Lambert = 32198,
    Nad83_Louisiana_Offshore = 32199
};

struct __declspec(uuid("aed5318e-9e3d-4276-be03-71edfedc0f1f"))
IGeoProjection : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall ExportToProj4 (
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall ImportFromProj4 (
        /*[in]*/ BSTR proj,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall ImportFromESRI (
        /*[in]*/ BSTR proj,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall ImportFromEPSG (
        /*[in]*/ long projCode,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall ExportToWKT (
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall ImportFromWKT (
        /*[in]*/ BSTR proj,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_GlobalCallback (
        /*[out,retval]*/ struct ICallback * * retval ) = 0;
      virtual HRESULT __stdcall put_GlobalCallback (
        /*[in]*/ struct ICallback * retval ) = 0;
      virtual HRESULT __stdcall get_ErrorMsg (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_LastErrorCode (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall put_Key (
        /*[in]*/ BSTR retval ) = 0;
      virtual HRESULT __stdcall SetWellKnownGeogCS (
        /*[in]*/ enum tkCoordinateSystem newVal ) = 0;
      virtual HRESULT __stdcall get_IsGeographic (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsProjected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsLocal (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsSame (
        /*[in]*/ struct IGeoProjection * proj,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsSameGeogCS (
        /*[in]*/ struct IGeoProjection * proj,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_InverseFlattening (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_SemiMajor (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_SemiMinor (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_ProjectionParam (
        /*[in]*/ enum tkProjectionParameter Name,
        /*[in]*/ double * Value,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsEmpty (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall CopyFrom (
        /*[in]*/ struct IGeoProjection * sourceProj,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ProjectionName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_GeogCSName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_GeogCSParam (
        /*[in]*/ enum tkGeogCSParameter Name,
        /*[in]*/ double * pVal,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall SetGeographicCS (
        /*[in]*/ enum tkCoordinateSystem coordinateSystem ) = 0;
      virtual HRESULT __stdcall SetWgs84Projection (
        /*[in]*/ enum tkWgs84Projection Projection ) = 0;
      virtual HRESULT __stdcall SetNad83Projection (
        /*[in]*/ enum tkNad83Projection Projection ) = 0;
      virtual HRESULT __stdcall get_IsSameExt (
        /*[in]*/ struct IGeoProjection * proj,
        /*[in]*/ struct IExtents * bounds,
        /*[in]*/ int numSamplingPoints,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall ReadFromFile (
        /*[in]*/ BSTR Filename,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall WriteToFile (
        /*[in]*/ BSTR Filename,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall ImportFromAutoDetect (
        /*[in]*/ BSTR proj,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
};

struct __declspec(uuid("94ec8df4-6614-463a-b622-f65913bf98de"))
_ITableEvents : IDispatch
{};

struct __declspec(uuid("abea1545-08ab-4d5c-a594-d3017211ea95"))
_DMapEvents : IDispatch
{};

struct __declspec(uuid("e6d4eb7a-3e8f-45b2-a514-90ef7b2f5c0a"))
IShapefileColorBreak : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartValue (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_StartValue (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_EndValue (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_EndValue (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_StartColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_StartColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_EndColor (
        /*[out,retval]*/ OLE_COLOR * pVal ) = 0;
      virtual HRESULT __stdcall put_EndColor (
        /*[in]*/ OLE_COLOR pVal ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("fae1b21a-10c5-4c33-8dc2-931edc9fbf82"))
IShapefileColorScheme : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall NumBreaks (
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall Remove (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall Add (
        /*[in]*/ struct IShapefileColorBreak * Break,
        /*[out,retval]*/ long * Result ) = 0;
      virtual HRESULT __stdcall get_ColorBreak (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IShapefileColorBreak * * pVal ) = 0;
      virtual HRESULT __stdcall put_ColorBreak (
        /*[in]*/ long Index,
        /*[in]*/ struct IShapefileColorBreak * pVal ) = 0;
      virtual HRESULT __stdcall get_LayerHandle (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_LayerHandle (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_FieldIndex (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_FieldIndex (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_LastErrorCode (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ErrorMsg (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_GlobalCallback (
        /*[out,retval]*/ struct ICallback * * pVal ) = 0;
      virtual HRESULT __stdcall put_GlobalCallback (
        /*[in]*/ struct ICallback * pVal ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Key (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall InsertAt (
        /*[in]*/ int Position,
        /*[in]*/ struct IShapefileColorBreak * Break,
        /*[out,retval]*/ long * Result ) = 0;
};

struct __declspec(uuid("54f4c2f7-ed40-43b7-9d6f-e45965df7f95"))
Map;
    // [ default ] dispinterface _DMap
    // [ default, source ] dispinterface _DMapEvents

struct __declspec(uuid("a038d3e9-46cb-4f95-a40a-88826bf71ba6"))
ShapefileColorScheme;
    // [ default ] interface IShapefileColorScheme

struct __declspec(uuid("700a2aaa-0d28-4943-92ec-08aa9682617a"))
ShapefileColorBreak;
    // [ default ] interface IShapefileColorBreak

struct __declspec(uuid("b4a353e3-d3df-455c-8e4d-cfc937800820"))
Grid;
    // [ default ] interface IGrid

struct __declspec(uuid("e42814d1-6269-41b1-93c2-aa848f00e459"))
IGridHeader : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumberCols (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NumberCols (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_NumberRows (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NumberRows (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_NodataValue (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_NodataValue (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_dX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_dX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_dY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_dY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_XllCenter (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_XllCenter (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_YllCenter (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_YllCenter (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Projection (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Projection (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Notes (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Notes (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LastErrorCode (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ErrorMsg (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_GlobalCallback (
        /*[out,retval]*/ struct ICallback * * pVal ) = 0;
      virtual HRESULT __stdcall put_GlobalCallback (
        /*[in]*/ struct ICallback * pVal ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Key (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall put_Owner (
        /*[in]*/ int * t,
        /*[in]*/ int * d,
        /*[in]*/ int * s,
        /*[in]*/ int * l,
        /*[in]*/ int * _arg5 ) = 0;
      virtual HRESULT __stdcall CopyFrom (
        /*[in]*/ struct IGridHeader * pVal ) = 0;
      virtual HRESULT __stdcall get_ColorTable (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ColorTable (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_GeoProjection (
        /*[out,retval]*/ struct IGeoProjection * * pVal ) = 0;
      virtual HRESULT __stdcall put_GeoProjection (
        /*[in]*/ struct IGeoProjection * pVal ) = 0;
};

enum __declspec(uuid("f02c004b-fd7d-4ace-b672-bdb8a41632bc"))
GridDataType
{
    ShortDataType = 0,
    LongDataType = 1,
    FloatDataType = 2,
    DoubleDataType = 3,
    InvalidDataType = -1,
    UnknownDataType = 4,
    ByteDataType = 5
};

enum __declspec(uuid("50814193-87dc-45f0-9682-f64c5b153aac"))
GridFileType
{
    Ascii = 0,
    Binary = 1,
    Esri = 2,
    GeoTiff = 3,
    Sdts = 4,
    PAux = 5,
    PCIDsk = 6,
    DTed = 7,
    Bil = 8,
    Ecw = 9,
    MrSid = 10,
    Flt = 11,
    Dem = 12,
    UseExtension = 13,
    InvalidGridFileType = -1
};

struct __declspec(uuid("18dfb64a-9e72-4cbe-afd6-a5b7421dd0cb"))
IGrid : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Header (
        /*[out,retval]*/ struct IGridHeader * * pVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[in]*/ long Column,
        /*[in]*/ long Row,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long Column,
        /*[in]*/ long Row,
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_InRam (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Maximum (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_Minimum (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_DataType (
        /*[out,retval]*/ enum GridDataType * pVal ) = 0;
      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_LastErrorCode (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ErrorMsg (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_GlobalCallback (
        /*[out,retval]*/ struct ICallback * * pVal ) = 0;
      virtual HRESULT __stdcall put_GlobalCallback (
        /*[in]*/ struct ICallback * pVal ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Key (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall Open (
        /*[in]*/ BSTR Filename,
        /*[in]*/ enum GridDataType DataType,
        /*[in]*/ VARIANT_BOOL InRam,
        /*[in]*/ enum GridFileType fileType,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall CreateNew (
        /*[in]*/ BSTR Filename,
        /*[in]*/ struct IGridHeader * Header,
        /*[in]*/ enum GridDataType DataType,
        /*[in]*/ VARIANT InitialValue,
        /*[in]*/ VARIANT_BOOL InRam,
        /*[in]*/ enum GridFileType fileType,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall Close (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall Save (
        /*[in]*/ BSTR Filename,
        /*[in]*/ enum GridFileType GridFileType,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall Clear (
        /*[in]*/ VARIANT ClearValue,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall ProjToCell (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[out]*/ long * Column,
        /*[out]*/ long * Row ) = 0;
      virtual HRESULT __stdcall CellToProj (
        /*[in]*/ long Column,
        /*[in]*/ long Row,
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall get_CdlgFilter (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall AssignNewProjection (
        /*[in]*/ BSTR Projection,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_RasterColorTableColoringScheme (
        /*[out,retval]*/ struct IGridColorScheme * * pVal ) = 0;
      virtual HRESULT __stdcall GetRow (
        /*[in]*/ long Row,
        /*[in,out]*/ float * Vals,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall PutRow (
        /*[in]*/ long Row,
        /*[in,out]*/ float * Vals,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall GetFloatWindow (
        /*[in]*/ long StartRow,
        /*[in]*/ long EndRow,
        /*[in]*/ long StartCol,
        /*[in]*/ long EndCol,
        /*[in,out]*/ float * Vals,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall PutFloatWindow (
        /*[in]*/ long StartRow,
        /*[in]*/ long EndRow,
        /*[in]*/ long StartCol,
        /*[in]*/ long EndCol,
        /*[in,out]*/ float * Vals,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall SetInvalidValuesToNodata (
        /*[in]*/ double MinThresholdValue,
        /*[in]*/ double MaxThresholdValue,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall Resource (
        /*[in]*/ BSTR newSrcPath,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("044afe79-d3de-4500-a14b-decea635b497"))
GridHeader;
    // [ default ] interface IGridHeader

struct __declspec(uuid("86e02063-602c-47f2-9778-81e6979e3267"))
ESRIGridManager;
    // [ default ] interface IESRIGridManager

struct __declspec(uuid("55b3f2da-eb09-4fa9-b74b-9a1b3e457318"))
IESRIGridManager : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LastErrorCode (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ErrorMsg (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_GlobalCallback (
        /*[out,retval]*/ struct ICallback * * pVal ) = 0;
      virtual HRESULT __stdcall put_GlobalCallback (
        /*[in]*/ struct ICallback * pVal ) = 0;
      virtual HRESULT __stdcall CanUseESRIGrids (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall DeleteESRIGrids (
        /*[in]*/ BSTR Filename,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall IsESRIGrid (
        /*[in]*/ BSTR Filename,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
};

struct __declspec(uuid("0db362e3-6f79-4226-af19-47b67b27e99b"))
Image;
    // [ default ] interface IImage

struct __declspec(uuid("c0eac9eb-1d02-4bd9-8dab-4bf922c8cd13"))
Shapefile;
    // [ default ] interface IShapefile

struct __declspec(uuid("ce7e6869-6f74-4e9d-9f07-3dcbadab6299"))
Shape;
    // [ default ] interface IShape

struct __declspec(uuid("03f9b3db-637b-4544-bf7a-2f190f821f0d"))
Extents;
    // [ default ] interface IExtents

struct __declspec(uuid("ce63ad29-c5eb-4865-b143-e0ac35ed6fbc"))
Point;
    // [ default ] interface IPoint

struct __declspec(uuid("97efb80f-3638-4bdc-9128-c5a30194c257"))
Table;
    // [ default ] interface ITable
    // [ default, source ] dispinterface _ITableEvents

struct __declspec(uuid("c2c71e09-3deb-4e6c-b54a-d5613986bffe"))
Field;
    // [ default ] interface IField

struct __declspec(uuid("b655545f-1d9c-4d81-a73c-205fc2c3c4ab"))
ShapeNetwork;
    // [ default ] interface IShapeNetwork

enum __declspec(uuid("05d8ac58-5435-4957-b94b-8df7155d5f98"))
AmbiguityResolution
{
    Z_VALUE = 0,
    DISTANCE_TO_OUTLET = 1,
    NO_RESOLUTION = 2
};

struct __declspec(uuid("b898877f-dc9e-4fbf-b997-b65dc97b72e9"))
Utils;
    // [ default ] interface IUtils

enum __declspec(uuid("6f09e672-ea03-47dc-bc25-4a165dacc148"))
PolygonOperation
{
    DIFFERENCE_OPERATION = 0,
    INTERSECTION_OPERATION = 1,
    EXCLUSIVEOR_OPERATION = 2,
    UNION_OPERATION = 3
};

enum __declspec(uuid("b4ea9a5d-c2db-4da9-ae5b-a70e57c66c5c"))
SplitMethod
{
    InscribedRadius = 0,
    AngleDeviation = 1
};

struct __declspec(uuid("55dd824e-332e-41ca-b40c-c8dc81ee209c"))
ITin : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall Open (
        /*[in]*/ BSTR TinFile,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall CreateNew (
        /*[in]*/ struct IGrid * Grid,
        /*[in]*/ double Deviation,
        /*[in]*/ enum SplitMethod SplitTest,
        /*[in]*/ double STParam,
        /*[in]*/ long MeshDivisions,
        /*[in]*/ long MaximumTriangles,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall Save (
        /*[in]*/ BSTR TinFilename,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall Close (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall Select (
        /*[in,out]*/ long * TriangleHint,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[out]*/ double * Z,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_NumTriangles (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_NumVertices (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_LastErrorCode (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ErrorMsg (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_CdlgFilter (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_GlobalCallback (
        /*[out,retval]*/ struct ICallback * * pVal ) = 0;
      virtual HRESULT __stdcall put_GlobalCallback (
        /*[in]*/ struct ICallback * pVal ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Key (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall Triangle (
        /*[in]*/ long TriIndex,
        /*[out]*/ long * vtx1Index,
        /*[out]*/ long * vtx2Index,
        /*[out]*/ long * vtx3Index ) = 0;
      virtual HRESULT __stdcall Vertex (
        /*[in]*/ long VtxIndex,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall Max (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall Min (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * Z ) = 0;
      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IsNDTriangle (
        /*[in]*/ long TriIndex,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall TriangleNeighbors (
        /*[in]*/ long TriIndex,
        /*[in,out]*/ long * triIndex1,
        /*[in,out]*/ long * triIndex2,
        /*[in,out]*/ long * triIndex3 ) = 0;
      virtual HRESULT __stdcall CreateTinFromPoints (
        /*[in]*/ SAFEARRAY * Points,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
};

struct __declspec(uuid("d226c4b1-c97c-469d-8cbc-8e3df2139612"))
Vector;
    // [ default ] interface IVector

struct __declspec(uuid("eceb5841-f84e-4dfd-8c96-32216c69c818"))
GridColorScheme;
    // [ default ] interface IGridColorScheme

struct __declspec(uuid("b82b0eb0-05b6-4ff2-aa16-bcd33fde6568"))
GridColorBreak;
    // [ default ] interface IGridColorBreak

struct __declspec(uuid("677b1af6-a28d-4fab-8a5f-0f8763d88638"))
Tin;
    // [ default ] interface ITin

struct __declspec(uuid("58804a7f-2c75-41af-9d32-5bd08db1baf6"))
ShapeDrawingOptions;
    // [ default ] interface IShapeDrawingOptions

struct __declspec(uuid("cea6b369-f2ec-4927-bd8c-f0f6a4066ec6"))
Labels;
    // [ default ] interface ILabels

struct __declspec(uuid("92add941-94c2-4a57-a058-e9999f21d6bf"))
LabelCategory;
    // [ default ] interface ILabelCategory

struct __declspec(uuid("4d745ac7-d623-4f51-ba01-18793fc778a6"))
Label;
    // [ default ] interface ILabel

struct __declspec(uuid("1a3b0d02-9265-41b0-84bb-9e09f262ff82"))
ShapefileCategories;
    // [ default ] interface IShapefileCategories

struct __declspec(uuid("51464a2a-69f7-4cad-8728-9608580210a3"))
ShapefileCategory;
    // [ default ] interface IShapefileCategory

struct __declspec(uuid("1176c871-4c0b-48cf-85b6-926a7948e0f7"))
Charts;
    // [ default ] interface ICharts

struct __declspec(uuid("a109a2a1-775f-4fbf-b0c7-f703f8b0bc90"))
Chart;
    // [ default ] interface IChart

struct __declspec(uuid("60409e71-bbb8-491c-a48b-ada7f383cb6e"))
ColorScheme;
    // [ default ] interface IColorScheme

struct __declspec(uuid("8c429c40-4f0f-479a-b492-98819424801d"))
ChartField;
    // [ default ] interface IChartField

struct __declspec(uuid("ff695b0c-4977-4d9e-88dd-0df4ff7082bc"))
LinePattern;
    // [ default ] interface ILinePattern

struct __declspec(uuid("03a98c90-70ff-40c7-ad93-6bf8b41b170f"))
LineSegment;
    // [ default ] interface ILineSegment

struct __declspec(uuid("b0828db2-3354-419f-82b0-ac0478ddb00d"))
GeoProjection;
    // [ default ] interface IGeoProjection

struct __declspec(uuid("80cdfee0-576f-4141-906e-877638a2aef3"))
GlobalSettings;
    // [ default ] interface IGlobalSettings

enum __declspec(uuid("eec76509-2f4b-4035-88b8-fc25b76f8ddf"))
tkGdalError
{
    GdalErrorNone = 0,
    GdalErrorAppDefined = 1,
    GdalErrorOutOfMemory = 2,
    GdalErrorFileIO = 3,
    GdalErrorOpenFailed = 4,
    GdalErrorIllegalArg = 5,
    GdalErrorNotSupported = 6,
    GdalErrorAssertionFailed = 7,
    GdalErrorNoWriteAccess = 8,
    GdalErrorUserInterrupt = 9,
    GdalErrorObjectNull = 10,
    GdalErrorUndefined = 11
};

enum __declspec(uuid("0e2e7cc8-9a4e-4ce4-85d3-f951fe723212"))
tkGdalErrorType
{
    GdalNone = 0,
    GdalDebug = 1,
    GdalWarning = 2,
    GdalFailure = 3,
    GdalFatal = 4,
    GdalUndefined = 5
};

enum __declspec(uuid("bc397a60-966f-45d6-b65c-7bc59f2dffa1"))
tkSmoothingMode
{
    DefaultMode = 0,
    HighSpeedMode = 1,
    HighQualityMode = 2,
    None = 3,
    AntiAlias = 4
};

enum __declspec(uuid("86786053-9c59-41fb-825a-5d0382603c4b"))
tkCompositingQuality
{
    Default = 0,
    HighSpeed = 1,
    HighQuality = 2,
    GammaCorrected = 3,
    AssumeLinear = 4
};

struct __declspec(uuid("97a80176-ee9a-461e-b494-f4f168f16eca"))
IGlobalSettings : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MinPolygonArea (
        /*[out,retval]*/ double * retval ) = 0;
      virtual HRESULT __stdcall put_MinPolygonArea (
        /*[in]*/ double retval ) = 0;
      virtual HRESULT __stdcall get_MinAreaToPerimeterRatio (
        /*[out,retval]*/ double * retval ) = 0;
      virtual HRESULT __stdcall put_MinAreaToPerimeterRatio (
        /*[in]*/ double retval ) = 0;
      virtual HRESULT __stdcall get_ClipperGcsMultiplicationFactor (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ClipperGcsMultiplicationFactor (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShapefileFastMode (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall put_ShapefileFastMode (
        /*[in]*/ VARIANT_BOOL retval ) = 0;
      virtual HRESULT __stdcall get_ShapefileFastUnion (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShapefileFastUnion (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_GdalLastErrorNo (
        /*[out,retval]*/ enum tkGdalError * pVal ) = 0;
      virtual HRESULT __stdcall get_GdalLastErrorType (
        /*[out,retval]*/ enum tkGdalErrorType * pVal ) = 0;
      virtual HRESULT __stdcall get_GdalLastErrorMsg (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall ResetGdalError ( ) = 0;
      virtual HRESULT __stdcall get_GdalReprojectionErrorMsg (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_LabelsSmoothingMode (
        /*[out,retval]*/ enum tkSmoothingMode * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelsSmoothingMode (
        /*[in]*/ enum tkSmoothingMode pVal ) = 0;
      virtual HRESULT __stdcall get_LabelsCompositingQuality (
        /*[out,retval]*/ enum tkCompositingQuality * pVal ) = 0;
      virtual HRESULT __stdcall put_LabelsCompositingQuality (
        /*[in]*/ enum tkCompositingQuality pVal ) = 0;
};

struct __declspec(uuid("5dc72405-c39c-4755-8cfc-9876a89225bc"))
IShapefile : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumShapes (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_NumFields (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Extents (
        /*[out,retval]*/ struct IExtents * * pVal ) = 0;
      virtual HRESULT __stdcall get_ShapefileType (
        /*[out,retval]*/ enum ShpfileType * pVal ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[in]*/ long ShapeIndex,
        /*[out,retval]*/ struct IShape * * pVal ) = 0;
      virtual HRESULT __stdcall get_EditingShapes (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_LastErrorCode (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_CdlgFilter (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_GlobalCallback (
        /*[out,retval]*/ struct ICallback * * pVal ) = 0;
      virtual HRESULT __stdcall put_GlobalCallback (
        /*[in]*/ struct ICallback * pVal ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Key (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall Open (
        /*[in]*/ BSTR ShapefileName,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall CreateNew (
        /*[in]*/ BSTR ShapefileName,
        /*[in]*/ enum ShpfileType ShapefileType,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall SaveAs (
        /*[in]*/ BSTR ShapefileName,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall Close (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall EditClear (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall EditInsertShape (
        /*[in]*/ struct IShape * Shape,
        /*[in,out]*/ long * ShapeIndex,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall EditDeleteShape (
        /*[in]*/ long ShapeIndex,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall SelectShapes (
        /*[in]*/ struct IExtents * BoundBox,
        /*[in]*/ double Tolerance,
        /*[in]*/ enum SelectMode SelectMode,
        /*[in,out]*/ VARIANT * Result,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall StartEditingShapes (
        /*[in]*/ VARIANT_BOOL StartEditTable,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall StopEditingShapes (
        /*[in]*/ VARIANT_BOOL ApplyChanges,
        /*[in]*/ VARIANT_BOOL StopEditTable,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall EditInsertField (
        /*[in]*/ struct IField * NewField,
        /*[in,out]*/ long * FieldIndex,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall EditDeleteField (
        /*[in]*/ long FieldIndex,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall EditCellValue (
        /*[in]*/ long FieldIndex,
        /*[in]*/ long ShapeIndex,
        /*[in]*/ VARIANT newVal,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall StartEditingTable (
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall StopEditingTable (
        /*[in]*/ VARIANT_BOOL ApplyChanges,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_Field (
        /*[in]*/ long FieldIndex,
        /*[out,retval]*/ struct IField * * pVal ) = 0;
      virtual HRESULT __stdcall get_CellValue (
        /*[in]*/ long FieldIndex,
        /*[in]*/ long ShapeIndex,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_EditingTable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_ErrorMsg (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_FileHandle (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall QuickPoint (
        /*[in]*/ long ShapeIndex,
        /*[in]*/ long PointIndex,
        /*[out,retval]*/ struct IPoint * * retval ) = 0;
      virtual HRESULT __stdcall QuickExtents (
        /*[in]*/ long ShapeIndex,
        /*[out,retval]*/ struct IExtents * * retval ) = 0;
      virtual HRESULT __stdcall QuickPoints (
        /*[in]*/ long ShapeIndex,
        /*[in,out]*/ long * numPoints,
        /*[out,retval]*/ SAFEARRAY * * retval ) = 0;
      virtual HRESULT __stdcall PointInShape (
        /*[in]*/ long ShapeIndex,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall PointInShapefile (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[out,retval]*/ long * ShapeIndex ) = 0;
      virtual HRESULT __stdcall BeginPointInShapefile (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall EndPointInShapefile ( ) = 0;
      virtual HRESULT __stdcall get_Projection (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Projection (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FieldByName (
        /*[in]*/ BSTR Fieldname,
        /*[out,retval]*/ struct IField * * pVal ) = 0;
      virtual HRESULT __stdcall get_numPoints (
        /*[in]*/ long ShapeIndex,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall CreateNewWithShapeID (
        /*[in]*/ BSTR ShapefileName,
        /*[in]*/ enum ShpfileType ShapefileType,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_UseSpatialIndex (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseSpatialIndex (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall CreateSpatialIndex (
        /*[in]*/ BSTR ShapefileName,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_HasSpatialIndex (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_HasSpatialIndex (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall Resource (
        /*[in]*/ BSTR newShpPath,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CacheExtents (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CacheExtents (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall RefreshExtents (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall RefreshShapeExtents (
        /*[in]*/ long ShapeId,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_UseQTree (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseQTree (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall Save (
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall IsSpatialIndexValid (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SpatialIndexMaxAreaPercent (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SpatialIndexMaxAreaPercent (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_CanUseSpatialIndex (
        /*[in]*/ struct IExtents * pArea,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall GetIntersection (
        /*[in]*/ VARIANT_BOOL SelectedOnlyOfThis,
        /*[in]*/ struct IShapefile * sf,
        /*[in]*/ VARIANT_BOOL SelectedOnly,
        /*[in]*/ enum ShpfileType fileType,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ struct IShapefile * * retval ) = 0;
      virtual HRESULT __stdcall SelectByShapefile (
        /*[in]*/ struct IShapefile * sf,
        /*[in]*/ enum tkSpatialRelation Relation,
        /*[in]*/ VARIANT_BOOL SelectedOnly,
        /*[in,out]*/ VARIANT * Result,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_NumSelected (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ShapeSelected (
        /*[in]*/ long ShapeIndex,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShapeSelected (
        /*[in]*/ long ShapeIndex,
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SelectionDrawingOptions (
        /*[out,retval]*/ struct IShapeDrawingOptions * * pVal ) = 0;
      virtual HRESULT __stdcall put_SelectionDrawingOptions (
        /*[in]*/ struct IShapeDrawingOptions * pVal ) = 0;
      virtual HRESULT __stdcall SelectAll ( ) = 0;
      virtual HRESULT __stdcall SelectNone ( ) = 0;
      virtual HRESULT __stdcall InvertSelection ( ) = 0;
      virtual HRESULT __stdcall Dissolve (
        /*[in]*/ long FieldIndex,
        /*[in]*/ VARIANT_BOOL SelectedOnly,
        /*[out,retval]*/ struct IShapefile * * sf ) = 0;
      virtual HRESULT __stdcall get_Labels (
        /*[out,retval]*/ struct ILabels * * pVal ) = 0;
      virtual HRESULT __stdcall put_Labels (
        /*[in]*/ struct ILabels * pVal ) = 0;
      virtual HRESULT __stdcall GenerateLabels (
        /*[in]*/ long FieldIndex,
        /*[in]*/ enum tkLabelPositioning Method,
        /*[in]*/ VARIANT_BOOL LargestPartOnly,
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall Clone (
        /*[out,retval]*/ struct IShapefile * * retval ) = 0;
      virtual HRESULT __stdcall get_DefaultDrawingOptions (
        /*[out,retval]*/ struct IShapeDrawingOptions * * pVal ) = 0;
      virtual HRESULT __stdcall put_DefaultDrawingOptions (
        /*[in]*/ struct IShapeDrawingOptions * pVal ) = 0;
      virtual HRESULT __stdcall get_Categories (
        /*[out,retval]*/ struct IShapefileCategories * * pVal ) = 0;
      virtual HRESULT __stdcall put_Categories (
        /*[in]*/ struct IShapefileCategories * pVal ) = 0;
      virtual HRESULT __stdcall get_Charts (
        /*[out,retval]*/ struct ICharts * * pVal ) = 0;
      virtual HRESULT __stdcall put_Charts (
        /*[in]*/ struct ICharts * pVal ) = 0;
      virtual HRESULT __stdcall get_ShapeCategory (
        /*[in]*/ long ShapeIndex,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ShapeCategory (
        /*[in]*/ long ShapeIndex,
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Table (
        /*[out,retval]*/ struct ITable * * retval ) = 0;
      virtual HRESULT __stdcall get_VisibilityExpression (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_VisibilityExpression (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FastMode (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FastMode (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MinDrawingSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MinDrawingSize (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SourceType (
        /*[out,retval]*/ enum tkShapefileSourceType * pVal ) = 0;
      virtual HRESULT __stdcall BufferByDistance (
        /*[in]*/ double Distance,
        /*[in]*/ long nSegments,
        /*[in]*/ VARIANT_BOOL SelectedOnly,
        /*[in]*/ VARIANT_BOOL MergeResults,
        /*[out,retval]*/ struct IShapefile * * sf ) = 0;
      virtual HRESULT __stdcall get_GeometryEngine (
        /*[out,retval]*/ enum tkGeometryEngine * pVal ) = 0;
      virtual HRESULT __stdcall put_GeometryEngine (
        /*[in]*/ enum tkGeometryEngine pVal ) = 0;
      virtual HRESULT __stdcall Difference (
        /*[in]*/ VARIANT_BOOL SelectedOnlySubject,
        /*[in]*/ struct IShapefile * sfOverlay,
        /*[in]*/ VARIANT_BOOL SelectedOnlyOverlay,
        /*[out,retval]*/ struct IShapefile * * retval ) = 0;
      virtual HRESULT __stdcall Clip (
        /*[in]*/ VARIANT_BOOL SelectedOnlySubject,
        /*[in]*/ struct IShapefile * sfOverlay,
        /*[in]*/ VARIANT_BOOL SelectedOnlyOverlay,
        /*[out,retval]*/ struct IShapefile * * retval ) = 0;
      virtual HRESULT __stdcall SymmDifference (
        /*[in]*/ VARIANT_BOOL SelectedOnlySubject,
        /*[in]*/ struct IShapefile * sfOverlay,
        /*[in]*/ VARIANT_BOOL SelectedOnlyOverlay,
        /*[out,retval]*/ struct IShapefile * * retval ) = 0;
      virtual HRESULT __stdcall Union (
        /*[in]*/ VARIANT_BOOL SelectedOnlySubject,
        /*[in]*/ struct IShapefile * sfOverlay,
        /*[in]*/ VARIANT_BOOL SelectedOnlyOverlay,
        /*[out,retval]*/ struct IShapefile * * retval ) = 0;
      virtual HRESULT __stdcall ExplodeShapes (
        /*[in]*/ VARIANT_BOOL SelectedOnly,
        /*[out,retval]*/ struct IShapefile * * retval ) = 0;
      virtual HRESULT __stdcall AggregateShapes (
        /*[in]*/ VARIANT_BOOL SelectedOnly,
        /*[in]*/ long FieldIndex,
        /*[out,retval]*/ struct IShapefile * * retval ) = 0;
      virtual HRESULT __stdcall ExportSelection (
        /*[out,retval]*/ struct IShapefile * * retval ) = 0;
      virtual HRESULT __stdcall Sort (
        /*[in]*/ long FieldIndex,
        /*[in]*/ VARIANT_BOOL Ascending,
        /*[out,retval]*/ struct IShapefile * * retval ) = 0;
      virtual HRESULT __stdcall Merge (
        /*[in]*/ VARIANT_BOOL SelectedOnlyThis,
        /*[in]*/ struct IShapefile * sf,
        /*[in]*/ VARIANT_BOOL SelectedOnly,
        /*[out,retval]*/ struct IShapefile * * retval ) = 0;
      virtual HRESULT __stdcall get_SelectionColor (
        /*[out,retval]*/ OLE_COLOR * retval ) = 0;
      virtual HRESULT __stdcall put_SelectionColor (
        /*[in]*/ OLE_COLOR retval ) = 0;
      virtual HRESULT __stdcall get_SelectionAppearance (
        /*[out,retval]*/ enum tkSelectionAppearance * retval ) = 0;
      virtual HRESULT __stdcall put_SelectionAppearance (
        /*[in]*/ enum tkSelectionAppearance retval ) = 0;
      virtual HRESULT __stdcall get_CollisionMode (
        /*[out,retval]*/ enum tkCollisionMode * retval ) = 0;
      virtual HRESULT __stdcall put_CollisionMode (
        /*[in]*/ enum tkCollisionMode retval ) = 0;
      virtual HRESULT __stdcall get_SelectionTransparency (
        /*[out,retval]*/ unsigned char * retval ) = 0;
      virtual HRESULT __stdcall put_SelectionTransparency (
        /*[in]*/ unsigned char retval ) = 0;
      virtual HRESULT __stdcall put_StopExecution (
        /*[in]*/ struct IStopExecution * _arg1 ) = 0;
      virtual HRESULT __stdcall Serialize (
        /*[in]*/ VARIANT_BOOL SaveSelection,
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall Deserialize (
        /*[in]*/ VARIANT_BOOL LoadSelection,
        /*[in]*/ BSTR newVal ) = 0;
      virtual HRESULT __stdcall get_GeoProjection (
        /*[out,retval]*/ struct IGeoProjection * * retval ) = 0;
      virtual HRESULT __stdcall put_GeoProjection (
        /*[in]*/ struct IGeoProjection * retval ) = 0;
      virtual HRESULT __stdcall Reproject (
        /*[in]*/ struct IGeoProjection * newProjection,
        /*[in,out]*/ long * reprojectedCount,
        /*[out,retval]*/ struct IShapefile * * retval ) = 0;
      virtual HRESULT __stdcall ReprojectInPlace (
        /*[in]*/ struct IGeoProjection * newProjection,
        /*[in,out]*/ long * reprojectedCount,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall SimplifyLines (
        /*[in]*/ double Tolerance,
        /*[in]*/ VARIANT_BOOL SelectedOnly,
        /*[out,retval]*/ struct IShapefile * * retval ) = 0;
      virtual HRESULT __stdcall FixUpShapes (
        /*[out]*/ struct IShapefile * * retval,
        /*[out,retval]*/ VARIANT_BOOL * fixed ) = 0;
      virtual HRESULT __stdcall EditAddShape (
        /*[in]*/ struct IShape * Shape,
        /*[out,retval]*/ long * ShapeIndex ) = 0;
      virtual HRESULT __stdcall EditAddField (
        /*[in]*/ BSTR Name,
        /*[in]*/ enum FieldType Type,
        /*[in]*/ int Precision,
        /*[in]*/ int Width,
        /*[out,retval]*/ long * FieldIndex ) = 0;
      virtual HRESULT __stdcall HasInvalidShapes (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall get_ShapeCategory2 (
        long ShapeIndex,
        /*[out,retval]*/ BSTR * categoryName ) = 0;
      virtual HRESULT __stdcall put_ShapeCategory2 (
        long ShapeIndex,
        /*[in]*/ BSTR categoryName ) = 0;
      virtual HRESULT __stdcall get_ShapeCategory3 (
        long ShapeIndex,
        /*[out,retval]*/ struct IShapefileCategory * * Category ) = 0;
      virtual HRESULT __stdcall put_ShapeCategory3 (
        long ShapeIndex,
        /*[in]*/ struct IShapefileCategory * Category ) = 0;
};

struct __declspec(uuid("ec594cb1-fa55-469c-b662-192f7a464c23"))
IShapefileCategories : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LastErrorCode (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ErrorMsg (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_GlobalCallback (
        /*[out,retval]*/ struct ICallback * * pVal ) = 0;
      virtual HRESULT __stdcall put_GlobalCallback (
        /*[in]*/ struct ICallback * pVal ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Key (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall Add (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IShapefileCategory * * retval ) = 0;
      virtual HRESULT __stdcall Insert (
        /*[in]*/ long Index,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IShapefileCategory * * retval ) = 0;
      virtual HRESULT __stdcall Remove (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * vbretval ) = 0;
      virtual HRESULT __stdcall Clear ( ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IShapefileCategory * * pVal ) = 0;
      virtual HRESULT __stdcall put_Item (
        /*[in]*/ long Index,
        /*[in]*/ struct IShapefileCategory * pVal ) = 0;
      virtual HRESULT __stdcall Generate (
        /*[in]*/ long FieldIndex,
        /*[in]*/ enum tkClassificationType ClassificationType,
        /*[in]*/ long numClasses,
        /*[out,retval]*/ VARIANT_BOOL * vbretval ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Shapefile (
        /*[out,retval]*/ struct IShapefile * * retval ) = 0;
      virtual HRESULT __stdcall ApplyExpressions ( ) = 0;
      virtual HRESULT __stdcall ApplyExpression (
        /*[in]*/ long CategoryIndex ) = 0;
      virtual HRESULT __stdcall ApplyColorScheme (
        /*[in]*/ enum tkColorSchemeType Type,
        /*[in]*/ struct IColorScheme * ColorScheme ) = 0;
      virtual HRESULT __stdcall ApplyColorScheme2 (
        /*[in]*/ enum tkColorSchemeType Type,
        /*[in]*/ struct IColorScheme * ColorScheme,
        /*[in]*/ enum tkShapeElements ShapeElement ) = 0;
      virtual HRESULT __stdcall ApplyColorScheme3 (
        /*[in]*/ enum tkColorSchemeType Type,
        /*[in]*/ struct IColorScheme * ColorScheme,
        /*[in]*/ enum tkShapeElements ShapeElement,
        /*[in]*/ long CategoryStartIndex,
        /*[in]*/ long CategoryEndIndex ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall MoveUp (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall MoveDown (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall Serialize (
        /*[out,retval]*/ BSTR * retval ) = 0;
      virtual HRESULT __stdcall Deserialize (
        /*[in]*/ BSTR newVal ) = 0;
      virtual HRESULT __stdcall AddRange (
        /*[in]*/ long FieldIndex,
        /*[in]*/ enum tkClassificationType ClassificationType,
        /*[in]*/ long numClasses,
        /*[in]*/ VARIANT MinValue,
        /*[in]*/ VARIANT MaxValue,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_CategoryIndexByName (
        /*[in]*/ BSTR categoryName,
        /*[out,retval]*/ int * CategoryIndex ) = 0;
      virtual HRESULT __stdcall get_CategoryIndex (
        /*[in]*/ struct IShapefileCategory * Category,
        /*[out,retval]*/ int * CategoryIndex ) = 0;
};

struct __declspec(uuid("2d4968f2-40d9-4f25-8be6-b51b959cc1b0"))
IShapeNetwork : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall Build (
        /*[in]*/ struct IShapefile * Shapefile,
        /*[in]*/ long ShapeIndex,
        /*[in]*/ long FinalPointIndex,
        /*[in]*/ double Tolerance,
        /*[in]*/ enum AmbiguityResolution ar,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall DeleteShape (
        /*[in]*/ long ShapeIndex,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall RasterizeD8 (
        /*[in]*/ VARIANT_BOOL UseNetworkBounds,
        /*[in]*/ struct IGridHeader * Header,
        /*[in]*/ double Cellsize,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ struct IGrid * * retval ) = 0;
      virtual HRESULT __stdcall MoveUp (
        /*[in]*/ long UpIndex,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall MoveDown (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall MoveTo (
        /*[in]*/ long ShapeIndex,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall MoveToOutlet (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_Shapefile (
        /*[out,retval]*/ struct IShapefile * * pVal ) = 0;
      virtual HRESULT __stdcall get_CurrentShape (
        /*[out,retval]*/ struct IShape * * pVal ) = 0;
      virtual HRESULT __stdcall get_CurrentShapeIndex (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_DistanceToOutlet (
        /*[in]*/ long PointIndex,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_NumDirectUps (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_NetworkSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_AmbigShapeIndex (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_LastErrorCode (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ErrorMsg (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_GlobalCallback (
        /*[out,retval]*/ struct ICallback * * pVal ) = 0;
      virtual HRESULT __stdcall put_GlobalCallback (
        /*[in]*/ struct ICallback * pVal ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Key (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ParentIndex (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ParentIndex (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall Open (
        /*[in]*/ struct IShapefile * sf,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall Close (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
};

struct __declspec(uuid("360bec33-7703-4693-b6ca-90fea22cf1b7"))
IUtils : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall PointInPolygon (
        /*[in]*/ struct IShape * Shp,
        /*[in]*/ struct IPoint * TestPoint,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall GridReplace (
        /*[in]*/ struct IGrid * Grd,
        /*[in]*/ VARIANT OldValue,
        /*[in]*/ VARIANT newValue,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall GridInterpolateNoData (
        /*[in]*/ struct IGrid * Grd,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall RemoveColinearPoints (
        /*[in]*/ struct IShapefile * Shapes,
        /*[in]*/ double LinearTolerance,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[in]*/ struct IShape * Shape,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Perimeter (
        /*[in]*/ struct IShape * Shape,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Area (
        /*[in]*/ struct IShape * Shape,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_LastErrorCode (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ErrorMsg (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_GlobalCallback (
        /*[out,retval]*/ struct ICallback * * pVal ) = 0;
      virtual HRESULT __stdcall put_GlobalCallback (
        /*[in]*/ struct ICallback * pVal ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Key (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall ClipPolygon (
        /*[in]*/ enum PolygonOperation op,
        /*[in]*/ struct IShape * SubjectPolygon,
        /*[in]*/ struct IShape * ClipPolygon,
        /*[out,retval]*/ struct IShape * * retval ) = 0;
      virtual HRESULT __stdcall GridMerge (
        /*[in]*/ VARIANT Grids,
        /*[in]*/ BSTR MergeFilename,
        /*[in]*/ VARIANT_BOOL InRam,
        /*[in]*/ enum GridFileType GrdFileType,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ struct IGrid * * retval ) = 0;
      virtual HRESULT __stdcall ShapeMerge (
        /*[in]*/ struct IShapefile * Shapes,
        /*[in]*/ long IndexOne,
        /*[in]*/ long IndexTwo,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ struct IShape * * retval ) = 0;
      virtual HRESULT __stdcall GridToImage (
        /*[in]*/ struct IGrid * Grid,
        /*[in]*/ struct IGridColorScheme * cScheme,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ struct IImage * * retval ) = 0;
      virtual HRESULT __stdcall GridToShapefile (
        /*[in]*/ struct IGrid * Grid,
        /*[in]*/ struct IGrid * ConnectionGrid,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ struct IShapefile * * retval ) = 0;
      virtual HRESULT __stdcall GridToGrid (
        /*[in]*/ struct IGrid * Grid,
        /*[in]*/ enum GridDataType OutDataType,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ struct IGrid * * retval ) = 0;
      virtual HRESULT __stdcall ShapeToShapeZ (
        /*[in]*/ struct IShapefile * Shapefile,
        /*[in]*/ struct IGrid * Grid,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ struct IShapefile * * retval ) = 0;
      virtual HRESULT __stdcall TinToShapefile (
        /*[in]*/ struct ITin * Tin,
        /*[in]*/ enum ShpfileType Type,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ struct IShapefile * * retval ) = 0;
      virtual HRESULT __stdcall ShapefileToGrid (
        /*[in]*/ struct IShapefile * Shpfile,
        /*[in]*/ VARIANT_BOOL UseShapefileBounds,
        /*[in]*/ struct IGridHeader * GrdHeader,
        /*[in]*/ double Cellsize,
        /*[in]*/ VARIANT_BOOL UseShapeNumber,
        /*[in]*/ short SingleValue,
        /*[out,retval]*/ struct IGrid * * retval ) = 0;
      virtual HRESULT __stdcall hBitmapToPicture (
        /*[in]*/ long hBitmap,
        /*[out,retval]*/ IPictureDisp * * retval ) = 0;
      virtual HRESULT __stdcall GenerateHillShade (
        /*[in]*/ BSTR bstrGridFilename,
        /*[in]*/ BSTR bstrShadeFilename,
        /*[in]*/ float Z,
        /*[in]*/ float scale,
        /*[in]*/ float az,
        /*[in]*/ float alt,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall GenerateContour (
        /*[in]*/ BSTR pszSrcFilename,
        /*[in]*/ BSTR pszDstFilename,
        /*[in]*/ double dfInterval,
        /*[in]*/ double dfNoData,
        /*[in]*/ VARIANT_BOOL Is3D,
        /*[in]*/ VARIANT dblFLArray,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall TranslateRaster (
        /*[in]*/ BSTR bstrSrcFilename,
        /*[in]*/ BSTR bstrDstFilename,
        /*[in]*/ BSTR bstrOptions,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall OGRLayerToShapefile (
        /*[in]*/ BSTR Filename,
        /*[in]*/ enum ShpfileType ShpType,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ struct IShapefile * * sf ) = 0;
      virtual HRESULT __stdcall MergeImages (
        /*[in]*/ SAFEARRAY * InputNames,
        /*[in]*/ BSTR OutputName,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall ReprojectShapefile (
        /*[in]*/ struct IShapefile * sf,
        /*[in]*/ struct IGeoProjection * source,
        /*[in]*/ struct IGeoProjection * target,
        /*[out,retval]*/ struct IShapefile * * Result ) = 0;
      virtual HRESULT __stdcall ColorByName (
        /*[in]*/ enum tkMapColor Name,
        /*[out,retval]*/ OLE_COLOR * retval ) = 0;
      virtual HRESULT __stdcall ClipGridWithPolygon (
        /*[in]*/ BSTR inputGridfile,
        /*[in]*/ struct IShape * poly,
        /*[in]*/ BSTR resultGridfile,
        /*[in]*/ VARIANT_BOOL keepExtents,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall ClipGridWithPolygon2 (
        /*[in]*/ struct IGrid * inputGrid,
        /*[in]*/ struct IShape * poly,
        /*[in]*/ BSTR resultGridfile,
        /*[in]*/ VARIANT_BOOL keepExtents,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall GridStatisticsToShapefile (
        /*[in]*/ struct IGrid * Grid,
        /*[in]*/ struct IShapefile * sf,
        /*[in]*/ VARIANT_BOOL SelectedOnly,
        /*[in]*/ VARIANT_BOOL overwriteFields,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall Polygonize (
        /*[in]*/ BSTR pszSrcFilename,
        /*[in]*/ BSTR pszDstFilename,
        /*[in]*/ int iSrcBand,
        /*[in]*/ VARIANT_BOOL NoMask,
        /*[in]*/ BSTR pszMaskFilename,
        /*[in]*/ BSTR pszOGRFormat,
        /*[in]*/ BSTR pszDstLayerName,
        /*[in]*/ BSTR pszPixValFieldName,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall GDALInfo (
        /*[in]*/ BSTR bstrSrcFilename,
        /*[in]*/ BSTR bstrOptions,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ BSTR * bstrInfo ) = 0;
      virtual HRESULT __stdcall GDALWarp (
        /*[in]*/ BSTR bstrSrcFilenames,
        /*[in]*/ BSTR bstrDstFilename,
        /*[in]*/ BSTR bstrOptions,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall GDALBuildVrt (
        /*[in]*/ BSTR bstrDstFilename,
        /*[in]*/ BSTR bstrOptions,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall GDALAddOverviews (
        /*[in]*/ BSTR bstrSrcFilename,
        /*[in]*/ BSTR bstrOptions,
        /*[in]*/ BSTR bstrLevels,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall GDALRasterize (
        /*[in]*/ BSTR bstrSrcFilename,
        /*[in]*/ BSTR bstrDstFilename,
        /*[in]*/ BSTR bstrOptions,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall OGRInfo (
        /*[in]*/ BSTR bstrSrcFilename,
        /*[in]*/ BSTR bstrOptions,
        /*[in]*/ BSTR bstrLayers,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ BSTR * bstrInfo ) = 0;
      virtual HRESULT __stdcall OGR2OGR (
        /*[in]*/ BSTR bstrSrcFilename,
        /*[in]*/ BSTR bstrDstFilename,
        /*[in]*/ BSTR bstrOptions,
        /*[in]*/ struct ICallback * cBack,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall MaskRaster (
        /*[in]*/ BSTR Filename,
        /*[in]*/ unsigned char newPerBandValue,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall CopyNodataValues (
        /*[in]*/ BSTR sourceFilename,
        /*[in]*/ BSTR destFilename,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
};

} // namespace MapWinGIS

#pragma pack(pop)
