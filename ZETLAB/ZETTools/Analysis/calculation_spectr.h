/**********************************************************************************************************
* Вычисление спектра
***********************************************************************************************************/

#pragma once

namespace calculation 
{
	//!-----------------------------------------------------------------------------------------------------
	//! Тип преобразования Фурье
	enum FTTYPE
	{
		FFT = 0,		//! Быстрое преобразование Фурье, размер источника должен быть кратен степени 2
		DFT = 1			//! Дискретное проеобразование Фурье, размер источника может быть произвольный
	};

	//!-----------------------------------------------------------------------------------------------------
	//! Множество весовых оконных функций
	enum WINTYPE
	{
		WIN_RECTANGLE = 0,				//!
		WIN_HANN = 1,					//!
		WIN_HANNING = 2,				//!
		WIN_HAMMING = 3,				//!
		WIN_BLACKMAN = 4,				//!
		WIN_BARTLETT = 5,				//!
		WIN_KAIZER = 6,					//!
		WIN_RIFE_VINCENT_4 = 7,			//!
		WIN_BLACKMAN_HARRIS_3 = 8,		//!
		WIN_BLACKMAN_HARRIS_4 = 9,		//!
		WIN_NUTTALL = 10,				//!
		WIN_BLACKMAN_NUTTALL = 11,		//!
		WIN_FLAT_TOP = 12				//!
	};

	//!-----------------------------------------------------------------------------------------------------
	//! Тип представления спектра
	enum SPECTRTYPE
	{
		SPECTR_RMS = 0,			//! среднеквадратичные значения
		SPECTR_PEAK = 1,		//! пиковые значения
		SPECTR_DENSITY = 2,		//! спектральная плотность
		SPECTR_POWER = 3		//! спектральная мощность
	};

	//!-----------------------------------------------------------------------------------------------------
	//! Тип выходных значений
	enum SCALETYPE
	{
		SCALE_LIN = 0,			//! линейный масштаб спектральных отсчётов
		SCALE_LOG = 1			//! логарифмический масштаб спектральных отсчётов (дБ)
	};

	//!-----------------------------------------------------------------------------------------------------
	//! Структура с параметрами преобразования
	typedef struct _FT_PARAMETRS
	{
		long _size;		//! Размер входного и выходого массивов
		FTTYPE _type;	//! Тип преобразования
		WINTYPE _win;	//! Весовая функция

	} FT_PARAMETERS, *PFT_PARAMETERS;

	//!-----------------------------------------------------------------------------------------------------
	//! Структура с параметрами для вычисления спектра
	typedef struct _SPECTR_PARAMETERS : FT_PARAMETERS
	{
		float _sampling;	//! Частота дискретизации сигнала
		float _resolution;	//! Частотное разрешение спектра
		float _overlay;		//! Степень перекрытия спектров (0 - без перекрытия, 0.5 - 50% перекрытие, 0.9 - максимальное)
		double _average;	//! Время усреднения вычисляемых спектров
		SPECTRTYPE _spectr;	//!
		SCALETYPE _scale;	//!
	} SPECTR_PARAMETERS, *PSPECTR_PARAMETERS;

	//!-----------------------------------------------------------------------------------------------------
	//! Функция вычисления преобразования Фурье
	long calculate_ft(float *pin, float *pout, FT_PARAMETERS *params);

	//!-----------------------------------------------------------------------------------------------------
	//! Функция вычисления спектра
	long calculate_spectr(float* data, long data_size, double data_time, float *spectr, long &spectr_size, double &spectr_time, SPECTR_PARAMETERS params);

}