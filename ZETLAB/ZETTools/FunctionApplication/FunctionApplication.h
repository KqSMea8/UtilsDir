//------------------------------------------------------------------------------
#pragma once
//------------------------------------------------------------------------------
#include "afx.h"
#include <vector>
#include <set>
//------------------------------------------------------------------------------
struct findHWND
{
	DWORD processID;
	std::vector<HWND> *pvector;
	findHWND()
		: processID(0)
		, pvector(nullptr)
	{
	}
};
//------------------------------------------------------------------------------
struct findHWNDset
{
	DWORD processID;
	std::set<HWND> *pset;
	findHWNDset()
		: processID(0)
		, pset(nullptr)
	{
	}
};
//------------------------------------------------------------------------------
// Поиск главного окна в векторе.
// Главное окно, это окно у которого нет родителя.
// Если таких несколько, то, первое видимое окно считаем главным.
//
// Возвращаемое значение:
// Если размер вертора = 1, то возвращаю HWND единственного окна.
// Иначе HWND найденного окна, или 0, если поиск неудачный.
//
HWND FindHwndInVector(std::vector<HWND> * pvect);
//------------------------------------------------------------------------------
// Проверка окна по отклику на предмет активнорсти.
// hWin - проверяемое окно;
// TimeOut - максимальное время ожидания отклика, мсек.
// 
// Возвращаемое значение:
// -1 - такого окна нет;
//	0 - окно отвечает на запросы;
//	1 - окно не отвечает на запросы (его процесс завис?).
//
long IsProcessHung(HWND hWin, UINT TimeOut);
//------------------------------------------------------------------------------
// Поиск окна по его заголовку.
// title - текст заголовка;
// bFullOverlap = true => title - это полный заголовок;
// bFullOverlap = false => title - это часть заголовка.
//
HWND FindWindowFromTitle(const CString & title, bool bFullOverlap = true);
//------------------------------------------------------------------------------
// Поиск главного окна по ID процесса.
// Определение гдавного окна в функции FindHwndInVector.
// ProcessID - ID процесса;
// pVector - вектор для всех дескрипторов окон, созданных этим процессом.
//
// Возвращаемое значение:
// HWND найденного окна, или 0, если поиск неудачный.
//
HWND FindWindowFromProcessID(DWORD ProcessID, std::vector<HWND> * pVector = nullptr);
//------------------------------------------------------------------------------
// Поиск главного окна по ID потока.
// Определение гдавного окна в функции FindHwndInVector.
// threadID - ID потока;
// pVector - вектор для всех дескрипторов окон, созданных этим потоком,
//			в соответствии с заданными флагами;
// bVisible - нужны/не нужны окна, которые видимые
// bInvisible - нужны/не нужны окна, которые не видимые.
//
// Возвращаемое значение:
// HWND найденного окна, или 0, если поиск неудачный.
//
HWND FindWindowFromThreadID(const DWORD threadID,
	std::vector<HWND> * pVector = nullptr,
	const bool bVisible = true, const bool bInvisible = false);
//------------------------------------------------------------------------------
// Проверка есть-ли процесс с заданным именем exe-ки
// name - имя exe-файла (можно без ".exe");
// pParentID - указатель для ID родителя найденного процесса.
//
// Возвращаемое значение:
//	0 - процесс не найден;
//	!0 - ID найденного процесса.
//
DWORD IsProcess(const CString & name, DWORD * pParentID = nullptr);
//------------------------------------------------------------------------------
// Определение ID процесса, владеющим некоторым окном
// hWnd - HWND этотго окна;
// pParentProcessID - указатель для ID родителя найденного процесса.
//
// Возвращаемое значение:
//	0 - процесс не найден;
//	!0 - ID найденного процесса.
//
DWORD IsProcess(_In_ HWND hWnd, _Inout_opt_ DWORD * pParentProcessID = nullptr);
//------------------------------------------------------------------------------
// Количество запущенных процессов с заданным именем exe-ки
// name - имя exe-файла (можно без ".exe");
// ProcessID - ID последнего запущенного процесса.
//
int NumberOfProcess(const CString & name, DWORD * ProcessID = nullptr);
//------------------------------------------------------------------------------
// Поиск всех окон приложения
void FindAllWindowFromThreadID(
	const DWORD threadID,			// идентификатор потока
	std::set<HWND> & pset);			// HWND найденных окон

// Посылка PostMessage всем окнам из set
void PostMessageForAllWindows(const std::set<HWND> & set, const UINT msg,
	const WPARAM wParam, const LPARAM lParam);

// Установки видимости всем окнам
void ShowAllWindow(const std::set<HWND> & set, const int nShow);

// получение имени Exe-шки из ее HWND
CString GetProgramNameFromHWND(_In_ HWND hWnd);

// получение имени Exe-шки из ее номера процесса
CString GetProgramNameFromProcessID(_In_ DWORD ProcessID);
//------------------------------------------------------------------------------