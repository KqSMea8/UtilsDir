//--------------------------------------------------------------------------
//	Файл OncePacketDWT.h
//	Версия от 29.08.2014
//	Зеленоград, ЗАО "ЭТМС", Савостин Ю.М.
//--------------------------------------------------------------------------
//		Класс предназначен для расчёта коэффициентов дискретного вейвлет-
// преобразования (Fast Discrete Wavelet Transform) интервала одномерных
// сигналов в соответствии с пакетным алгоритмом.
//		Класс является наследником базового класса CCustomPacketFDWT.
//		В классе создаются двухмерные массивы типа float для коэффициентов
// FDWT для всех уровней. Кол-во массивов зависит от уровня разложения,
// размер массивов - от размера исходного сигнала.
//		Прямое преобразование. Размер входных данных задаётся функциями
// базового класса CCustomFDWT или при выполнении Create. Указатель на
// маасив исходных данных - это параметр функции Forward. Результат
// преобразования - это данные в разных частотных полосах. Кол-во полос, их
// граничные частоты и сами данные доступны с помощью членов базового
// класса CCustomPacketFDWT (данные - с помощью указателя m_ppBandData).
//		Обратное преобразование. Исходные данные - это данные частотных
// полос, полученные в результате прямого преобразования. Восстановленный
// сигнал доступен через указатели m_pSignalInv или m_pSignal
// (в зависимости) от типа функции Inverse, выполняющей обратное FDWT.
//		В классе используются функции библитеки IPP 7.0.
//--------------------------------------------------------------------------
#pragma once
#include "afx.h"
#include "float.h"
#include <ippFDWT\CustomPacketFDWT.h>
//--------------------------------------------------------------------------
class COncePacketFDWT : public CCustomPacketFDWT
{
private:
	int sizeSignalInv;	// размер буфера m_pSignalInv
	float *pValThreshold;	// массив порогов для каждой полосы нижнего уровня
	bool _Inverse(float *pdata);	// обратное FDWT на все случаи

protected:
	float ***pppBuf;	// двумерный массив коэффициентов FDWT
	bool CreateBuf();	// создание этого массива
	void DeleteBuf();	// удаление этого массива

public:
	COncePacketFDWT(void);
	virtual ~COncePacketFDWT(void);
	virtual long Create(TypeWavelet typeWavelet, int level,
		bool bneedInverse, int lengthSignal);

	// Виртуальные функции для реализации побочных свойств, т.е.
	virtual void NewLevel();		// кол-ва и размер двумерного
	virtual void NewLengthSignal();	// массива коэффициентов FDWT

	// методы чтения/записи свойств -----------------

	// методы класса --------------------------------
	// ВАЖНО проверять возвращаемые значения!!!
	bool Forward(float *pData);		// прямое FDWT
	bool Inverse();			// обратное FDWT, результат в m_pSignalInv
	bool Inverse_I();		// обратное FDWT, результат в m_pSignal
	bool ReStart();			// переинициализация всех структур и
							//		обнуление всех буферов	
	// указатель на внутренний буфер исходного сигнала, размер которого
	// равен m_pSize[0] и который может быть больше заявленного размера
	// исходных данных
	float *m_pSignal;
	// указатель на внутренний буфер восстановленного сигнала, размер
	// которого равен m_pSize[0] и который может быть больше заявленного
	// размера исходных данных
	float *m_pSignalInv;

	// использовать при расчётах линии задержки из хвоста или нет
	bool m_bDlyLineForward;		// по умолчанию true

	bool CalcThreshold(const int n0, const int n1, float *pThreshold = NULL);
	bool CalcForCompression(
		const float percent, float *pValueThreshold = NULL);
	bool FactorsUnderThreshold(float *pThreshold = NULL);
	bool CalcForSmoothing();
};
//--------------------------------------------------------------------------

