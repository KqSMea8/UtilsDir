//--------------------------------------------------------------------------
//	Файл TimePacketDWT.h
//	Зеленоград, ЗАО "ЭТМС", Савостин Ю.М.
//--------------------------------------------------------------------------
//		Класс предназначен для расчёта коэффициентов дискретного вейвлет-
// преобразования (Fast Discrete Wavelet Transform) потоковых одномерных
// сигналов в соответствии с пакетным алгоритмом.
//		Класс является наследником базового класса CCustomPacketFDWT.
//		В классе создаются двухмерные массивы типа CShiftBuffer <float>
// для коэффициентов FDWT для всех уровней. Кол-во массивов зависит от
// уровня разложения, размер массивов - от размера исходного сигнала.
//		Прямое преобразование. Размер входных данных задаётся функциями
// базового класса CCustomFDWT или при выполнении Create. Указатель на
// маасив исходных данных - это параметр функции Forward. Результат
// преобразования - это данные в разных частотных полосах. Кол-во полос, их
// граничные частоты и сами данные доступны с помощью членов базового
// класса CCustomPacketFDWT (данные - с помощью указателя m_ppBandData).
//		В классе используются функции библитеки IPP 7.0.
//--------------------------------------------------------------------------
#pragma once
#include "afx.h"
#include <Buffer\ShiftBuffer.h>
#include <ippFDWT\CustomPacketFDWT.h>
//--------------------------------------------------------------------------
class CTimePacketFDWT : public CCustomPacketFDWT
{
private:
	float ***pppBuf;	// двумерный массив коэффициентов FDWT
	bool CreateBuf();	// создание этого массива
	void DeleteBuf();	// удаление этого массива
	void SetpSizePage();		// задание массива размеров страниц
	int FSizePageInLastLevel;	// размер страницы данных для
								// верхнего уровня разложения
protected:

public:
	CTimePacketFDWT(void);
	virtual ~CTimePacketFDWT(void);
	virtual long Create(TypeWavelet typeWavelet, int level,
		bool bneedInverse = false, int sizePageInLastLevel = 1);
	
	bool m_bAbsTypeDataLastLevel;
	int m_pSizePage[32];	// массив размерностей данных для всех уровней
	// указатель на внутренний буфер, содержащий данные последнего уровня
	// по одной точке с каждой полосы. Размер = m_pSize[FLevel]
	float *m_pDataLastLevel;

	// Виртуальные функции для реализации побочных свойств
	virtual void NewLevel();		// кол-ва и размер двумерного
//	virtual void NewLengthSignal();	// массива коэффициентов FDWT

	// методы класса ----------------------------
	// ВАЖНО проверять возвращаемые значения!!!
	bool Forward(float *pData);		// прямое FDWT
	int GetSizeDataLastLevel() { return m_pNumBand[FLevel]; }
	int GetSizePageSignal() { return *m_pSizePage; }
	bool ReStart();			// переинициализация всех структур и
};							//		обнуление всех буферов
//--------------------------------------------------------------------------