//------------------------------------------------------------------------------
#ifndef DELEGATERET_H
#define DELEGATERET_H
//------------------------------------------------------------------------------
//		Шаблонный класс СDelegateRet - это реализация делегата для вызова ОДНОЙ
// функции произвольного класса.
//------------------------------------------------------------------------------
//		Идея взята из Event.h (спасибо А. Лаптеву), из которого было
// удалено лишние. Добавлены передача параметров по указателю и возможность
// использования функций, которые что-то возвращают.
//		Данный класс удобен в случаях, когда требуется вызывать разные
// функции из некоторого перечня. И/или когда вызываемые функции
// принадлежат разным классам из перечня классов.
//		Перечни могут состоять и из одного элемента. Тогда получаем
// вызов функции какого-то класса из произвольного места (например: из
// рабочего потока).
//		Пример использования класса см. в DelegateRet_help.h.
//------------------------------------------------------------------------------
template <typename Ret, typename Arg>
class СDelegateRet
{
private:
	struct X {};
	typedef Ret (X::*Func)(Arg*);
	X *_ptr;
	Func _func;

public:
	СDelegateRet()
	{
		_ptr = NULL;
		_func = NULL;
	}

	template <class Owner>
	СDelegateRet(Owner *owner, Ret (Owner::*func)(Arg*))
	{
		_ptr  = reinterpret_cast<X *> (owner);
		_func = reinterpret_cast<Func>(func);
	}

	virtual ~СDelegateRet() {}

	Ret operator() (Arg *pArg = NULL) const
	{	// Вызов функции. Параметры передаются по указателю.
		//
		// При работе с функциями, которые что-либо возвращют, компилятоор
		// будет выдавать предупреждение, о том, что значение возвращается не
		// при всех путях компиляции (работать всё равно будет).
		// По другому использовать функции, возвращающие void, не получилось.
		if (_ptr && _func)
			return (_ptr->*_func)(pArg);
	}
};
//------------------------------------------------------------------------------
#endif
//------------------------------------------------------------------------------