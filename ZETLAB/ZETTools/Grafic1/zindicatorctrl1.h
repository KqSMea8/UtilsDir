#pragma once

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CZindicatorctrl1 wrapper class

class CZindicatorctrl1 : public CWnd
{
protected:
	DECLARE_DYNCREATE(CZindicatorctrl1)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xAC57B299, 0x749C, 0x4D02, { 0x81, 0xB3, 0x1A, 0x8D, 0x1B, 0xB9, 0xC0, 0xE9 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle,
						const RECT& rect, CWnd* pParentWnd, UINT nID, 
						CCreateContext* pContext = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
	}

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, 
				UINT nID, CFile* pPersist = NULL, BOOL bStorage = FALSE,
				BSTR bstrLicKey = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); 
	}

// Attributes
public:


// Operations
public:

// _DZIndicator

// Functions
//

	void AboutBox()
	{
		InvokeHelper(DISPID_ABOUTBOX, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void SetIndValue(float Value)
	{
		static BYTE parms[] = VTS_R4 ;
		InvokeHelper(0xd, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Value);
	}
	long EnaWindow(long enable)
	{
		long result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x10, DISPATCH_METHOD, VT_I4, (void*)&result, parms, enable);
		return result;
	}
	long StepUpDown(float step)
	{
		long result;
		static BYTE parms[] = VTS_R4 ;
		InvokeHelper(0x11, DISPATCH_METHOD, VT_I4, (void*)&result, parms, step);
		return result;
	}
	float GetStepUpDown()
	{
		float result;
		InvokeHelper(0x12, DISPATCH_METHOD, VT_R4, (void*)&result, NULL);
		return result;
	}

// Properties
//

BOOL GetBevelUp()
{
	BOOL result;
	GetProperty(0x1, VT_BOOL, (void*)&result);
	return result;
}
void SetBevelUp(BOOL propVal)
{
	SetProperty(0x1, VT_BOOL, propVal);
}
BOOL GetBevelDown()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}
void SetBevelDown(BOOL propVal)
{
	SetProperty(0x2, VT_BOOL, propVal);
}
BOOL GetBevelLeft()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}
void SetBevelLeft(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}
BOOL GetBevelRight()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}
void SetBevelRight(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}
unsigned long GetClrText()
{
	unsigned long result;
	GetProperty(0x5, VT_UI4, (void*)&result);
	return result;
}
void SetClrText(unsigned long propVal)
{
	SetProperty(0x5, VT_UI4, propVal);
}
unsigned long GetClrBgr()
{
	unsigned long result;
	GetProperty(0x6, VT_UI4, (void*)&result);
	return result;
}
void SetClrBgr(unsigned long propVal)
{
	SetProperty(0x6, VT_UI4, propVal);
}
BOOL GetBold()
{
	BOOL result;
	GetProperty(0x7, VT_BOOL, (void*)&result);
	return result;
}
void SetBold(BOOL propVal)
{
	SetProperty(0x7, VT_BOOL, propVal);
}
BOOL GetItalic()
{
	BOOL result;
	GetProperty(0x8, VT_BOOL, (void*)&result);
	return result;
}
void SetItalic(BOOL propVal)
{
	SetProperty(0x8, VT_BOOL, propVal);
}
CString GetFontFace()
{
	CString result(L"");
	GetProperty(0x9, VT_BSTR, (void*)&result);
	return result;
}
void SetFontFace(CString propVal)
{
	SetProperty(0x9, VT_BSTR, propVal);
}
float GetMax()
{
	float result;
	GetProperty(0xa, VT_R4, (void*)&result);
	return result;
}
void SetMax(float propVal)
{
	SetProperty(0xa, VT_R4, propVal);
}
float GetMin()
{
	float result;
	GetProperty(0xb, VT_R4, (void*)&result);
	return result;
}
void SetMin(float propVal)
{
	SetProperty(0xb, VT_R4, propVal);
}
float GetValue()
{
	float result;
	GetProperty(0xc, VT_R4, (void*)&result);
	return result;
}
void SetValue(float propVal)
{
	SetProperty(0xc, VT_R4, propVal);
}
short GetNumCnt()
{
	short result;
	GetProperty(0xe, VT_I2, (void*)&result);
	return result;
}
void SetNumCnt(short propVal)
{
	SetProperty(0xe, VT_I2, propVal);
}
short GetNumDivCnt()
{
	short result;
	GetProperty(0xf, VT_I2, (void*)&result);
	return result;
}
void SetNumDivCnt(short propVal)
{
	SetProperty(0xf, VT_I2, propVal);
}


};
