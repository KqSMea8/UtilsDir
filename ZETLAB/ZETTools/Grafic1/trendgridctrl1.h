#pragma once

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CTrendgridctrl1 wrapper class

class CTrendgridctrl1 : public CWnd
{
protected:
	DECLARE_DYNCREATE(CTrendgridctrl1)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x2DD64D2F, 0x88C8, 0x4CA2, { 0x8A, 0x32, 0x4E, 0xDA, 0xD6, 0x10, 0x17, 0x6 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle,
						const RECT& rect, CWnd* pParentWnd, UINT nID, 
						CCreateContext* pContext = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
	}

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, 
				UINT nID, CFile* pPersist = NULL, BOOL bStorage = FALSE,
				BSTR bstrLicKey = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); 
	}

// Attributes
public:


// Operations
public:

// _DZetTrendGrid

// Functions
//

	short Display()
	{
		short result;
		InvokeHelper(0x2e, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	long ShowPropSheet()
	{
		long result;
		InvokeHelper(0x36, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long OutWindPtr(signed char * ptr)
	{
		long result;
		static BYTE parms[] = VTS_PI1 ;
		InvokeHelper(0x37, DISPATCH_METHOD, VT_I4, (void*)&result, parms, ptr);
		return result;
	}
	long InWindPtr(signed char * ptr)
	{
		long result;
		static BYTE parms[] = VTS_PI1 ;
		InvokeHelper(0x38, DISPATCH_METHOD, VT_I4, (void*)&result, parms, ptr);
		return result;
	}
	void PushDataToClipBoard()
	{
		InvokeHelper(0x3d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void DrawPicture(unsigned long hdc, long x, long y, long width, long height)
	{
		static BYTE parms[] = VTS_UI4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 ;
		InvokeHelper(0x3e, DISPATCH_METHOD, VT_EMPTY, NULL, parms, hdc, x, y, width, height);
	}
	BOOL AddToolTip(LPCTSTR text, long pos)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I4 ;
		InvokeHelper(0x41, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, text, pos);
		return result;
	}
	BOOL RemoveAllToolTips()
	{
		BOOL result;
		InvokeHelper(0x42, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	long SaveGridToFile(LPCTSTR FileName)
	{
		long result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x45, DISPATCH_METHOD, VT_I4, (void*)&result, parms, FileName);
		return result;
	}
	VARIANT GetStructColors()
	{
		VARIANT result;
		InvokeHelper(0x51, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	long ChangeColor(double TypeNumber, unsigned long NewColor)
	{
		long result;
		static BYTE parms[] = VTS_R8 VTS_UI4 ;
		InvokeHelper(0x52, DISPATCH_METHOD, VT_I4, (void*)&result, parms, TypeNumber, NewColor);
		return result;
	}
	void ValidType(long number, long valid)
	{
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0x53, DISPATCH_METHOD, VT_EMPTY, NULL, parms, number, valid);
	}
	long SetGradienColor(double MinColor, double MaxColor, long Type)
	{
		long result;
		static BYTE parms[] = VTS_R8 VTS_R8 VTS_I4 ;
		InvokeHelper(0x54, DISPATCH_METHOD, VT_I4, (void*)&result, parms, MinColor, MaxColor, Type);
		return result;
	}
	long AutoColor()
	{
		long result;
		InvokeHelper(0x55, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long AutoColorAll()
	{
		long result;
		InvokeHelper(0x57, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	VARIANT FillDefaultColorsVect(long Count)
	{
		VARIANT result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x58, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, Count);
		return result;
	}
	void DisplayAllData()
	{
		InvokeHelper(0x59, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void ValidID(long _Type_Number, long _ID_Number, long _Valid)
	{
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 ;
		InvokeHelper(0x5a, DISPATCH_METHOD, VT_EMPTY, NULL, parms, _Type_Number, _ID_Number, _Valid);
	}
	void AutoScaleVisible()
	{
		InvokeHelper(0x5c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void AutoScaleAll()
	{
		InvokeHelper(0x5d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void Paint(VARIANT Headers, VARIANT FieldsValues, VARIANT Colors, VARIANT Indent)
	{
		static BYTE parms[] = VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT ;
		InvokeHelper(0x5f, DISPATCH_METHOD, VT_EMPTY, NULL, parms, &Headers, &FieldsValues, &Colors, &Indent);
	}
	void CancelCurrentSelection()
	{
		InvokeHelper(0x60, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void SetSplitFieldsName(BSTR * Names, long Count)
	{
		static BYTE parms[] = VTS_PBSTR VTS_I4 ;
		InvokeHelper(0x62, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Names, Count);
	}
	void ClearAllData()
	{
		InvokeHelper(0x63, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long SetColorLineCount(long Count)
	{
		long result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x64, DISPATCH_METHOD, VT_I4, (void*)&result, parms, Count);
		return result;
	}
	long SetColorLineFont(long number, unsigned long _Color)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_UI4 ;
		InvokeHelper(0x65, DISPATCH_METHOD, VT_I4, (void*)&result, parms, number, _Color);
		return result;
	}
	long SetColorLineName(long number, LPCTSTR Name)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_BSTR ;
		InvokeHelper(0x66, DISPATCH_METHOD, VT_I4, (void*)&result, parms, number, Name);
		return result;
	}
	long SetColorLineSpans(long number, DATE * DateBeginArray, DATE * DateEndArray, unsigned long * ColorsArray, long ArraySize)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_PDATE VTS_PDATE VTS_PUI4 VTS_I4 ;
		InvokeHelper(0x67, DISPATCH_METHOD, VT_I4, (void*)&result, parms, number, DateBeginArray, DateEndArray, ColorsArray, ArraySize);
		return result;
	}
	float get_HorCursorPos(long Cursor_Number)
	{
		float result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms, Cursor_Number);
		return result;
	}
	void put_HorCursorPos(long Cursor_Number, float newValue)
	{
		static BYTE parms[] = VTS_I4 VTS_R4;
		InvokeHelper(0x68, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, Cursor_Number, newValue);
	}
	DATE get_VertCursorPos(long Cursor_Number)
	{
		DATE result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_DATE, (void*)&result, parms, Cursor_Number);
		return result;
	}
	void put_VertCursorPos(long Cursor_Number, DATE newValue)
	{
		static BYTE parms[] = VTS_I4 VTS_DATE;
		InvokeHelper(0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, Cursor_Number, newValue);
	}
	long AddMark(DATE Time, LPCTSTR MarkText, unsigned long MarkColor)
	{
		long result;
		static BYTE parms[] = VTS_DATE VTS_BSTR VTS_UI4 ;
		InvokeHelper(0x6a, DISPATCH_METHOD, VT_I4, (void*)&result, parms, Time, MarkText, MarkColor);
		return result;
	}
	void DeleteMark(long number)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x6b, DISPATCH_METHOD, VT_EMPTY, NULL, parms, number);
	}
	long GetMarkCount()
	{
		long result;
		InvokeHelper(0x6c, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	DATE GetMarkTime(long number)
	{
		DATE result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x6d, DISPATCH_METHOD, VT_DATE, (void*)&result, parms, number);
		return result;
	}

// Properties
//

unsigned long GetClrFon()
{
	unsigned long result;
	GetProperty(0x1, VT_UI4, (void*)&result);
	return result;
}
void SetClrFon(unsigned long propVal)
{
	SetProperty(0x1, VT_UI4, propVal);
}
unsigned long GetClrGrd()
{
	unsigned long result;
	GetProperty(0x3, VT_UI4, (void*)&result);
	return result;
}
void SetClrGrd(unsigned long propVal)
{
	SetProperty(0x3, VT_UI4, propVal);
}
unsigned long GetClrCrs()
{
	unsigned long result;
	GetProperty(0x4, VT_UI4, (void*)&result);
	return result;
}
void SetClrCrs(unsigned long propVal)
{
	SetProperty(0x4, VT_UI4, propVal);
}
unsigned long GetClrDig()
{
	unsigned long result;
	GetProperty(0x5, VT_UI4, (void*)&result);
	return result;
}
void SetClrDig(unsigned long propVal)
{
	SetProperty(0x5, VT_UI4, propVal);
}
double GetXfirst()
{
	double result;
	GetProperty(0xb, VT_R8, (void*)&result);
	return result;
}
void SetXfirst(double propVal)
{
	SetProperty(0xb, VT_R8, propVal);
}
double GetXend()
{
	double result;
	GetProperty(0xc, VT_R8, (void*)&result);
	return result;
}
void SetXend(double propVal)
{
	SetProperty(0xc, VT_R8, propVal);
}
double GetMathlx()
{
	double result;
	GetProperty(0xd, VT_R8, (void*)&result);
	return result;
}
void SetMathlx(double propVal)
{
	SetProperty(0xd, VT_R8, propVal);
}
double GetMathdx()
{
	double result;
	GetProperty(0xe, VT_R8, (void*)&result);
	return result;
}
void SetMathdx(double propVal)
{
	SetProperty(0xe, VT_R8, propVal);
}
double GetMathly()
{
	double result;
	GetProperty(0xf, VT_R8, (void*)&result);
	return result;
}
void SetMathly(double propVal)
{
	SetProperty(0xf, VT_R8, propVal);
}
double GetMathdy()
{
	double result;
	GetProperty(0x10, VT_R8, (void*)&result);
	return result;
}
void SetMathdy(double propVal)
{
	SetProperty(0x10, VT_R8, propVal);
}
long GetTypeAbs()
{
	long result;
	GetProperty(0x15, VT_I4, (void*)&result);
	return result;
}
void SetTypeAbs(long propVal)
{
	SetProperty(0x15, VT_I4, propVal);
}
long GetMakeUpor()
{
	long result;
	GetProperty(0x16, VT_I4, (void*)&result);
	return result;
}
void SetMakeUpor(long propVal)
{
	SetProperty(0x16, VT_I4, propVal);
}
double GetUporVerh()
{
	double result;
	GetProperty(0x17, VT_R8, (void*)&result);
	return result;
}
void SetUporVerh(double propVal)
{
	SetProperty(0x17, VT_R8, propVal);
}
double GetUporNis()
{
	double result;
	GetProperty(0x18, VT_R8, (void*)&result);
	return result;
}
void SetUporNis(double propVal)
{
	SetProperty(0x18, VT_R8, propVal);
}
double GetUporDelta()
{
	double result;
	GetProperty(0x1a, VT_R8, (void*)&result);
	return result;
}
void SetUporDelta(double propVal)
{
	SetProperty(0x1a, VT_R8, propVal);
}
CString GetFontName()
{
	CString result;
	GetProperty(0x1b, VT_BSTR, (void*)&result);
	return result;
}
void SetFontName(CString propVal)
{
	SetProperty(0x1b, VT_BSTR, propVal);
}
long GetFontSize()
{
	long result;
	GetProperty(0x1c, VT_I4, (void*)&result);
	return result;
}
void SetFontSize(long propVal)
{
	SetProperty(0x1c, VT_I4, propVal);
}
long GetElementWidth()
{
	long result;
	GetProperty(0x20, VT_I4, (void*)&result);
	return result;
}
void SetElementWidth(long propVal)
{
	SetProperty(0x20, VT_I4, propVal);
}
BOOL GetIsShowPropSheet()
{
	BOOL result;
	GetProperty(0x2b, VT_BOOL, (void*)&result);
	return result;
}
void SetIsShowPropSheet(BOOL propVal)
{
	SetProperty(0x2b, VT_BOOL, propVal);
}
long GetCurSelItem()
{
	long result;
	GetProperty(0x56, VT_I4, (void*)&result);
	return result;
}
void SetCurSelItem(long propVal)
{
	SetProperty(0x56, VT_I4, propVal);
}
long GetMode()
{
	long result;
	GetProperty(0x61, VT_I4, (void*)&result);
	return result;
}
void SetMode(long propVal)
{
	SetProperty(0x61, VT_I4, propVal);
}


};
