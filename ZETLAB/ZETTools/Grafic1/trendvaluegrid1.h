#pragma once

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CTrendvaluegrid1 wrapper class

class CTrendvaluegrid1 : public CWnd
{
protected:
	DECLARE_DYNCREATE(CTrendvaluegrid1)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x3C794475, 0x603A, 0x4EF2, { 0xBF, 0xD9, 0x5A, 0xC3, 0x6A, 0x40, 0x9, 0x22 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle,
						const RECT& rect, CWnd* pParentWnd, UINT nID, 
						CCreateContext* pContext = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
	}

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, 
				UINT nID, CFile* pPersist = NULL, BOOL bStorage = FALSE,
				BSTR bstrLicKey = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); 
	}

// Attributes
public:


// Operations
public:

// _DZetTrendValueGrid

// Functions
//

	void Display()
	{
		InvokeHelper(0x17, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long ShowPropSheet()
	{
		long result;
		InvokeHelper(0x18, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long OutWindPtr(signed char * ptr)
	{
		long result;
		static BYTE parms[] = VTS_PI1 ;
		InvokeHelper(0x19, DISPATCH_METHOD, VT_I4, (void*)&result, parms, ptr);
		return result;
	}
	long InWindPtr(signed char * ptr)
	{
		long result;
		static BYTE parms[] = VTS_PI1 ;
		InvokeHelper(0x1a, DISPATCH_METHOD, VT_I4, (void*)&result, parms, ptr);
		return result;
	}
	void PushDataToClipBoard()
	{
		InvokeHelper(0x1b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void DrawPicture(unsigned long hdc, long x, long y, long width, long height)
	{
		static BYTE parms[] = VTS_UI4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 ;
		InvokeHelper(0x1c, DISPATCH_METHOD, VT_EMPTY, NULL, parms, hdc, x, y, width, height);
	}
	BOOL AddToolTip(LPCTSTR text, long pos)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I4 ;
		InvokeHelper(0x1d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, text, pos);
		return result;
	}
	BOOL RemoveAllToolTips()
	{
		BOOL result;
		InvokeHelper(0x1e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	long SaveGridToFile(LPCTSTR FileName)
	{
		long result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x1f, DISPATCH_METHOD, VT_I4, (void*)&result, parms, FileName);
		return result;
	}
	long ValidGraph(long Number, long Valid)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0x20, DISPATCH_METHOD, VT_I4, (void*)&result, parms, Number, Valid);
		return result;
	}
	void DisplayAllData()
	{
		InvokeHelper(0x24, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void AutoScaleVisible()
	{
		InvokeHelper(0x25, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void AutoScaleAll()
	{
		InvokeHelper(0x26, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void AutoScaleY()
	{
		InvokeHelper(0x27, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long Paint(long Graph, DATE * Dates, float * Data, long ArraysSize, long AutoSort)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_PDATE VTS_PR4 VTS_I4 VTS_I4 ;
		InvokeHelper(0x28, DISPATCH_METHOD, VT_I4, (void*)&result, parms, Graph, Dates, Data, ArraysSize, AutoSort);
		return result;
	}
	long PaintDouble(long Graph, DATE * Dates, double * Data, long ArraysSize, long AutoSort)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_PDATE VTS_PR8 VTS_I4 VTS_I4 ;
		InvokeHelper(0x29, DISPATCH_METHOD, VT_I4, (void*)&result, parms, Graph, Dates, Data, ArraysSize, AutoSort);
		return result;
	}
	long PaintTrend(long Graph, DATE * Dates, float * MinValueArray, float * MaxValueArray, long ArraysSize, long AutoSort)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_PDATE VTS_PR4 VTS_PR4 VTS_I4 VTS_I4 ;
		InvokeHelper(0x2a, DISPATCH_METHOD, VT_I4, (void*)&result, parms, Graph, Dates, MinValueArray, MaxValueArray, ArraysSize, AutoSort);
		return result;
	}
	long PaintTrendDouble(long Graph, DATE * Dates, double * MinValueArray, double * MaxValueArray, long ArraysSize, long AutoSort)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_PDATE VTS_PR8 VTS_PR8 VTS_I4 VTS_I4 ;
		InvokeHelper(0x2b, DISPATCH_METHOD, VT_I4, (void*)&result, parms, Graph, Dates, MinValueArray, MaxValueArray, ArraysSize, AutoSort);
		return result;
	}
	long PaintMinMaxArray(long Graph, DATE * Dates, float * MinMaxDataArray, long ArraySize, long AutoSort)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_PDATE VTS_PR4 VTS_I4 VTS_I4 ;
		InvokeHelper(0x44, DISPATCH_METHOD, VT_I4, (void*)&result, parms, Graph, Dates, MinMaxDataArray, ArraySize, AutoSort);
		return result;
	}
	void CancelCurrentSelection()
	{
		InvokeHelper(0x2c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void SetGraphName(long Graph, LPCTSTR Name)
	{
		static BYTE parms[] = VTS_I4 VTS_BSTR ;
		InvokeHelper(0x2d, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Graph, Name);
	}
	void SetGraphsNames(BSTR * Names, long Count)
	{
		static BYTE parms[] = VTS_PBSTR VTS_I4 ;
		InvokeHelper(0x2e, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Names, Count);
	}
	CString GetGraphName(long Graph)
	{
		CString result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x35, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Graph);
		return result;
	}
	void ClearAllData()
	{
		InvokeHelper(0x2f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long SetColorLineCount(long Count)
	{
		long result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x30, DISPATCH_METHOD, VT_I4, (void*)&result, parms, Count);
		return result;
	}
	long SetColorLineFont(long Number, unsigned long _Color)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_UI4 ;
		InvokeHelper(0x31, DISPATCH_METHOD, VT_I4, (void*)&result, parms, Number, _Color);
		return result;
	}
	long SetColorLineName(long Number, LPCTSTR Name)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_BSTR ;
		InvokeHelper(0x32, DISPATCH_METHOD, VT_I4, (void*)&result, parms, Number, Name);
		return result;
	}
	long SetColorLineSpans(long Number, DATE * DateBeginArray, DATE * DateEndArray, unsigned long * ColorsArray, long ArraySize)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_PDATE VTS_PDATE VTS_PUI4 VTS_I4 ;
		InvokeHelper(0x33, DISPATCH_METHOD, VT_I4, (void*)&result, parms, Number, DateBeginArray, DateEndArray, ColorsArray, ArraySize);
		return result;
	}
	unsigned long get_GraphColor(long Number)
	{
		unsigned long result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x34, DISPATCH_PROPERTYGET, VT_UI4, (void*)&result, parms, Number);
		return result;
	}
	void put_GraphColor(long Number, unsigned long newValue)
	{
		static BYTE parms[] = VTS_I4 VTS_UI4 ;
		InvokeHelper(0x34, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, Number, newValue);
	}
	void SetGraphUnit(long Graph, LPCTSTR Unit)
	{
		static BYTE parms[] = VTS_I4 VTS_BSTR ;
		InvokeHelper(0x37, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Graph, Unit);
	}
	CString GetGraphUnit(long Graph)
	{
		CString result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x38, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Graph);
		return result;
	}
	void SetGraphsUnits(BSTR * Units, long Count)
	{
		static BYTE parms[] = VTS_PBSTR VTS_I4 ;
		InvokeHelper(0x39, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Units, Count);
	}
	void DeleteGraphData(long Graph)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x3a, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Graph);
	}
	DATE get_HorCursorPos(long Cursor_Number)
	{
		DATE result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x3b, DISPATCH_PROPERTYGET, VT_DATE, (void*)&result, parms, Cursor_Number);
		return result;
	}
	void put_HorCursorPos(long Cursor_Number, DATE newValue)
	{
		static BYTE parms[] = VTS_I4 VTS_DATE ;
		InvokeHelper(0x3b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, Cursor_Number, newValue);
	}
	float get_VertCursorPos(long Cursor_Number)
	{
		float result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x3c, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms, Cursor_Number);
		return result;
	}
	void put_VertCursorPos(long Cursor_Number, float newValue)
	{
		static BYTE parms[] = VTS_I4 VTS_R4 ;
		InvokeHelper(0x3c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, Cursor_Number, newValue);
	}
	long AddMark(DATE Time, LPCTSTR MarkText, unsigned long MarkColor)
	{
		long result;
		static BYTE parms[] = VTS_DATE VTS_BSTR VTS_UI4 ;
		InvokeHelper(0x3d, DISPATCH_METHOD, VT_I4, (void*)&result, parms, Time, MarkText, MarkColor);
		return result;
	}
	void DeleteMark(long Number)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x3e, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Number);
	}
	long GetMarkCount()
	{
		long result;
		InvokeHelper(0x3f, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	DATE GetMarkTime(long Number)
	{
		DATE result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x40, DISPATCH_METHOD, VT_DATE, (void*)&result, parms, Number);
		return result;
	}
	long PaintMinMaxArrayDouble(long Graph, DATE * Dates, double * MinMaxDataArray, long ArraySize, long AutoSort)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_PDATE VTS_PR8 VTS_I4 VTS_I4 ;
		InvokeHelper(0x45, DISPATCH_METHOD, VT_I4, (void*)&result, parms, Graph, Dates, MinMaxDataArray, ArraySize, AutoSort);
		return result;
	}

// Properties
//

unsigned long GetClrFon()
{
	unsigned long result;
	GetProperty(0x1, VT_UI4, (void*)&result);
	return result;
}
void SetClrFon(unsigned long propVal)
{
	SetProperty(0x1, VT_UI4, propVal);
}
unsigned long GetClrGrd()
{
	unsigned long result;
	GetProperty(0x2, VT_UI4, (void*)&result);
	return result;
}
void SetClrGrd(unsigned long propVal)
{
	SetProperty(0x2, VT_UI4, propVal);
}
unsigned long GetClrCrs()
{
	unsigned long result;
	GetProperty(0x3, VT_UI4, (void*)&result);
	return result;
}
void SetClrCrs(unsigned long propVal)
{
	SetProperty(0x3, VT_UI4, propVal);
}
unsigned long GetClrDig()
{
	unsigned long result;
	GetProperty(0x4, VT_UI4, (void*)&result);
	return result;
}
void SetClrDig(unsigned long propVal)
{
	SetProperty(0x4, VT_UI4, propVal);
}
double GetXfirst()
{
	double result;
	GetProperty(0x5, VT_R8, (void*)&result);
	return result;
}
void SetXfirst(double propVal)
{
	SetProperty(0x5, VT_R8, propVal);
}
double GetXend()
{
	double result;
	GetProperty(0x6, VT_R8, (void*)&result);
	return result;
}
void SetXend(double propVal)
{
	SetProperty(0x6, VT_R8, propVal);
}
double GetMathLeftX()
{
	double result;
	GetProperty(0x7, VT_R8, (void*)&result);
	return result;
}
void SetMathLeftX(double propVal)
{
	SetProperty(0x7, VT_R8, propVal);
}
double GetMathRightX()
{
	double result;
	GetProperty(0x8, VT_R8, (void*)&result);
	return result;
}
void SetMathRightX(double propVal)
{
	SetProperty(0x8, VT_R8, propVal);
}
double GetMathMinY()
{
	double result;
	GetProperty(0x9, VT_R8, (void*)&result);
	return result;
}
void SetMathMinY(double propVal)
{
	SetProperty(0x9, VT_R8, propVal);
}
double GetMathMaxY()
{
	double result;
	GetProperty(0xa, VT_R8, (void*)&result);
	return result;
}
void SetMathMaxY(double propVal)
{
	SetProperty(0xa, VT_R8, propVal);
}
long GetTypeAbs()
{
	long result;
	GetProperty(0xb, VT_I4, (void*)&result);
	return result;
}
void SetTypeAbs(long propVal)
{
	SetProperty(0xb, VT_I4, propVal);
}
long GetMakeUpor()
{
	long result;
	GetProperty(0xc, VT_I4, (void*)&result);
	return result;
}
void SetMakeUpor(long propVal)
{
	SetProperty(0xc, VT_I4, propVal);
}
double GetUporVerh()
{
	double result;
	GetProperty(0xd, VT_R8, (void*)&result);
	return result;
}
void SetUporVerh(double propVal)
{
	SetProperty(0xd, VT_R8, propVal);
}
double GetUporNis()
{
	double result;
	GetProperty(0xe, VT_R8, (void*)&result);
	return result;
}
void SetUporNis(double propVal)
{
	SetProperty(0xe, VT_R8, propVal);
}
double GetUporDelta()
{
	double result;
	GetProperty(0xf, VT_R8, (void*)&result);
	return result;
}
void SetUporDelta(double propVal)
{
	SetProperty(0xf, VT_R8, propVal);
}
CString GetFontName()
{
	CString result;
	GetProperty(0x10, VT_BSTR, (void*)&result);
	return result;
}
void SetFontName(CString propVal)
{
	SetProperty(0x10, VT_BSTR, propVal);
}
long GetFontSize()
{
	long result;
	GetProperty(0x11, VT_I4, (void*)&result);
	return result;
}
void SetFontSize(long propVal)
{
	SetProperty(0x11, VT_I4, propVal);
}
long GetLineWidth()
{
	long result;
	GetProperty(0x12, VT_I4, (void*)&result);
	return result;
}
void SetLineWidth(long propVal)
{
	SetProperty(0x12, VT_I4, propVal);
}
BOOL GetIsShowPropSheet()
{
	BOOL result;
	GetProperty(0x13, VT_BOOL, (void*)&result);
	return result;
}
void SetIsShowPropSheet(BOOL propVal)
{
	SetProperty(0x13, VT_BOOL, propVal);
}
long GetCurSelItem()
{
	long result;
	GetProperty(0x14, VT_I4, (void*)&result);
	return result;
}
void SetCurSelItem(long propVal)
{
	SetProperty(0x14, VT_I4, propVal);
}
long GetMode()
{
	long result;
	GetProperty(0x15, VT_I4, (void*)&result);
	return result;
}
void SetMode(long propVal)
{
	SetProperty(0x15, VT_I4, propVal);
}
long GetGraphCount()
{
	long result;
	GetProperty(0x16, VT_I4, (void*)&result);
	return result;
}
void SetGraphCount(long propVal)
{
	SetProperty(0x16, VT_I4, propVal);
}
long GetAutoInvalidate()
{
	long result;
	GetProperty(0x36, VT_I4, (void*)&result);
	return result;
}
void SetAutoInvalidate(long propVal)
{
	SetProperty(0x36, VT_I4, propVal);
}
long GetVerticalGraph()
{
	long result;
	GetProperty(0x41, VT_I4, (void*)&result);
	return result;
}
void SetVerticalGraph(long propVal)
{
	SetProperty(0x41, VT_I4, propVal);
}
long GetCountMaxVisiblePoint()
{
	long result;
	GetProperty(0x42, VT_I4, (void*)&result);
	return result;
}
void SetCountMaxVisiblePoint(long propVal)
{
	SetProperty(0x42, VT_I4, propVal);
}
long GetUseLimitOnCountVisiblePoints()
{
	long result;
	GetProperty(0x43, VT_I4, (void*)&result);
	return result;
}
void SetUseLimitOnCountVisiblePoints(long propVal)
{
	SetProperty(0x43, VT_I4, propVal);
}


};
