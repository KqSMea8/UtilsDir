#pragma once
//*************************************************************************************************
#include <ZetTools\include\ZetTools.h>
#include <vector>
//*************************************************************************************************
#define NUMBER_SEC_IN_WEEK		7 * NUMBER_SEC_IN_DAY			// количество секунд в неделе
//*************************************************************************************************
#define WIDTH_COLUMN_YEAR		(WIDTH_COLUMN_IN_PIX - 70)		// ширина между колонками в пикселях
#define WIDTH_COLUMN_IN_PIX		190								// ширина между колонками в пикселях 
//*************************************************************************************************
#define KOL_MONTHS_IN_YEAR		12								// количество месяцев в году
//*************************************************************************************************
#define PRECISION_NANSEC		1.e5							// необходимая точность разбиения секунды
//*************************************************************************************************
class GridLayoutX
{
public:
	// Начальная дата  /  Конечная дата  /  Ширина между ними в пикселях  /  Максимальная допустимая ширина между колонками (по умолчанию подобраны 190/120 пикселей)
	GridLayoutX(const CZetTime, const CZetTime, const int, const int max_columns_width = -1);
	GridLayoutX();
	//*********************************************************************************************
	std::vector<CZetTime> VectorLayout;							// Вектор содержащий дату для отметки на графике
	std::vector<CString> DateString;							// Вектор содержащий отформатированные строки с датами для показа их по оси Х
	//*********************************************************************************************
	/* переменная показывает что отображать
	0 - годы
	1 - месяцы
	2 - недели
	3 - дни
	4 - часы
	5 - минуты
	6 - секунды
	7 - доли секунд*/
	int del;
	CString FirstStrFormat;										// формат первой строки для первого числа выводимого на экран
	double FirstStrPrecision;									// точность представления первой строки
	//*********************************************************************************************
	int shift;													// по сколько разбивается
public:
	// Начальная дата  /  Конечная дата  /  Ширина между ними в пикселях  /  Максимальная допустимая ширина между колонками (по умолчанию подобраны 190/120 пикселей)
	void CalcGrid(const CZetTime, const CZetTime, const int, const int max_columns_width = -1);
private:
	void GridLayout();
	void StepYear(int);											// разбиение на годы		(1/2/5/10/20/50/100/200/500)
	void StepMonth(int);										// разбиение на месяцы		(1/3/6)
	void StepWeek(int);											// разбиение на недели		(1/2)
	void StepDay(int);											// разбиение на дни			(1/3)
	void StepHour(int);											// разбиение на часы		(1/3/6/12)
	void StepMinute(int);										// разбиение на минуты		(1/2/5/10/15/30)
	void StepSecond(int);										// разбиение на секунды		(1/2/5/10/15/30)
	void StepNanoSecond(double);									// разбиение на долисекунды	(0.001/0.002/0.005/0.01/0.02/0.05/0.1/0.2/0.5)
	//*********************************************************************************************
	void PushBackData(CString, double precision = 1);			// запись дат в вектор CString
	//*********************************************************************************************
	CString Format;												// формат для вывода чисел на экран
	CZetTime ZetDateTemp;										// временная переменная для записи в вектор			
	CZetTime first;												// дата левой границы
	CZetTime last;												// дата правой границы
	int width_pix;												// ширина окна в пикселях 
	int MaxColumnsWidth;										// максимальная ширина колонок, по умолчанию 190/120 пикселей
	//*********************************************************************************************
	uint16_t YearFirst;											// год левой границы
	uint16_t MonthFirst;										// месяц левой границы
	uint16_t DayFirst;											// день левой границы
	uint16_t DayWeekFirst;										// день недели левой границы
	uint16_t HourFirst;											// час левой границы
	uint16_t MinuteFirst;										// минута левой границы
	double SecondsFirst;										// секунда левой границы
};	//*********************************************************************************************