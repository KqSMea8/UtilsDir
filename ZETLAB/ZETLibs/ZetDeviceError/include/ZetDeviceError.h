#pragma once
#include <string>

//-----------------------------------------------------------------------------
#ifdef ZETDEVICEERROR_EXPORTS
#define ZETDEVICEERROR_API __declspec(dllexport)
#else
#define ZETDEVICEERROR_API __declspec(dllimport)
#endif

#define		MAX_ERROR_COUNT			600		// максимальное количество ошибок

const enum ErrorList
{
	ERROR_000 = 0,
	ERROR_001,
	ERROR_002,
	ERROR_003,
	ERROR_004,
	ERROR_005,
	ERROR_006,
	ERROR_007,
	ERROR_008,
	ERROR_009,
	ERROR_010,
	ERROR_011,
	ERROR_012,
	ERROR_013,
	ERROR_014,
	ERROR_015,
	ERROR_016,
	ERROR_017,
	ERROR_018,
	ERROR_019,
	ERROR_020,
	ERROR_021,
	ERROR_022,
	ERROR_023,
	ERROR_024,
	ERROR_025,
	ERROR_026,
	ERROR_027,
	ERROR_028,
	ERROR_029,
	ERROR_030,
	ERROR_031,
	ERROR_032,
	ERROR_033,
	ERROR_034,
	ERROR_035,
	ERROR_036,
	ERROR_037,
	ERROR_038,
	ERROR_039,
	ERROR_040,
	ERROR_041,
	ERROR_042,
	ERROR_043,
	ERROR_044,
	ERROR_045,
	ERROR_046,
	ERROR_047,
	ERROR_048,
	ERROR_049,
	ERROR_050,
	ERROR_051,
	ERROR_052,
	ERROR_053,
	ERROR_054,
	ERROR_055,
	ERROR_056,
	ERROR_057,
	ERROR_058,
	ERROR_059,
	ERROR_060,
	ERROR_061,
	ERROR_062,
	ERROR_063,
	ERROR_064,
	ERROR_065,
	ERROR_066,
	ERROR_067,
	ERROR_068,
	ERROR_069,
	ERROR_070,
	ERROR_071,
	ERROR_072,
	ERROR_073,
	ERROR_074,
	ERROR_075,
	ERROR_076,
	ERROR_077,
	ERROR_078,
	ERROR_079,
	ERROR_080,
	ERROR_081,
	ERROR_082,
	ERROR_083,
	ERROR_084,
	ERROR_085,
	ERROR_086,
	ERROR_087,
	ERROR_088,
	ERROR_089,
	ERROR_090,
	ERROR_091,
	ERROR_092,
	ERROR_093,
	ERROR_094,
	ERROR_095,
	ERROR_096,
	ERROR_097,
	ERROR_098,
	ERROR_099,
	ERROR_100,
	ERROR_101,
	ERROR_102,
	ERROR_103,
	ERROR_104,
	ERROR_105,
	ERROR_106,
	ERROR_107,
	ERROR_108,
	ERROR_109,
	ERROR_110,
	ERROR_111,
	ERROR_112,
	ERROR_113,
	ERROR_114,
	ERROR_115,
	ERROR_116,
	ERROR_117,
	ERROR_118,
	ERROR_119,
	ERROR_120,
	ERROR_121,
	ERROR_122,
	ERROR_123,
	ERROR_124,
	ERROR_125,
	ERROR_126,
	ERROR_127,
	ERROR_128,
	ERROR_129,
	ERROR_130,
	ERROR_131,
	ERROR_132,
	ERROR_133,
	ERROR_134,
	ERROR_135,
	ERROR_136,
	ERROR_137,
	ERROR_138,
	ERROR_139,
	ERROR_140,
	ERROR_141,
	ERROR_142,
	ERROR_143,
	ERROR_144,
	ERROR_145,
	ERROR_146,
	ERROR_147,
	ERROR_148,
	ERROR_149,
	ERROR_150,
	ERROR_151,
	ERROR_152,
	ERROR_153,
	ERROR_154,
	ERROR_155,
	ERROR_156,
	ERROR_157,
	ERROR_158,
	ERROR_159,
	ERROR_160,
	ERROR_161,
	ERROR_162,
	ERROR_163,
	ERROR_164,
	ERROR_165,
	ERROR_166,
	ERROR_167,
	ERROR_168,
	ERROR_169,
	ERROR_170,
	ERROR_171,
	ERROR_172,
	ERROR_173,
	ERROR_174,
	ERROR_175,
	ERROR_176,
	ERROR_177,
	ERROR_178,
	ERROR_179,
	ERROR_180,
	ERROR_181,
	ERROR_182,
	ERROR_183,
	ERROR_184,
	ERROR_185,
	ERROR_186,
	ERROR_187,
	ERROR_188,
	ERROR_189,
	ERROR_190,
	ERROR_191,
	ERROR_192,
	ERROR_193,
	ERROR_194,
	ERROR_195,
	ERROR_196,
	ERROR_197,
	ERROR_198,
	ERROR_199,
	ERROR_200,
	ERROR_201,
	ERROR_202,
	ERROR_203,
	ERROR_204,
	ERROR_205,
	ERROR_206,
	ERROR_207,
	ERROR_208,
	ERROR_209,
	ERROR_210,
	ERROR_211,
	ERROR_212,
	ERROR_213,
	ERROR_214,
	ERROR_215,
	ERROR_216,
	ERROR_217,
	ERROR_218,
	ERROR_219,
	ERROR_220,
	ERROR_221,
	ERROR_222,
	ERROR_223,
	ERROR_224,
	ERROR_225,
	ERROR_226,
	ERROR_227,
	ERROR_228,
	ERROR_229,
	ERROR_230,
	ERROR_231,
	ERROR_232,
	ERROR_233,
	ERROR_234,
	ERROR_235,
	ERROR_236,
	ERROR_237,
	ERROR_238,
	ERROR_239,
	ERROR_240,
	ERROR_241,
	ERROR_242,
	ERROR_243,
	ERROR_244,
	ERROR_245,
	ERROR_246,
	ERROR_247,
	ERROR_248,
	ERROR_249,
	ERROR_250,
	ERROR_251,
	ERROR_252,
	ERROR_253,
	ERROR_254,
	ERROR_255,
	ERROR_256,
	ERROR_257,
	ERROR_258,
	ERROR_259,
	ERROR_260,
	ERROR_261,
	ERROR_262,
	ERROR_263,
	ERROR_264,
	ERROR_265,
	ERROR_266,
	ERROR_267,
	ERROR_268,
	ERROR_269,
	ERROR_270,
	ERROR_271,
	ERROR_272,
	ERROR_273,
	ERROR_274,
	ERROR_275,
	ERROR_276,
	ERROR_277,
	ERROR_278,
	ERROR_279,
	ERROR_280,
	ERROR_281,
	ERROR_282,
	ERROR_283,
	ERROR_284,
	ERROR_285,
	ERROR_286,
	ERROR_287,
	ERROR_288,
	ERROR_289,
	ERROR_290,
	ERROR_291,
	ERROR_292,
	ERROR_293,
	ERROR_294,
	ERROR_295,
	ERROR_296,
	ERROR_297,
	ERROR_298,
	ERROR_299,
	ERROR_300,
	ERROR_301,
	ERROR_302,
	ERROR_303,
	ERROR_304,
	ERROR_305,
	ERROR_306,
	ERROR_307,
	ERROR_308,
	ERROR_309,
	ERROR_310,
	ERROR_311,
	ERROR_312,
	ERROR_313,
	ERROR_314,
	ERROR_315,
	ERROR_316,
	ERROR_317,
	ERROR_318,
	ERROR_319,
	ERROR_320,
	ERROR_321,
	ERROR_322,
	ERROR_323,
	ERROR_324,
	ERROR_325,
	ERROR_326,
	ERROR_327,
	ERROR_328,
	ERROR_329,
	ERROR_330,
	ERROR_331,
	ERROR_332,
	ERROR_333,
	ERROR_334,
	ERROR_335,
	ERROR_336,
	ERROR_337,
	ERROR_338,
	ERROR_339,
	ERROR_340,
	ERROR_341,
	ERROR_342,
	ERROR_343,
	ERROR_344,
	ERROR_345,
	ERROR_346,
	ERROR_347,
	ERROR_348,
	ERROR_349,
	ERROR_350,
	ERROR_351,
	ERROR_352,
	ERROR_353,
	ERROR_354,
	ERROR_355,
	ERROR_356,
	ERROR_357,
	ERROR_358,
	ERROR_359,
	ERROR_360,
	ERROR_361,
	ERROR_362,
	ERROR_363,
	ERROR_364,
	ERROR_365,
	ERROR_366,
	ERROR_367,
	ERROR_368,
	ERROR_369,
	ERROR_370,
	ERROR_371,
	ERROR_372,
	ERROR_373,
	ERROR_374,
	ERROR_375,
	ERROR_376,
	ERROR_377,
	ERROR_378,
	ERROR_379,
	ERROR_380,
	ERROR_381,
	ERROR_382,
	ERROR_383,
	ERROR_384,
	ERROR_385,
	ERROR_386,
	ERROR_387,
	ERROR_388,
	ERROR_389,
	ERROR_390,
	ERROR_391,
	ERROR_392,
	ERROR_393,
	ERROR_394,
	ERROR_395,
	ERROR_396,
	ERROR_397,
	ERROR_398,
	ERROR_399,
	ERROR_400,
	ERROR_401,
	ERROR_402,
	ERROR_403,
	ERROR_404,
	ERROR_405,
	ERROR_406,
	ERROR_407,
	ERROR_408,
	ERROR_409,
	ERROR_410,
	ERROR_411,
	ERROR_412,
	ERROR_413,
	ERROR_414,
	ERROR_415,
	ERROR_416,
	ERROR_417,
	ERROR_418,
	ERROR_419,
	ERROR_420,
	ERROR_421,
	ERROR_422,
	ERROR_423,
	ERROR_424,
	ERROR_425,
	ERROR_426,
	ERROR_427,
	ERROR_428,
	ERROR_429,
	ERROR_430,
	ERROR_431,
	ERROR_432,
	ERROR_433,
	ERROR_434,
	ERROR_435,
	ERROR_436,
	ERROR_437,
	ERROR_438,
	ERROR_439,
	ERROR_440,
	ERROR_441,
	ERROR_442,
	ERROR_443,
	ERROR_444,
	ERROR_445,
	ERROR_446,
	ERROR_447,
	ERROR_448,
	ERROR_449,
	ERROR_450,
	ERROR_451,
	ERROR_452,
	ERROR_453,
	ERROR_454,
	ERROR_455,
	ERROR_456,
	ERROR_457,
	ERROR_458,
	ERROR_459,
	ERROR_460,
	ERROR_461,
	ERROR_462,
	ERROR_463,
	ERROR_464,
	ERROR_465,
	ERROR_466,
	ERROR_467,
	ERROR_468,
	ERROR_469,
	ERROR_470,
	ERROR_471,
	ERROR_472,
	ERROR_473,
	ERROR_474,
	ERROR_475,
	ERROR_476,
	ERROR_477,
	ERROR_478,
	ERROR_479,
	ERROR_480,
	ERROR_481,
	ERROR_482,
	ERROR_483,
	ERROR_484,
	ERROR_485,
	ERROR_486,
	ERROR_487,
	ERROR_488,
	ERROR_489,
	ERROR_490,
	ERROR_491,
	ERROR_492,
	ERROR_493,
	ERROR_494,
	ERROR_495,
	ERROR_496,
	ERROR_497,
	ERROR_498,
	ERROR_499,
	ERROR_500,
	ERROR_501,
	ERROR_502,
	ERROR_503,
	ERROR_504,
	ERROR_505,
	ERROR_506,
	ERROR_507,
	ERROR_508,
	ERROR_509,
	ERROR_510,
	ERROR_511,
	ERROR_512,
	ERROR_513,
	ERROR_514,
	ERROR_515,
	ERROR_516,
	ERROR_517,
	ERROR_518,
	ERROR_519,
	ERROR_520,
	ERROR_521,
	ERROR_522,
	ERROR_523,
	ERROR_524,
	ERROR_525,
	ERROR_526,
	ERROR_527,
	ERROR_528,
	ERROR_529,
	ERROR_530,
	ERROR_531,
	ERROR_532,
	ERROR_533,
	ERROR_534,
	ERROR_535,
	ERROR_536,
	ERROR_537,
	ERROR_538,
	ERROR_539,
	ERROR_540,
	ERROR_541,
	ERROR_542,
	ERROR_543,
	ERROR_544,
	ERROR_545,
	ERROR_546,
	ERROR_547,
	ERROR_548,
	ERROR_549,
	ERROR_550,
	ERROR_551,
	ERROR_552,
	ERROR_553,
	ERROR_554,
	ERROR_555,
	ERROR_556,
	ERROR_557,
	ERROR_558,
	ERROR_559,
	ERROR_560,
	ERROR_561,
	ERROR_562,
	ERROR_563,
	ERROR_564,
	ERROR_565,
	ERROR_566,
	ERROR_567,
	ERROR_568,
	ERROR_569,
	ERROR_570,
	ERROR_571,
	ERROR_572,
	ERROR_573,
	ERROR_574,
	ERROR_575,
	ERROR_576,
	ERROR_577,
	ERROR_578,
	ERROR_579,
	ERROR_580,
	ERROR_581,
	ERROR_582,
	ERROR_583,
	ERROR_584,
	ERROR_585,
	ERROR_586,
	ERROR_587,
	ERROR_588,
	ERROR_589,
	ERROR_590,
	ERROR_591,
	ERROR_592,
	ERROR_593,
	ERROR_594,
	ERROR_595,
	ERROR_596,
	ERROR_597,
	ERROR_598,
	ERROR_599
};

enum WarningLevels		// уровни ошибок
{
	STATE_OKAY = 0,		// Зеленый индикатор
	STATE_WARNING,		// Желтый  индикатор
	STATE_ERROR			// Красный индикатор
};

class ZETDEVICEERROR_API CZetDeviceError
{
public:
	CZetDeviceError();
	~CZetDeviceError();
	//-----------------------------------------------------------------------------
	// Возвращает краткое описание ошибки 
	// Возвращает пустую строку если нету такой ошибки или описания к ней
	std::wstring  zdeErrorHelpString(_In_ const int nID);
	//-----------------------------------------------------------------------------
	// Возвращает уровень ошибки
	// Возвращаемые значения:
	// 0  - STATE_OKAY	 некритичная ошибка
	// 1  - STATE_WARNING ошибка на которую следует обратить внимание
	// 2  - STATE_ERROR   серьезная ошибка 
	// -1 - ошибки с таким номером не существует
	int zdeGetWarningLevel(_In_ const int nID);
private:
	int *m_ErrorLevel;		// массив содержащий уровень ошибки для каждой ошибки
};
